<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>任苹蜻的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://i.woblog.cn/"/>
  <updated>2016-11-21T15:12:36.654Z</updated>
  <id>http://i.woblog.cn/</id>
  
  <author>
    <name>任苹蜻</name>
    <email>30234@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript语法总结</title>
    <link href="http://i.woblog.cn/2016/11/17/java-script-syntax/"/>
    <id>http://i.woblog.cn/2016/11/17/java-script-syntax/</id>
    <published>2016-11-17T11:58:02.000Z</published>
    <updated>2016-11-21T15:12:36.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="他能做什么"><a href="#他能做什么" class="headerlink" title="他能做什么"></a>他能做什么</h2><ol>
<li>他可以制作交互性极强的网页效果</li>
<li>全世界大部分网页基本上都是用它</li>
<li>所有的主流浏览器基本都支持</li>
<li>数据验证，比如：用户名，邮箱格式验证</li>
</ol>
<h1 id="Hello-JS"><a href="#Hello-JS" class="headerlink" title="Hello JS"></a>Hello JS</h1><p>js有很强的易学性，只需要一个文本编辑器就可以编写了，并且js是是解释性的，不需要想c++，java语言需要编译。我们演示一个最简单的例子，就是动态向文档里输出一句话并且动态改变一个标签的字体演示。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d1"</span>&gt;</span>第一段文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"d2"</span>&gt;</span>第二段文字<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="built_in">document</span>.write(<span class="string">'hello js'</span>);</div><div class="line">			<span class="built_in">document</span>.getElementById(<span class="string">'d1'</span>).style.color = <span class="string">'red'</span>;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>可以看到我们通过document.write方法可以向body标签中添加内容，还可以通过document.getElementById方法通过id选择器找到一个标签动态的将字体的颜色改为了红色。</p>
<h1 id="如何在网页里引入js"><a href="#如何在网页里引入js" class="headerlink" title="如何在网页里引入js"></a>如何在网页里引入js</h1><h2 id="head标签"><a href="#head标签" class="headerlink" title="head标签"></a>head标签</h2><p>如果将js插入到head标签中，需要用script标签包裹住js代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;head&gt;</div><div class="line">	&lt;meta charset="utf-8" /&gt;</div><div class="line">	&lt;title&gt;&lt;/title&gt;</div><div class="line">	</div><div class="line">	&lt;script&gt;</div><div class="line">		alert('hi')</div><div class="line">	&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div></pre></td></tr></table></figure>
<h2 id="引入js文件"><a href="#引入js文件" class="headerlink" title="引入js文件"></a>引入js文件</h2><p>js代码不一定非要嵌入到网页里，可以单独写到一个文件，然后引入这文件就好了</p>
<p>common.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(<span class="string">'我来自一个外部文件'</span>)</div></pre></td></tr></table></figure>
<p>然后在index.html中引入</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/common.js"</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当然也可以在body标签中引入</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">	<span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/common.js"</span>&gt;</span><span class="undefined"></span></span></div><div class="line">	<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line">&lt;<span class="regexp">/body&gt;</span></div></pre></td></tr></table></figure>
<p>注意：js是一本脚本语言并且可以放到页面的任何位置，但是html是按照从前到后先后顺序执行的，一般放到body的最后面。</p>
<h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><p>js语句用分好或换行符隔开。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="string">'我是一行语句'</span>)</div><div class="line"><span class="built_in">document</span>.write(<span class="string">'我是也是一行语句'</span>);<span class="built_in">document</span>.write(<span class="string">'我是也是一行语句'</span>)</div></pre></td></tr></table></figure>
<p>其实这是三行语句。</p>
<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>注释是写给程序员开的，用以提高代码可读性的。</p>
<h2 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h2><p>用//表示</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//我是一个单行注释</span></div></pre></td></tr></table></figure>
<h2 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h2><p>用<code>/*开始到*/</code>结束中间的内容都是注释。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*我是一个多行注释</span></div><div class="line">我可以写多行*/</div></pre></td></tr></table></figure>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>简单来讲就是存储可变的量，比如我们我们的天气，每天都不一样。js中变量可以不声明直接使用，但这不符合规范，所有还是先声明，然后在使用，声明变量的语法是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//变量</span></div><div class="line"><span class="keyword">var</span> weather;</div><div class="line">weather=<span class="string">'晴天'</span>;</div><div class="line">alert(weather)</div><div class="line"></div><div class="line">weather=<span class="string">'雷阵雨'</span></div><div class="line">alert(weather)</div><div class="line"></div><div class="line">weather=<span class="number">10</span>;</div><div class="line">alert(weather)</div></pre></td></tr></table></figure>
<p>变量可以赋值为不同的类型。</p>
<p>注意：变量名区分大小写。</p>
<h2 id="变量名命名规则"><a href="#变量名命名规则" class="headerlink" title="变量名命名规则"></a>变量名命名规则</h2><ol>
<li>字母，下划线，美元符开始</li>
<li>后面接任意多个字母，数字，下划线，美元符</li>
<li>不能使用js的保留关键字</li>
</ol>
<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p>if else语句可以判断条件是否成立，然后分别执行对应的代码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> age=<span class="number">17</span>;</div><div class="line"><span class="keyword">if</span> (age&gt;=<span class="number">18</span>) &#123;</div><div class="line">	alert(<span class="string">"你成年了"</span>)</div><div class="line">&#125; <span class="keyword">else</span>&#123;</div><div class="line">	alert(<span class="string">"你还没用成年"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myage = <span class="number">99</span>; <span class="comment">//赵红的年龄为99</span></div><div class="line"><span class="keyword">if</span>(myage &lt;= <span class="number">44</span>) &#123;</div><div class="line">	<span class="built_in">document</span>.write(<span class="string">"青年"</span>);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(myage &lt;= <span class="number">59</span>) &#123;</div><div class="line">	<span class="built_in">document</span>.write(<span class="string">"中年人"</span>);</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(myage &lt;= <span class="number">89</span>) &#123;</div><div class="line">	<span class="built_in">document</span>.write(<span class="string">"老年人"</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">	<span class="built_in">document</span>.write(<span class="string">"长寿老年人"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myweek = <span class="number">10</span>; <span class="comment">//myweek表示星期几变量</span></div><div class="line"><span class="keyword">switch</span>(myweek) &#123;</div><div class="line">	<span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">	<span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">		<span class="built_in">document</span>.write(<span class="string">"学习理念知识"</span>);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line">	<span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">	<span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">		<span class="built_in">document</span>.write(<span class="string">"到企业实践"</span>);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line"></div><div class="line">	<span class="keyword">default</span>:</div><div class="line">		<span class="built_in">document</span>.write(<span class="string">"周六、日休息和娱乐"</span>);</div><div class="line">		<span class="keyword">break</span>;</div><div class="line"></div><div class="line">	<span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">		<span class="built_in">document</span>.write(<span class="string">"总结经验"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一定要写break，default不用一定要放到最后。</p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>函数式用来完成某个特定功能的一组语句，用来提高代码的复用性。定义函数的语法是：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> 函数名称 (<span class="params"></span>) </span>&#123;</div><div class="line">	函数代码</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>其中function是定义函数的关键字</li>
<li>函数名就是为函数去一个名字，下次用只需要知道函数名称就行了，不需要知道这个函数具体怎么实现额。</li>
</ol>
<p>例如我们可以编写一个计算两数之和的方法:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">a,b</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> a+b;</div><div class="line">&#125;</div><div class="line"></div><div class="line">alert(add(<span class="number">10</span>,<span class="number">20</span>)) <span class="comment">//调用函数</span></div></pre></td></tr></table></figure>
<p>函数是不能自动执行的，需要我们手动调用。当然我们也可以定义一个button，点击后才执行一个函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line">			<span class="function"><span class="keyword">function</span> <span class="title">clickMe</span>(<span class="params"></span>) </span>&#123;</div><div class="line">				alert(<span class="string">'你再点一下试试！'</span>)</div><div class="line">			&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"clickMe()"</span> <span class="attr">value</span>=<span class="string">"你敢点击吗"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="互动操作"><a href="#互动操作" class="headerlink" title="互动操作"></a>互动操作</h1><p>这部分我们将讲解如何输出内容，警告，确认，提问对户口，以及打开新窗口，关闭窗口等操作。</p>
<h2 id="输出内容"><a href="#输出内容" class="headerlink" title="输出内容"></a>输出内容</h2><p>可以直接用document.write方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//输出内容</span></div><div class="line"><span class="built_in">document</span>.write(<span class="string">'输出内容'</span>)</div><div class="line"></div><div class="line"><span class="comment">//可以使用+号连接字符串</span></div><div class="line"><span class="built_in">document</span>.write(<span class="string">'拼接字符串'</span>+<span class="string">"&lt;br/&gt;"</span>)</div></pre></td></tr></table></figure>
<h2 id="警告信息"><a href="#警告信息" class="headerlink" title="警告信息"></a>警告信息</h2><p>有时候在网页想给用户一个提示框，则可以使用alert对话框。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">alert(<span class="string">'打印一个变量'</span>)</div><div class="line"><span class="keyword">var</span> name = <span class="string">'名字'</span></div><div class="line">alert(name)</div></pre></td></tr></table></figure>
<h2 id="确认对话框"><a href="#确认对话框" class="headerlink" title="确认对话框"></a>确认对话框</h2><p>该对话框显示一个确定取消对话框，可以和用户交互。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showLoveJS</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> loveJS=confirm(<span class="string">'你喜欢JS吗？'</span>)</div><div class="line">	<span class="keyword">if</span> (loveJS==<span class="literal">true</span>) &#123;</div><div class="line">		alert(<span class="string">'好的，继续加油'</span>)</div><div class="line">	&#125; <span class="keyword">else</span>&#123;</div><div class="line">		alert(<span class="string">'不喜欢也得学呀'</span>)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"showLoveJS()"</span> <span class="attr">value</span>=<span class="string">"你喜欢js吗"</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="提问对话框"><a href="#提问对话框" class="headerlink" title="提问对话框"></a>提问对话框</h2><p>通过prompt弹出的对话框还可以让用户输入一些信息。语法：</p>
<p>prompt(str1,str2)</p>
<p>参数解释：</p>
<p>str1:显示在对话框的标题</p>
<p>str2:对话框中文本中的内容，可以修改</p>
<p>返回值</p>
<p>点击确定返回文本框中的内容</p>
<p>点击取消返回null</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">inputName</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> name=prompt(<span class="string">'请输入你的名字：'</span>)</div><div class="line">	<span class="keyword">if</span> (name==<span class="literal">null</span>) &#123;</div><div class="line">		alert(<span class="string">'请输入名字'</span>)</div><div class="line">	&#125; <span class="keyword">else</span>&#123;</div><div class="line">		alert(<span class="string">'你好,'</span>+name)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;input type=<span class="string">"button"</span> onclick=<span class="string">"inputName()"</span> value=<span class="string">"请输入用户名"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h2 id="打开新浏览器窗口"><a href="#打开新浏览器窗口" class="headerlink" title="打开新浏览器窗口"></a>打开新浏览器窗口</h2><p>通过open方法可以从已有的窗口打开网页或新建一个浏览器窗口。Win</p>
<p>语法：</p>
<p>window.open([url地址],[窗口名称],[参数字符串])</p>
<p>参数解释：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">url地址：可选参数，在窗口中显示的路径，如果省略窗口就不显示任何文档。</div><div class="line"></div><div class="line">窗口名：可选参数，被打开窗口的名称。取值如下：</div><div class="line"></div><div class="line">  _top:在框架页面中，上传窗口显示目标网页</div><div class="line"></div><div class="line">  _blank:在新窗口中显示</div><div class="line"></div><div class="line">  _self:在当前窗口显示</div><div class="line"></div><div class="line">窗口名称：相同的name只能创建一个。不能包含空格。</div><div class="line"></div><div class="line">参数字符串：设置窗口的参数，多个用逗号分隔开</div></pre></td></tr></table></figure>
<p>窗口参数列表：</p>
<p><img src="http://img.mukewang.com/52e3677900013d6a05020261.jpg" alt=""></p>
<p>例如打开百度，窗口大小为300px*200px，没有菜单，无工具栏，无状态栏，有滚动条。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.open(<span class="string">'http://www.baidu.com'</span>,<span class="string">'_blank'</span>,<span class="string">'width=300,height=200,menubar=no,toolbar=no, status=no,scrollbars=yes'</span>)</div></pre></td></tr></table></figure>
<h2 id="关闭窗口"><a href="#关闭窗口" class="headerlink" title="关闭窗口"></a>关闭窗口</h2><p>可是使用window.close()关闭当前窗口，或者使用窗口对象.close()关闭指定窗口。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> win = <span class="built_in">window</span>.open(<span class="string">'http://www.baidu.com'</span>,<span class="string">'_blank'</span>,<span class="string">'width=300,height=200,menubar=no,toolbar=no, status=no,scrollbars=yes'</span>)</div><div class="line">win.close()</div></pre></td></tr></table></figure>
<p>打开一个窗口马上又关闭它。</p>
<h2 id="实例：打开用户输入的网址"><a href="#实例：打开用户输入的网址" class="headerlink" title="实例：打开用户输入的网址"></a>实例：打开用户输入的网址</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line"></div><div class="line">	&lt;head&gt;</div><div class="line">		&lt;meta charset="UTF-8"&gt;</div><div class="line">		&lt;title&gt;&lt;/title&gt;</div><div class="line"></div><div class="line">		&lt;script&gt;</div><div class="line">			function openWindow() &#123;</div><div class="line">				var url = prompt("请输入你想打开的网址：")</div><div class="line">				if(url == null) &#123;</div><div class="line">					alert('请输入网址')</div><div class="line">				&#125; else &#123;</div><div class="line">					open(url, '_blank', 'width=300,height=200,menubar=no,toolbar=no, status=no,scrollbars=yes')</div><div class="line">				&#125;</div><div class="line">			&#125;</div><div class="line">		&lt;/script&gt;</div><div class="line">	&lt;/head&gt;</div><div class="line"></div><div class="line">	&lt;body&gt;</div><div class="line"></div><div class="line">		&lt;input type="button" value="打开窗口" onclick="openWindow()" /&gt;</div><div class="line">	&lt;/body&gt;</div><div class="line"></div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h1 id="Dom操作"><a href="#Dom操作" class="headerlink" title="Dom操作"></a>Dom操作</h1><h2 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM"></a>什么是DOM</h2><p>全称为Document Object Model也就是文档对象模型，他定义了访问和处理HTML文档的标准方法。DOM将HTML文档呈现为代有元素，属性和文本的树结构，也称节点树。</p>
<ol>
<li>元素节点：像html,body,p标签</li>
<li>文本节点：内显示内容的节点，li，span</li>
<li>属性节点：如a标签有href属性可以指向一个网址</li>
</ol>
<h2 id="通过ID找元素"><a href="#通过ID找元素" class="headerlink" title="通过ID找元素"></a>通过ID找元素</h2><p>id是标签的唯一属性，所以说在网页中可以通过id找到一个确定的元素。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'d1'</span>).innerText = <span class="string">'我是动态添加的'</span></div></pre></td></tr></table></figure>
<h2 id="innerText属性"><a href="#innerText属性" class="headerlink" title="innerText属性"></a>innerText属性</h2><p>用于获取或替换该对象里面的html标签。区分大小写。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'d2'</span>).innerHTML = <span class="string">'&lt;h1&gt;标题1&lt;/h1&gt;'</span></div></pre></td></tr></table></figure>
<h2 id="改变HTML样式"><a href="#改变HTML样式" class="headerlink" title="改变HTML样式"></a>改变HTML样式</h2><p>可以通过js动态的改变html的样式。语法是Object.style.property=new style。</p>
<p>下面列取了常见的属性：</p>
<p><img src="http://img.mukewang.com/52e4d4240001dd6c04850229.jpg" alt=""></p>
<p>我们来写个实例代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> d3 = <span class="built_in">document</span>.getElementById(<span class="string">'d3'</span>)</div><div class="line">d3.style.color=<span class="string">'red'</span></div><div class="line">d3.style.fontSize=<span class="string">'28'</span></div><div class="line">d3.style.backgroundColor=<span class="string">'blue'</span></div></pre></td></tr></table></figure>
<h2 id="显示和隐藏标签"><a href="#显示和隐藏标签" class="headerlink" title="显示和隐藏标签"></a>显示和隐藏标签</h2><p>在网页中，有时候可能某个标签一开始是隐藏的，当一定条件后就显示了。可以通过style.display来设置。</p>
<p>取值：</p>
<p>none：隐藏元素</p>
<p>block:显示元素</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'d4'</span>).style.display=<span class="string">'none'</span></div></pre></td></tr></table></figure>
<h2 id="控制类属性"><a href="#控制类属性" class="headerlink" title="控制类属性"></a>控制类属性</h2><p>可以通过className获取或替换class属性值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'d5'</span>).className=<span class="string">'a'</span></div><div class="line"></div><div class="line"><span class="comment">//添加多个样式</span></div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'d5'</span>).className=<span class="string">'a'</span></div></pre></td></tr></table></figure>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组是用来存储多个数组，比如：一个班的同学。</p>
<h2 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myarr = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">myarr[<span class="number">0</span>]=<span class="number">80</span>;</div><div class="line">myarr[<span class="number">1</span>]=<span class="number">70</span>;</div><div class="line">myarr[<span class="number">2</span>]=<span class="number">90</span>;</div><div class="line"></div><div class="line"><span class="built_in">document</span>.write(myarr[<span class="number">0</span>])</div></pre></td></tr></table></figure>
<p>创建数组的时候也可以指定长度，但是实际上数组是可以边长的，所有没什么意思。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myarr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>);</div><div class="line"></div><div class="line">myarr[<span class="number">4</span>]=<span class="number">10</span>;</div><div class="line"></div><div class="line"><span class="built_in">document</span>.write(myarr.length)</div><div class="line"></div><div class="line"><span class="built_in">document</span>.write(myarr[<span class="number">0</span>]) <span class="comment">//undefined</span></div></pre></td></tr></table></figure>
<h2 id="创建数组时赋值"><a href="#创建数组时赋值" class="headerlink" title="创建数组时赋值"></a>创建数组时赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myarr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">140</span>,<span class="number">1324</span>);</div></pre></td></tr></table></figure>
<h2 id="字面数组"><a href="#字面数组" class="headerlink" title="字面数组"></a>字面数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myarr = [<span class="number">120</span>,<span class="number">34</span>,<span class="number">5</span>];</div></pre></td></tr></table></figure>
<p>数组里可以是任何类型(数字，字符，布尔值)</p>
<h2 id="数组属性"><a href="#数组属性" class="headerlink" title="数组属性"></a>数组属性</h2><p>长度：length</p>
<h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myarr = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">	myarr[i] = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</div><div class="line">		myarr[i][j] = i+j;</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//打印数组</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myarr.length; i++) &#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; myarr[i].length; j++) &#123;</div><div class="line">		<span class="built_in">document</span>.write(myarr[i][j]+<span class="string">' '</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="built_in">document</span>.write(<span class="string">'&lt;br /&gt;'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="字面常量方式"><a href="#字面常量方式" class="headerlink" title="字面常量方式"></a>字面常量方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myarr = [[<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">2</span>,<span class="number">4</span>]]</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; myarr.length; i++) &#123;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; myarr[i].length; j++) &#123;</div><div class="line">		<span class="built_in">document</span>.write(myarr[i][j]+<span class="string">' '</span>);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="built_in">document</span>.write(<span class="string">'&lt;br /&gt;'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>事件是可以别js检测到的行为。网页中的元素可以产生某些事件。比如：用户单击一个按钮时触发一个onClick事件。</p>
<table>
<thead>
<tr>
<th>事件</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>onclick</td>
<td>鼠标单击事件</td>
</tr>
<tr>
<td>onmouseover</td>
<td>鼠标经过事件</td>
</tr>
<tr>
<td>onmouseout</td>
<td>鼠标移动事件</td>
</tr>
<tr>
<td>onchange</td>
<td>文本框内容改变事件</td>
</tr>
<tr>
<td>onselect</td>
<td>文本框内容选中世事件</td>
</tr>
<tr>
<td>onfocus</td>
<td>获取到焦点时</td>
</tr>
<tr>
<td>onblur</td>
<td>失去焦点时</td>
</tr>
<tr>
<td>onload</td>
<td>网页加载时</td>
</tr>
<tr>
<td>onunload</td>
<td>关闭网页时</td>
</tr>
</tbody>
</table>
<h1 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h1><p>js中所以得事物都是对象，比如：字符串，数组，数值，函数。每个对象有一些属性和方法。</p>
<p>对象的属性：反应该对象的某些特质，比如：人有年龄。</p>
<p>对象的方法：反应某个对象执行的动作，比如：人可以吃饭，睡觉。</p>
<p>js提供了很多内置对象，比如：String,Date,Array等。</p>
<h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>日期对象可以存储任意一个日期，精确到毫秒。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(); <span class="comment">//当前时间</span></div><div class="line"><span class="built_in">console</span>.log(d);</div><div class="line"></div><div class="line"><span class="keyword">var</span> d1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2016</span>,<span class="number">10</span>,<span class="number">2</span>);</div><div class="line"><span class="built_in">console</span>.log(d1);</div><div class="line"></div><div class="line"><span class="keyword">var</span> d2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'oct 1,2012'</span>);</div><div class="line"><span class="built_in">console</span>.log(d2);</div></pre></td></tr></table></figure>
<p>处理日期时间相关的函数：</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>get/setDate</td>
<td>获取/设置日期，日</td>
</tr>
<tr>
<td>get/setFullYear</td>
<td>获取/设置年份，YYYY</td>
</tr>
<tr>
<td>get/setYear</td>
<td>获取/设置年份,三位</td>
</tr>
<tr>
<td>get/setMonth</td>
<td>获取/设置月份，一月份-0月份</td>
</tr>
<tr>
<td>get/setHours</td>
<td>获取/设置小时，24小时制</td>
</tr>
<tr>
<td>get/setMinutes</td>
<td>获取/设置分钟数</td>
</tr>
<tr>
<td>get/setSeconds</td>
<td>获取/设置秒钟数</td>
</tr>
<tr>
<td>get/setTime</td>
<td>获取/设置时间，时间戳</td>
</tr>
<tr>
<td>set/getDay</td>
<td>返回星期，0~6，0表示星期天</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="built_in">console</span>.log(d.getDate()); <span class="comment">//19，日</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(d.getFullYear()); <span class="comment">//2016，年</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(d.getYear()); <span class="comment">//116,年</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(d.getMonth()); <span class="comment">//10，月</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(d.getHours()); <span class="comment">//时</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(d.getMinutes()); <span class="comment">//分</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(d.getSeconds()); <span class="comment">//秒</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(d.getTime()); <span class="comment">//1479521736275,时间戳</span></div></pre></td></tr></table></figure>
<p>获取星期</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mydate = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="keyword">var</span> weekday = [<span class="string">"星期日"</span>, <span class="string">"星期一"</span>, <span class="string">"星期二"</span>, <span class="string">"星期三"</span>, <span class="string">"星期四"</span>, <span class="string">"星期五"</span>, <span class="string">"星期六"</span>];</div><div class="line"><span class="built_in">document</span>.write(<span class="string">"今天是："</span> + weekday[mydate.getDay()]);</div></pre></td></tr></table></figure>
<p>将当前时间添加2小时</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mydate.setTime( mydate.getTime()  + <span class="number">2</span>* <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</div></pre></td></tr></table></figure>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="charAt返回指定位置的字符串"><a href="#charAt返回指定位置的字符串" class="headerlink" title="charAt返回指定位置的字符串"></a>charAt返回指定位置的字符串</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span>  s = <span class="string">"家居安静安静啊hello"</span>;</div><div class="line"><span class="built_in">document</span>.write(s.charAt(<span class="number">8</span>)); <span class="comment">//e</span></div><div class="line"><span class="built_in">document</span>.write(s.charAt(<span class="number">0</span>)); <span class="comment">//家</span></div></pre></td></tr></table></figure>
<h2 id="indexOf字符串查找"><a href="#indexOf字符串查找" class="headerlink" title="indexOf字符串查找"></a>indexOf字符串查找</h2><p>indexOf(subString,startPos)返回某个字符串出现的位置，没搜索到返回-1，区分大小写。</p>
<h3 id="split分割"><a href="#split分割" class="headerlink" title="split分割"></a>split分割</h3><p>split(separator,[limit])，显示返回的字符串个数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">"家居.安.静安静.啊hello"</span>;</div><div class="line"><span class="built_in">console</span>.log(s.split(<span class="string">'.'</span>)) <span class="comment">//家居,安,静安静,啊hello</span></div><div class="line"><span class="built_in">console</span>.log(s.split(<span class="string">'.'</span>, <span class="number">2</span>)) <span class="comment">//家居,安</span></div></pre></td></tr></table></figure>
<p>如果用””分割，则每个字符都分割</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//["家", "居", ".", "安", ".", "静", "安", "静", ".", "啊", "h", "e", "l</span></div><div class="line"><span class="built_in">console</span>.log(s.split(<span class="string">''</span>));</div></pre></td></tr></table></figure>
<h3 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//居.</span></div><div class="line"><span class="built_in">console</span>.log(s.substring(<span class="number">1</span>, <span class="number">3</span>)); <span class="comment">//不包含位置3</span></div><div class="line"><span class="comment">//居.安</span></div><div class="line"><span class="built_in">console</span>.log(s.substr(<span class="number">1</span>,<span class="number">3</span>));</div></pre></td></tr></table></figure>
<p><a href="http://www.cnblogs.com/littledu/archive/2011/04/18/2019475.html" target="_blank" rel="external">http://www.cnblogs.com/littledu/archive/2011/04/18/2019475.html</a></p>
<p>区别：</p>
<p>string.substring( 起点 ， 终点 )</p>
<p>string.substr( 起点 ，长度 )</p>
<h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p>提供常用的数学计算，平方，对数，π。</p>
<p>Math是一个固有对象，不用创建实例，就可以调用里面的属性，方法。</p>
<h3 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h3><table>
<thead>
<tr>
<th>属性名</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>E</td>
<td>数学常量E，即自然对数底数，2.718</td>
</tr>
<tr>
<td>LN2</td>
<td>2的自然对数，0.693</td>
</tr>
<tr>
<td>LN10</td>
<td>10的自然对数，2.302</td>
</tr>
<tr>
<td>LOG2E</td>
<td>2为底的e对数，1.442</td>
</tr>
<tr>
<td>LOG10E</td>
<td>10为底的e对数，0.434</td>
</tr>
<tr>
<td>PI</td>
<td>圆周率，3.14159</td>
</tr>
<tr>
<td>SQRT1_2</td>
<td>2的平方根的倒数，0.707</td>
</tr>
<tr>
<td>SQRT2</td>
<td>2的平方根</td>
</tr>
</tbody>
</table>
<h3 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>abs(x)</td>
<td>数的绝对值</td>
</tr>
<tr>
<td>acos(x)</td>
<td>反余弦值</td>
</tr>
<tr>
<td>asin(x)</td>
<td>反正弦值</td>
</tr>
<tr>
<td>atan(x)</td>
<td>反正切值</td>
</tr>
<tr>
<td>atan2(y,x)</td>
<td>x轴到点(x,y)的角度(以弧度为单位)</td>
</tr>
<tr>
<td>ceil(x)</td>
<td>进行向上舍入</td>
</tr>
<tr>
<td>cos(x)</td>
<td>x的余弦值</td>
</tr>
<tr>
<td>exp(x)</td>
<td>e的指数</td>
</tr>
<tr>
<td>floor(x)</td>
<td>对数进行向下舍入</td>
</tr>
<tr>
<td>log(x)</td>
<td>自然对数，底为e</td>
</tr>
<tr>
<td>max(x,y)</td>
<td>x和y的最大值</td>
</tr>
<tr>
<td>min(x,y)</td>
<td>x和y的最小值</td>
</tr>
<tr>
<td>pow(x,y)</td>
<td>x的y次幂</td>
</tr>
<tr>
<td>random()</td>
<td>0~1之间的随机数</td>
</tr>
<tr>
<td>round(x)</td>
<td>四舍五入</td>
</tr>
<tr>
<td>sin(x)</td>
<td>数的正弦</td>
</tr>
<tr>
<td>sqrt(x)</td>
<td>数的平方根</td>
</tr>
<tr>
<td>tan(x)</td>
<td>正切</td>
</tr>
<tr>
<td>toSource()</td>
<td>返回对象的源代码，只有火狐支持</td>
</tr>
<tr>
<td>valueOf()</td>
<td>Math对象的原始值</td>
</tr>
</tbody>
</table>
<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>length:数组长度</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><table>
<thead>
<tr>
<th>方法名</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>concat()</td>
<td>连接多个数组，并返回，不改变源数组</td>
</tr>
<tr>
<td>join()</td>
<td>把数组的所有元素放入字符串，并用分隔符分割，默认逗号</td>
</tr>
<tr>
<td>pop()</td>
<td>删除并返回数组的最后一个元素</td>
</tr>
<tr>
<td>push()</td>
<td>向数组的末尾添加一个元素，并返回新长度</td>
</tr>
<tr>
<td>reverse()</td>
<td>颠倒数组中所以得元素</td>
</tr>
<tr>
<td>shift()</td>
<td>删除并返回数组的第一个元素</td>
</tr>
<tr>
<td>slice()</td>
<td>截取指定区域的元素</td>
</tr>
<tr>
<td>sort()</td>
<td>对数组元素排序，可以指定一个函数</td>
</tr>
<tr>
<td>splice()</td>
<td>删除元素，并向数组添加新元素</td>
</tr>
<tr>
<td>toString()</td>
<td>将数组转为字符串</td>
</tr>
<tr>
<td>toLocalString()</td>
<td>把数组转为本地字符串</td>
</tr>
<tr>
<td>unshift()</td>
<td>向数组添加一个或多个元素，并返回长度</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
</tr>
</tbody>
</table>
<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><p>  若返回值&lt;=-1，则表示 A 在排序后的序列中出现在 B 之前。<br>  若返回值&gt;-1 &amp;&amp; <1，则表示 a="" 和="" b="" 具有相同的排序顺序。="" 若返回值="">=1，则表示 A 在排序后的序列中出现在 B 之后。</1，则表示></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sortNum</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> a - b;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> myarr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"80"</span>, <span class="string">"16"</span>, <span class="string">"50"</span>, <span class="string">"6"</span>, <span class="string">"100"</span>, <span class="string">"1"</span>);</div><div class="line">myarr.sort(sortNum)</div></pre></td></tr></table></figure>
<h2 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h2><p>window对象是BOM的核心，Browser Object Model，浏览器对象模型，他代指当前浏览器窗口。</p>
<table>
<thead>
<tr>
<th>方法名</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>alert()</td>
<td>显示一个代一段消息和一个确认按钮的警告框</td>
</tr>
<tr>
<td>prompt()</td>
<td>用户可以输入的对话框</td>
</tr>
<tr>
<td>confirm()</td>
<td>一段消息，确定和取消按钮的对话框</td>
</tr>
<tr>
<td>open()</td>
<td>打开一个浏览器窗口，或者查找一个已命名的窗口</td>
</tr>
<tr>
<td>close()</td>
<td>关闭一个窗口</td>
</tr>
<tr>
<td>print()</td>
<td>打印当前窗口的内容</td>
</tr>
<tr>
<td>focus()</td>
<td>把键盘焦点给予一个窗口</td>
</tr>
<tr>
<td>blur()</td>
<td>把键盘从一个窗口移开</td>
</tr>
<tr>
<td>moveBy()</td>
<td>相对当前坐标叠加到一个坐标</td>
</tr>
<tr>
<td>moveTo()</td>
<td>把窗口移动到一个指定的坐标</td>
</tr>
<tr>
<td>resizeBy()</td>
<td>调整当前窗口大小，叠加</td>
</tr>
<tr>
<td>resizeTo()</td>
<td>调整当前窗口大小到指定的宽高</td>
</tr>
<tr>
<td>scrollBy()</td>
<td>把内容滚动到指定的坐标，叠加</td>
</tr>
<tr>
<td>scrollTo()</td>
<td>把内容滚动到指定的坐标</td>
</tr>
<tr>
<td>setInterval()</td>
<td>每隔指定的时间执行代码</td>
</tr>
<tr>
<td>setTimeout()</td>
<td>延迟指定的时间执行代码</td>
</tr>
<tr>
<td>clearInterval()</td>
<td>取消setInterval的设置</td>
</tr>
<tr>
<td>clearTimeout()</td>
<td>取消setTimeout的设置</td>
</tr>
</tbody>
</table>
<h2 id="History"><a href="#History" class="headerlink" title="History"></a>History</h2><p>记录了用户曾经访问过的页面，并且可以实现浏览器的前进和后退。</p>
<p><strong>注意:从窗口被打开的那一刻开始记录，每个浏览器窗口、每个标签页乃至每个框架，都有自己的history对象与特定的window对象关联。</strong></p>
<p><strong>语法：</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">window.history.[属性|方法]</div></pre></td></tr></table></figure>
<p><strong>注意：</strong>window可以省略。</p>
<h3 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h3><p>length:浏览器历史列表中的URL数量</p>
<h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><table>
<thead>
<tr>
<th>方法名</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>back()</td>
<td>前一个URL</td>
</tr>
<tr>
<td>forware()</td>
<td>下一个URL</td>
</tr>
<tr>
<td>go()</td>
<td>跳转到具体的某个页面</td>
</tr>
</tbody>
</table>
<h2 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h2><p>用于获取或设置窗体的URL,并且可以用于解析URL。</p>
<p><strong>语法:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">location.[属性|方法]</div></pre></td></tr></table></figure>
<p><img src="http://img.mukewang.com/53605c5a0001b26909900216.jpg" alt=""></p>
<h3 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h3><table>
<thead>
<tr>
<th>属性名</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>hash</td>
<td>从#开始的URL,也就是锚</td>
</tr>
<tr>
<td>host</td>
<td>主机名和端口号</td>
</tr>
<tr>
<td>hostname</td>
<td>url主机名</td>
</tr>
<tr>
<td>href</td>
<td>完整的url</td>
</tr>
<tr>
<td>pathname</td>
<td>路径</td>
</tr>
<tr>
<td>port</td>
<td>端口</td>
</tr>
<tr>
<td>protocol</td>
<td>url协议</td>
</tr>
<tr>
<td>search</td>
<td>从问号开始的URL，查询部分</td>
</tr>
</tbody>
</table>
<h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><table>
<thead>
<tr>
<th>方法名</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>assign()</td>
<td>加载新的文档</td>
</tr>
<tr>
<td>reload()</td>
<td>重新载入当前文档</td>
</tr>
<tr>
<td>replace()</td>
<td>用新文档替换当前文档</td>
</tr>
</tbody>
</table>
<h2 id="Navigator"><a href="#Navigator" class="headerlink" title="Navigator"></a>Navigator</h2><p>包含浏览器的信息，通常用于检测浏览器与操作系统的版本。</p>
<h3 id="属性-3"><a href="#属性-3" class="headerlink" title="属性"></a>属性</h3><table>
<thead>
<tr>
<th>属性名</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>appCodeName</td>
<td>浏览器代码名字符串表示</td>
</tr>
<tr>
<td>appName</td>
<td>返回浏览器名字</td>
</tr>
<tr>
<td>appVersion</td>
<td>浏览器平台和版本信息</td>
</tr>
<tr>
<td>platform</td>
<td>运行浏览器的操作系统平台</td>
</tr>
<tr>
<td>userAgent</td>
<td>返回客户机发给服务器user-agent头的值</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(navigator.appCodeName+<span class="string">'&lt;br /&gt;'</span>);</div><div class="line"><span class="built_in">document</span>.write(navigator.appName+<span class="string">'&lt;br /&gt;'</span>);</div><div class="line"><span class="built_in">document</span>.write(navigator.appVersion+<span class="string">'&lt;br /&gt;'</span>);</div><div class="line"><span class="built_in">document</span>.write(navigator.platform+<span class="string">'&lt;br /&gt;'</span>);</div><div class="line"><span class="built_in">document</span>.write(navigator.userAgent+<span class="string">'&lt;br /&gt;'</span>);</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Mozilla</div><div class="line">Netscape</div><div class="line">5.0 (Macintosh; Intel Mac OS X 10_11_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.98 Safari/537.36</div><div class="line">MacIntel</div><div class="line">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.98 Safari/537.36</div></pre></td></tr></table></figure>
<p>通过userAgent判断是什么浏览器：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> u_agent = navigator.userAgent;</div><div class="line"><span class="keyword">var</span> B_name = <span class="string">"不是想用的主流浏览器!"</span>;</div><div class="line"><span class="keyword">if</span>(u_agent.indexOf(<span class="string">"Firefox"</span>) &gt; <span class="number">-1</span>) &#123;</div><div class="line">	B_name = <span class="string">"Firefox"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(u_agent.indexOf(<span class="string">"Chrome"</span>) &gt; <span class="number">-1</span>) &#123;</div><div class="line">	B_name = <span class="string">"Chrome"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(u_agent.indexOf(<span class="string">"MSIE"</span>) &gt; <span class="number">-1</span> &amp;&amp; u_agent.indexOf(<span class="string">"Trident"</span>) &gt; <span class="number">-1</span>) &#123;</div><div class="line">	B_name = <span class="string">"IE(8-10)"</span>;</div><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(u_agent.indexOf(<span class="string">"Safari"</span>) &gt; <span class="number">-1</span>) &#123;</div><div class="line">	B_name = <span class="string">"Safari"</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">document</span>.write(<span class="string">"浏览器:"</span> + B_name + <span class="string">"&lt;br&gt;"</span>);</div><div class="line"><span class="built_in">document</span>.write(<span class="string">"u_agent:"</span> + u_agent + <span class="string">"&lt;br&gt;"</span>);</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">浏览器:Chrome</div><div class="line">u_agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.98 Safari/537.36</div></pre></td></tr></table></figure>
<h2 id="Screen"><a href="#Screen" class="headerlink" title="Screen"></a>Screen</h2><p>用于获取用户的屏幕信息。</p>
<h3 id="属性-4"><a href="#属性-4" class="headerlink" title="属性"></a>属性</h3><table>
<thead>
<tr>
<th>属性名</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>availHeight</td>
<td>窗口可用的屏幕高度,px, 减去界面特性,如任务栏</td>
</tr>
<tr>
<td>availWidth</td>
<td>可用的屏幕宽度，px</td>
</tr>
<tr>
<td>colorDepth</td>
<td>用户浏览器表示的颜色位数，通常为32位</td>
</tr>
<tr>
<td>pixeDepth</td>
<td>同上，ie不支持</td>
</tr>
<tr>
<td>height</td>
<td>屏幕的高度，px</td>
</tr>
<tr>
<td>width</td>
<td>屏幕的宽度，px</td>
</tr>
</tbody>
</table>
<p>屏幕宽高：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//macbook 13.3 retina</span></div><div class="line"><span class="built_in">document</span>.write(screen.width+<span class="string">'&lt;br /&gt;'</span>); <span class="comment">//1280</span></div><div class="line"><span class="built_in">document</span>.write(screen.height+<span class="string">'&lt;br /&gt;'</span>); <span class="comment">//800</span></div></pre></td></tr></table></figure>
<p>屏幕可用宽高</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.write(<span class="string">"可用宽度："</span> + screen.availWidth); <span class="comment">//1280</span></div><div class="line"><span class="built_in">document</span>.write(<span class="string">"可用高度："</span> + screen.availHeight); <span class="comment">//705</span></div></pre></td></tr></table></figure>
<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>DOM(Document Object Model)定义和处理HTML文档的标准方法，DOM将html呈现为元素，属性，文本的树结构，也叫节点树。</p>
<p>HTML文档可以说由节点构成的集合，DOM节点有:</p>
<ol>
<li>元素节点：上图中<html>、<body>、<p>等都是元素节点，即标签。</p></body></html></li>
<li>文本节点:向用户展示的内容，如</li><li>…</li>中的JavaScript、DOM、CSS等文本。
<li>属性节点:元素属性，如<a>标签的链接属性href=”<a href="http://bing.com&quot;。" target="_blank" rel="external">http://bing.com&quot;。</a></a></li>
</ol>
<h3 id="属性-5"><a href="#属性-5" class="headerlink" title="属性"></a>属性</h3><table>
<thead>
<tr>
<th>属性名</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>nodeName</td>
<td>节点名称，字符串</td>
</tr>
<tr>
<td>nodeType</td>
<td>节点类型，整型</td>
</tr>
<tr>
<td>nodeValue</td>
<td>节点值，字符串</td>
</tr>
</tbody>
</table>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;body&gt;</div><div class="line">	&lt;h1 id="h1"&gt;h1&lt;/h1&gt;</div><div class="line">	&lt;ul&gt;</div><div class="line">		&lt;li&gt;l1&lt;/li&gt;</div><div class="line">		&lt;li&gt;l2&lt;/li&gt;</div><div class="line">		&lt;li&gt;l3&lt;/li&gt;</div><div class="line">		&lt;li&gt;l4&lt;/li&gt;</div><div class="line">		&lt;li&gt;l5&lt;/li&gt;</div><div class="line">	&lt;/ul&gt;</div><div class="line"></div><div class="line">	&lt;script&gt;</div><div class="line">		var h1 = document.getElementById('h1');</div><div class="line">		console.log(h1.nodeName); //H1</div><div class="line">		console.log(h1.nodeType); //1</div><div class="line">		console.log(h1.childNodes[0].nodeValue); //h1</div><div class="line">	&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<h3 id="遍历节点方法"><a href="#遍历节点方法" class="headerlink" title="遍历节点方法"></a>遍历节点方法</h3><table>
<thead>
<tr>
<th>方法名</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>childNodes</td>
<td>元素子节点，数组</td>
</tr>
<tr>
<td>firstChild</td>
<td>第一个子节点</td>
</tr>
<tr>
<td>lastChild</td>
<td>最后一个子节点</td>
</tr>
<tr>
<td>parentNode</td>
<td>父节点</td>
</tr>
<tr>
<td>nextSibling</td>
<td>当前节点的下一个节点</td>
</tr>
<tr>
<td>previousSibling</td>
<td>当前节点的上一个节点</td>
</tr>
</tbody>
</table>
<h3 id="节点操作方法"><a href="#节点操作方法" class="headerlink" title="节点操作方法"></a>节点操作方法</h3><table>
<thead>
<tr>
<th>方法名</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>createElement(name)</td>
<td>创建一个新节点</td>
</tr>
<tr>
<td>createTextNode(text)</td>
<td>创建包含给定文本的文本节点</td>
</tr>
<tr>
<td>appendChild()</td>
<td>指定节点的子节点最后位置添加新节点</td>
</tr>
<tr>
<td>insertBefore()</td>
<td></td>
</tr>
<tr>
<td>removeChild()</td>
<td>从给定元素中删除一个子节点</td>
</tr>
<tr>
<td>replaceChild()</td>
<td>替换一个节点</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"h1"</span>&gt;</span>h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>l1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>l2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"ul_l3"</span>&gt;</span>l3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>l4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">li</span>&gt;</span>l5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">			<span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'ul'</span>)[<span class="number">0</span>];</div><div class="line"></div><div class="line">			<span class="keyword">var</span> ul_l3 = <span class="built_in">document</span>.getElementById(<span class="string">'ul_l3'</span>);</div><div class="line"></div><div class="line">			<span class="keyword">var</span> h2Node = <span class="built_in">document</span>.createElement(<span class="string">"h2"</span>);</div><div class="line">			<span class="keyword">var</span> textNode = <span class="built_in">document</span>.createTextNode(<span class="string">'这是text'</span>);</div><div class="line"></div><div class="line">			<span class="keyword">var</span> replaceextNode = <span class="built_in">document</span>.createTextNode(<span class="string">'这是替换进来的'</span>);</div><div class="line"></div><div class="line">			ul.appendChild(h2Node);</div><div class="line"></div><div class="line">			ul.insertBefore(textNode, ul_l3);</div><div class="line"></div><div class="line">			ul.replaceChild(replaceextNode, ul_l3);</div><div class="line"></div><div class="line">			ul.removeChild(replaceextNode);</div><div class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>节点类型</p>
<table>
<thead>
<tr>
<th>元素类型</th>
<th>节点类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>元素</td>
<td>1</td>
</tr>
<tr>
<td>属性</td>
<td>2</td>
</tr>
<tr>
<td>文本</td>
<td>3</td>
</tr>
<tr>
<td>注释</td>
<td>8</td>
</tr>
<tr>
<td>文档</td>
<td>9</td>
</tr>
</tbody>
</table>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><p>break<br>case<br>catch<br>continue<br>default<br>delete<br>do<br>else<br>finally<br>for<br>function<br>if<br>in<br>instanceof<br>new<br>return<br>switch<br>this<br>throw<br>try<br>typeof<br>var<br>void<br>while<br>with</p>
<h2 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h2><p>abstract<br>boolean<br>byte<br>char<br>class<br>const<br>debugger<br>double<br>enum<br>export<br>extends<br>fimal<br>float<br>goto<br>implements<br>import<br>int<br>interface<br>long<br>mative<br>package<br>private<br>protected<br>public<br>short<br>static<br>super<br>synchronized<br>throws<br>transient<br>volatile</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h2 id=&quot;他能做什么&quot;&gt;&lt;a href=&quot;#他能做什么&quot; class=&quot;headerlink&quot; title=&quot;他能做什么&quot;&gt;&lt;/a&gt;他能做什
    
    </summary>
    
      <category term="JavaScript" scheme="http://i.woblog.cn/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://i.woblog.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>React Native</title>
    <link href="http://i.woblog.cn/2016/11/14/react-native-env/"/>
    <id>http://i.woblog.cn/2016/11/14/react-native-env/</id>
    <published>2016-11-14T23:07:23.000Z</published>
    <updated>2016-11-21T15:12:36.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="搭建React-Native开发环境"><a href="#搭建React-Native开发环境" class="headerlink" title="搭建React Native开发环境"></a>搭建React Native开发环境</h1><h2 id="安装xcode"><a href="#安装xcode" class="headerlink" title="安装xcode"></a>安装xcode</h2><p>可以从app Store下载或者在苹果开发者中心下载。</p>
<h2 id="安装Command-Line-Tools"><a href="#安装Command-Line-Tools" class="headerlink" title="安装Command Line Tools"></a>安装Command Line Tools</h2><p>里面包括git这样的命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcode-select --install</div></pre></td></tr></table></figure>
<h2 id="安装homebrew"><a href="#安装homebrew" class="headerlink" title="安装homebrew"></a>安装homebrew</h2><p>mac上的一个软件包管理器，和linux上的yum,apt-get差不多</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>
<h2 id="安装watchman"><a href="#安装watchman" class="headerlink" title="安装watchman"></a>安装watchman</h2><p>facebook的一个开源项目，用来监视文件并且记录文件改动情况的一个库。</p>
<h2 id="安装flow"><a href="#安装flow" class="headerlink" title="安装flow"></a>安装flow</h2><p>JavaScript的静态类检查器，用于找出JavaScript代码中的类型错误。</p>
<p>当然推荐是安装完在nodejs开发中常见的依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install flow git gcc pkg-config cairo libpng jpeg mongodb</div></pre></td></tr></table></figure>
<p>注意：安装mongodb前先要安装pkg-config，makedepend。如果报错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Error: You must `brew link pkg-config makedepend` before mongodb can be installed</div></pre></td></tr></table></figure>
<p>就要链接：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">brew link makedepend</div><div class="line">brew link pkg-config</div></pre></td></tr></table></figure>
<h2 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h2><p>建议使用nvm，因为他可以管理多个版本</p>
<p>官方仓库：<a href="https://github.com/creationix/nvm" target="_blank" rel="external">https://github.com/creationix/nvm</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash</div></pre></td></tr></table></figure>
<p>安装完成后就可以执行nvm命令了。</p>
<p>安装nodejs</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">nvm install v4.2.3</div><div class="line">nvm alias default v4.2.3</div></pre></td></tr></table></figure>
<p>当前版本为：</p>
<p>➜  ~ node -v<br>v4.2.3</p>
<p>➜  ~ npm -v<br>2.14.7</p>
<p>由于国内有时npm仓库有点慢，所以切换淘宝源：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install cnpm -g</div></pre></td></tr></table></figure>
<h2 id="安装react-native"><a href="#安装react-native" class="headerlink" title="安装react native"></a>安装react native</h2><p>安装脚手架</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cnpm install -g react-native-cli@0.1.10 -g</div><div class="line">react-native -v</div></pre></td></tr></table></figure>
<h2 id="创建第一个项目"><a href="#创建第一个项目" class="headerlink" title="创建第一个项目"></a>创建第一个项目</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native init firstApp</div></pre></td></tr></table></figure>
<p>创建完成后会有如下信息:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">To run your app on iOS:</div><div class="line">   cd /Users/renpingqing/Documents/work/react/fistApp</div><div class="line">   react-native run-ios</div><div class="line">   - or -</div><div class="line">   Open /Users/renpingqing/Documents/work/react/fistApp/ios/fistApp.xcodeproj in Xcode</div><div class="line">   Hit the Run button</div><div class="line">To run your app on Android:</div><div class="line">   Have an Android emulator running (quickest way to get started), or a device connected</div><div class="line">   cd /Users/renpingqing/Documents/work/react/fistApp</div><div class="line">   react-native run-android</div></pre></td></tr></table></figure>
<p>现在就可以运行试试看。</p>
<p>运行完后，我可以尝试修改一些代码，来看看效果，但是如果每次修改都刷新模拟器(command+r)这很痛苦的，我们可以通过(command+d)，开启live reload，就可以实现每次保存源代码就自动刷新的功能了。</p>
<h2 id="配置subline"><a href="#配置subline" class="headerlink" title="配置subline"></a>配置subline</h2><p>首选安装package control(<a href="https://packagecontrol.io),这是一个专门管理sb的包网站。安装方法" target="_blank" rel="external">https://packagecontrol.io),这是一个专门管理sb的包网站。安装方法</a></p>
<p>点击网页的install now，左边会显示安装代码，只需要将这些复制到sb，按control+~贴入代码，安装完成后可以通过command+shift+p呼出package control的窗口。</p>
<p>输入install，然后输入要安装的包，回车就可以安装了。这里安装babel,sublimelinter-jsxhint(安装了就不会提示)。</p>
<p>安装完成后就可以通过sb的view-syntax-open all*-babel-javaScript(babel)，就能将当前语法识别为jsx。</p>
<p>还可以安装gitgutter，sublimelinter,sublimelinter-contrib-eslint。</p>
<h2 id="安装全局exhint检查"><a href="#安装全局exhint检查" class="headerlink" title="安装全局exhint检查"></a>安装全局exhint检查</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g eslint babel-eslint --registry=http:<span class="comment">//registry.npm.taobao.org</span></div></pre></td></tr></table></figure>
<h1 id="react-native项目结构"><a href="#react-native项目结构" class="headerlink" title="react-native项目结构"></a>react-native项目结构</h1><p>可以看做是一个node js项目因为根目录有一个package.json文件，对应一个node_modules的文件夹是该项目的依赖。他下面有个react-native下面又有local-cli和packager(终端打开启动的package就是他)，同时还有一个node_modules，他就是react-native框架所依赖的库。</p>
<p>在最外层可以看到有ios和android目录分别对应相应平台的代码。</p>
<p>.flowconfig：js语法检查规则</p>
<p>.gitignore:版本控制忽略文件</p>
<p>.watchmanconfig：watchman配置文件</p>
<p>index.ios.js结构：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div></pre></td></tr></table></figure>
<p>导入要用到的模块语法，结构赋值es6语法。表示从react-native导出了Text，View等。有点像python的导入。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">fistApp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.welcome&#125;</span>&gt;</span></div><div class="line">          Welcome to React a!</div><div class="line">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.instructions&#125;</span>&gt;</span></div><div class="line">          To get started, edit index.ios.js</div><div class="line">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.instructions&#125;</span>&gt;</span></div><div class="line">          Press Cmd+R to reload,&#123;'\n'&#125;</div><div class="line">          Cmd+D or shake for dev menu</div><div class="line">        <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>继承Component实现一个类，并实现render方法，返回一些jsx语法的内容。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">container</span>: &#123;</div><div class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'#F5FCFF'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">welcome</span>: &#123;</div><div class="line">    <span class="attr">fontSize</span>: <span class="number">20</span>,</div><div class="line">    <span class="attr">textAlign</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">margin</span>: <span class="number">10</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">instructions</span>: &#123;</div><div class="line">    <span class="attr">textAlign</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">color</span>: <span class="string">'#333333'</span>,</div><div class="line">    <span class="attr">marginBottom</span>: <span class="number">5</span>,</div><div class="line">  &#125;,</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>样式代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AppRegistry.registerComponent(<span class="string">'fistApp'</span>, () =&gt; fistApp);</div></pre></td></tr></table></figure>
<p>注册RN的入口代码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;搭建React-Native开发环境&quot;&gt;&lt;a href=&quot;#搭建React-Native开发环境&quot; class=&quot;headerlink&quot; title=&quot;搭建React Native开发环境&quot;&gt;&lt;/a&gt;搭建React Native开发环境&lt;/h1&gt;&lt;h2 id=&quot;安
    
    </summary>
    
      <category term="React Native" scheme="http://i.woblog.cn/categories/React-Native/"/>
    
    
      <category term="React Native" scheme="http://i.woblog.cn/tags/React-Native/"/>
    
      <category term="React" scheme="http://i.woblog.cn/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>Java集合框架总结</title>
    <link href="http://i.woblog.cn/2016/10/31/java-collections/"/>
    <id>http://i.woblog.cn/2016/10/31/java-collections/</id>
    <published>2016-10-31T14:17:01.000Z</published>
    <updated>2016-11-21T15:12:36.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="框架接口图"><a href="#框架接口图" class="headerlink" title="框架接口图"></a>框架接口图</h1><p><img src="http://7qnc6h.com1.z0.glb.clouddn.com/java-collection-interface" alt=""></p>
<p>Java的集合框架分为两类Collection和Map</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Collection是集合，也就是存储对象的value</div><div class="line"></div><div class="line">Map是用来存储键值对的容器</div><div class="line"></div><div class="line">List：有序集合，可以储存<span class="keyword">null</span>值，值可以重复</div><div class="line"></div><div class="line">Set:无序集合，可以存储<span class="keyword">null</span>值，值不能重复</div><div class="line">SortedSet:可以排序的set，不能存储<span class="keyword">null</span>值，值不能重复。并提供了可以获取子Set的方法</div><div class="line">NavigableSet:提供方便搜索的一些方法，比如：返回小于某个元素的元素</div><div class="line"></div><div class="line">Queue：队列，可以存储<span class="keyword">null</span>值，值可以重复。先进先出，对头删除元素，队尾添加元素</div><div class="line">Deque:双端队列，也就是队头，对尾都可以删除元素</div></pre></td></tr></table></figure>
<p>测试List</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">strings.add(<span class="string">"a"</span>);</div><div class="line">strings.add(<span class="string">"b"</span>);</div><div class="line">strings.add(<span class="keyword">null</span>);</div><div class="line">strings.add(<span class="keyword">null</span>);</div><div class="line">strings.add(<span class="string">"aa"</span>);</div><div class="line"></div><div class="line">strings.forEach(e-&gt; System.out.println(e));</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a</div><div class="line">b</div><div class="line">null</div><div class="line">null</div><div class="line">aa</div></pre></td></tr></table></figure>
<p>发现List确实是有序集合，且可以存储null值，并且值可以重复</p>
<p>测试Set</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">HashSet&lt;String&gt; strings = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">strings.add(<span class="string">"a"</span>);</div><div class="line">strings.add(<span class="string">"b"</span>);</div><div class="line">strings.add(<span class="keyword">null</span>);</div><div class="line">strings.add(<span class="keyword">null</span>);</div><div class="line">strings.add(<span class="string">"aa"</span>);</div><div class="line"></div><div class="line">strings.forEach(e-&gt; System.out.println(e));</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">null</span></div><div class="line">aa</div><div class="line">a</div><div class="line">b</div></pre></td></tr></table></figure>
<p>发现Set无序的，能储存null元素，值不能重复</p>
<p>测试Queue:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">HashSet&lt;String&gt; strings = <span class="keyword">new</span> HashSet&lt;&gt;();</div><div class="line">strings.add(<span class="string">"a"</span>);</div><div class="line">strings.add(<span class="string">"b"</span>);</div><div class="line">strings.add(<span class="keyword">null</span>);</div><div class="line">strings.add(<span class="keyword">null</span>);</div><div class="line">strings.add(<span class="string">"aa"</span>);</div><div class="line"></div><div class="line">strings.forEach(e-&gt; System.out.println(e));</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a</div><div class="line">b</div><div class="line">null</div><div class="line">null</div><div class="line">aa</div></pre></td></tr></table></figure>
<p>可以发现输出和输入顺序都一样，并且能存储null。</p>
<p>测试双端队列：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">LinkedList&lt;String&gt; strings = <span class="keyword">new</span> LinkedList&lt;&gt;();</div><div class="line">strings.add(<span class="string">"a"</span>);</div><div class="line">strings.add(<span class="string">"b"</span>);</div><div class="line">strings.add(<span class="keyword">null</span>);</div><div class="line">strings.add(<span class="keyword">null</span>);</div><div class="line">strings.add(<span class="string">"aa"</span>);</div><div class="line"></div><div class="line">strings.addFirst(<span class="string">"first"</span>);</div><div class="line">strings.addLast(<span class="string">"last"</span>);</div><div class="line"></div><div class="line">strings.forEach(e -&gt; System.out.println(e));</div><div class="line"></div><div class="line">System.out.println(<span class="string">"------------"</span>);</div><div class="line"></div><div class="line">System.out.println(strings.pollFirst());</div><div class="line">System.out.println(strings.pollLast());</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">first</div><div class="line">a</div><div class="line">b</div><div class="line">null</div><div class="line">null</div><div class="line">aa</div><div class="line">last</div><div class="line">------------</div><div class="line">first</div><div class="line">last</div></pre></td></tr></table></figure>
<p>可以发现我们不仅可以在首尾添加元素，也能在首尾删除元素。</p>
<p>测试SortedSet:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">TreeSet&lt;String&gt; strings = <span class="keyword">new</span> TreeSet&lt;&gt;();</div><div class="line">strings.add(<span class="string">"a"</span>);</div><div class="line">strings.add(<span class="string">"b"</span>);</div><div class="line">strings.add(<span class="string">"aa"</span>);</div><div class="line">strings.add(<span class="string">"aa"</span>);</div><div class="line"></div><div class="line">strings.forEach(e-&gt; System.out.println(e));</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a</div><div class="line">aa</div><div class="line">b</div></pre></td></tr></table></figure>
<p>说明是有序的，并且不能存储null，元素也不能重复。在比较元素的时候还可以传入自定义比较器：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">TreeSet&lt;String&gt; strings = <span class="keyword">new</span> TreeSet&lt;&gt;((o1, o2) -&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (o1.length() &lt; o2.length())</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (o1.length() &gt; o2.length())</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">strings.add(<span class="string">"a"</span>);</div><div class="line">strings.add(<span class="string">"b"</span>);</div><div class="line">strings.add(<span class="string">"aa"</span>);</div><div class="line">strings.add(<span class="string">"ab"</span>);</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a</div><div class="line">aa</div></pre></td></tr></table></figure>
<p>我们发现相同的元素不能存储进去。</p>
<p>测试SortedSet获取子集：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">TreeSet&lt;String&gt; strings = <span class="keyword">new</span> TreeSet&lt;&gt;();</div><div class="line">strings.add(<span class="string">"a"</span>);</div><div class="line">strings.add(<span class="string">"b"</span>);</div><div class="line">strings.add(<span class="string">"aa"</span>);</div><div class="line">strings.add(<span class="string">"ab"</span>);</div><div class="line"></div><div class="line">SortedSet&lt;String&gt; strings1 = strings.subSet(<span class="string">"a"</span>, <span class="string">"ab"</span>);</div><div class="line">strings1.forEach(e -&gt; System.out.println(e));</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a</div><div class="line">aa</div></pre></td></tr></table></figure>
<p>subSet方法就定义到了SortedSet中，作用是返回元素a到元素ab中间的元素，不包括ab元素的不可修改set。</p>
<p>测试NavigableSet:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">TreeSet&lt;String&gt; strings = <span class="keyword">new</span> TreeSet&lt;&gt;();</div><div class="line">strings.add(<span class="string">"a"</span>);</div><div class="line">strings.add(<span class="string">"b"</span>);</div><div class="line">strings.add(<span class="string">"aa"</span>);</div><div class="line">strings.add(<span class="string">"ab"</span>);</div><div class="line"></div><div class="line">strings.forEach(e-&gt; System.out.println(e));</div><div class="line">System.out.println(<span class="string">"------------"</span>);</div><div class="line">System.out.println(strings.lower(<span class="string">"ab"</span>));</div><div class="line">System.out.println(strings.higher(<span class="string">"ab"</span>));</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a</div><div class="line">aa</div><div class="line">ab</div><div class="line">b</div><div class="line">------------</div><div class="line">aa</div><div class="line">b</div></pre></td></tr></table></figure>
<p>可以使用快速的搜索方法，比如使用lower找小于ab的元素，使用higher找大于ab的元素。</p>
<h1 id="集合框架完整图"><a href="#集合框架完整图" class="headerlink" title="集合框架完整图"></a>集合框架完整图</h1><p><img src="http://7qnc6h.com1.z0.glb.clouddn.com/CollectionInterface-impl.png" alt=""></p>
<p>上面基本上列出了Java的所有集合框架了，但不包括并发包中的集合。下面我们一一讲解他们。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">AbstractCollection：是一个抽象类，实现了一些Collection接口的比较通用的方法，比如：contains，toArray，containsAll等方法，这样做的目的是，要再实现其他的集合，只需要继承AbstractCollection就行了，而不是用实现Collection接口，如果你觉得它的默认实现不好，可以在子类重写相应的方法。</div><div class="line">  </div><div class="line">ArrayDeque：是一个用循环数组实现的双端队列。实现了Deque接口。</div><div class="line">PriorityQueu：允许高效删除最大优先级的元素的队列</div><div class="line">  </div><div class="line">AbstractList：是一个抽象类，实现了AbstractCollection，并填加了一些特有的List方法，比如：indexOf等方法。</div><div class="line">ArrayList:一个使用数组实现的可增长有序列表。高效的索引</div><div class="line">LinkedList:一个使用链表实现的可增长有序列表。高效的删除和添加</div><div class="line"></div><div class="line">HashSet:使用Hash表实现的没有重复元素的无序集合</div><div class="line">TreeSet:使用二叉树结构实现的有序集合</div><div class="line">EnumSet:包含枚举类型的集合</div><div class="line">LinkedHashSet:使用Hash表实现的有序集合</div><div class="line">  </div><div class="line">HashMap:使用Hash表实现存储key/value结构的映射表，键是键的hashCode，通常情况下能直接定位到他的值(get),特殊特殊情况下也只需要遍历当前Key所对应的桶，所以有很高的随机访问速度，但是顺序是不确定的，最多允许一条记录键为<span class="keyword">null</span>，但可以运行多条值为<span class="keyword">null</span>的记录。他不是线程安全的，如果需要则用ConcurrentHashMap或者使用Collections中的synchronizedMap方法是HashMap也能线程安全。</div><div class="line">Hashtable:他是jdk以前提供的类，功能和HashMap类似，但是他是线程安全的，当然并发性能并没有ConcurrentHashMap好，所以新代码并不建议使用它。</div><div class="line">TreeMap：使用二叉树数据结构实现存储key/value结构的有序映射表。能按照用户自定义的比较器排序。</div><div class="line">EnumMap:高效存储枚举值的映射表</div><div class="line">LinkedHashMap:使用Hash表实现存储key/value结构的能记住插入顺序的映射表</div><div class="line">WeakHashMap:一种当值没有用的时候可以被拉机器回收的映射表</div><div class="line">IdentiryHashMap:使用==而不是equals比较键值的映射表</div></pre></td></tr></table></figure>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>有些集合有listIterator方法，返回一个ListIterator对象。可以实现前后遍历元素。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">strings.add(<span class="string">"a123234324"</span>);</div><div class="line">strings.add(<span class="string">"b34"</span>);</div><div class="line">strings.add(<span class="string">"c"</span>);</div><div class="line">strings.add(<span class="string">"d4"</span>);</div><div class="line">strings.add(<span class="string">"e"</span>);</div><div class="line"></div><div class="line">ListIterator&lt;String&gt; stringListIterator = strings.listIterator();</div><div class="line"><span class="keyword">while</span> (stringListIterator.hasNext()) &#123;</div><div class="line">    System.out.println(stringListIterator.next());</div><div class="line">&#125;</div><div class="line"></div><div class="line">System.out.println(<span class="string">"------"</span>);</div><div class="line"></div><div class="line"><span class="keyword">while</span> (stringListIterator.hasPrevious()) &#123;</div><div class="line">    System.out.println(stringListIterator.previous());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">a123234324</div><div class="line">b34</div><div class="line">c</div><div class="line">d4</div><div class="line">e</div><div class="line">------</div><div class="line">e</div><div class="line">d4</div><div class="line">c</div><div class="line">b34</div><div class="line">a123234324</div></pre></td></tr></table></figure>
<h2 id="散列集"><a href="#散列集" class="headerlink" title="散列集"></a>散列集</h2><p>我们都知道数组和链表都可以安装我们想要的排序次序存放元素，但是如果想获取某个元素却又忘记了位置，区需要偏离每个元素，知道找到为止，如果集合元素太多了，那将有很多的性能问题。如果不在意元素的顺序，可以有很多种数据结构来实现这个需求。其中一种最常见的是散列表(hash table)。他为每个对象计算一个整数，称为散列码(hash code)，比如我们测试不同字符串的hash code:</p>
<table>
<thead>
<tr>
<th>字符串</th>
<th>散列码</th>
</tr>
</thead>
<tbody>
<tr>
<td>Lee</td>
<td>76268</td>
</tr>
<tr>
<td>lee</td>
<td>107020</td>
</tr>
<tr>
<td>eel</td>
<td>100300</td>
</tr>
</tbody>
</table>
<p>所以说如果自定义类，就要实现HashCode方法，同时HashCode方法应与equals方法相兼容。</p>
<p>在Java中，散列表用链表数组实现，每个列表称为桶(bucket)。</p>
<p>如果要添加元素，他的基本步骤为则先要计算他的散列码，然后与桶的总数取余就可以得到保存这个元素的得桶索引。例如：如果某个对象的散列码是76268，并且有128个捅，所以对象应该保存于108号桶中，计算方式是76268%128=108，这样就可以快速定位到这个元素的位置，当然如果你幸运，那么该位置没有其他元素，此时就可以插入该元素。如果这个地方已经有一个元素了，这种情况下称为散列码冲突(hash collision)。这时就需要将要插入的元素与同种所有的元素就行了比较，看这个对象是否存在，则替换value。</p>
<p>从上面看到如果散列码分布合理，且桶数很大，发生散列码冲突的几率就越小，才能提高更好的性能。</p>
<blockquote>
<p>注意：在JavaSE8中，当桶的元素个数达到8时会变为平衡二叉树。来提高效率。</p>
</blockquote>
<p>其中有个很重要的指标就是桶数，通常设置为预计元素个数的75%~150%，且为一个素数。标准类库使用2的幂次方，默认值为16，下次会变为2^5。可以看到到JavaSE8的HashMap中初始化为16：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></div></pre></td></tr></table></figure>
<p>如果元素装满了，就需要在散列(rehashed)，其实就是创建一个桶数更多的表，然后将原来的元素拷贝到新列表，并丢弃原来的列表。装填因子觉得什么时候在散列，默认是0.75也就是表中存储了超过75%的元素，这个表就会用双倍的桶数进行再散列。</p>
<p>我们可以通过构造函数传递初始容量和装填因子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> HashSet&lt;String&gt;(<span class="number">10</span>, <span class="number">0.8F</span>);</div></pre></td></tr></table></figure>
<h2 id="树集"><a href="#树集" class="headerlink" title="树集"></a>树集</h2><p>Treeset和HashSet十分类似，不过他改进了，是一个有序集合，任意顺序插入的元素遍历时都会自动按照排序好的顺序迭代。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">TreeSet&lt;String&gt; strings = <span class="keyword">new</span> TreeSet&lt;&gt;();</div><div class="line">strings.add(<span class="string">"c"</span>);</div><div class="line">strings.add(<span class="string">"d4"</span>);</div><div class="line">strings.add(<span class="string">"a123234324"</span>);</div><div class="line">strings.add(<span class="string">"b34"</span>);</div><div class="line">strings.add(<span class="string">"e"</span>);</div><div class="line"></div><div class="line">strings.forEach(e-&gt; System.out.println(e));</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a123234324</div><div class="line">b34</div><div class="line">c</div><div class="line">d4</div><div class="line">e</div></pre></td></tr></table></figure>
<p>排序使用的是树结构，当前实现用的是红黑树(red-black tree)。将一个元素添加到树要比添加到散列表中慢，因为他要排序，但是查找却要快的多，查找元素的时间为平均为log2N，例如：一棵树包含一个1000个元素，添加一个元素大约需要10次比较。</p>
<p>使用树集必须要保证元素可比较，元素都实现Comparable接口，或者在构造树集是指定一个Comparator比较器。</p>
<h2 id="队列和双端队列"><a href="#队列和双端队列" class="headerlink" title="队列和双端队列"></a>队列和双端队列</h2><h3 id="优先级队列"><a href="#优先级队列" class="headerlink" title="优先级队列"></a>优先级队列</h3><p>可以按照任意顺序插入，却总是按照排序的顺序进行检索，也就说无论何时调用remove方法，总会获得当前优先级队列中数字最小的元素，如果使用迭代器方式处理这些元素，并不需要排序，他使用一个优雅且高效的堆(heap)结构(是一个可以自我调整的二叉树，对树执行添加(add)和删除(remore)操作，可以让最小的元素移动到跟，而不必话费时间对元素排序)。</p>
<p>典型的优先队列使用场景是任务调用。每一个任务都有一个优先级，任务以随机添加到队列中，每当启动一个新任务时，都将优先级最高的任务从队列中删除，通常1为最高，所以也说将最小的元素删除。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">PriorityQueue&lt;String&gt; strings = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</div><div class="line">strings.add(<span class="string">"c"</span>);</div><div class="line">strings.add(<span class="string">"d4"</span>);</div><div class="line">strings.add(<span class="string">"a123234324"</span>);</div><div class="line">strings.add(<span class="string">"b34"</span>);</div><div class="line">strings.add(<span class="string">"e"</span>);</div><div class="line"></div><div class="line">strings.forEach(e-&gt; System.out.println(e));</div><div class="line"></div><div class="line">System.out.println(<span class="string">"-------"</span>);</div><div class="line">System.out.println(strings.remove());</div><div class="line">System.out.println(<span class="string">"-------"</span>);</div><div class="line"></div><div class="line">strings.forEach(e-&gt; System.out.println(e));</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">a123234324</div><div class="line">b34</div><div class="line">c</div><div class="line">d4</div><div class="line">e</div><div class="line">-------</div><div class="line">a123234324</div><div class="line">-------</div><div class="line">b34</div><div class="line">d4</div><div class="line">c</div><div class="line">e</div></pre></td></tr></table></figure>
<p>可以看到删除的其实是最小的元素。</p>
<h1 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h1><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">HashMap&lt;String, String&gt; strings = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">strings.put(<span class="string">"3"</span>,<span class="string">"c"</span>);</div><div class="line">strings.put(<span class="string">"4"</span>,<span class="string">"d4"</span>);</div><div class="line">strings.put(<span class="string">"5"</span>,<span class="string">"e"</span>);</div><div class="line">strings.put(<span class="string">"1"</span>,<span class="string">"a123234324"</span>);</div><div class="line">strings.put(<span class="string">"2"</span>,<span class="string">"b34"</span>);</div><div class="line"></div><div class="line"></div><div class="line">strings.forEach((k,v)-&gt; System.out.println(k+<span class="string">":"</span>+v));</div><div class="line"></div><div class="line"></div><div class="line">System.out.println(<span class="string">"--------"</span>);</div><div class="line"></div><div class="line">HashMap&lt;Integer, String&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">hashMap.put(<span class="number">10</span>,<span class="string">"d"</span>);</div><div class="line">hashMap.put(<span class="number">2</span>,<span class="string">"c"</span>);</div><div class="line">hashMap.put(<span class="number">1</span>,<span class="string">"a"</span>);</div><div class="line">hashMap.put(<span class="number">3</span>,<span class="string">"b"</span>);</div><div class="line"></div><div class="line">hashMap.forEach((k,v)-&gt; System.out.println(k+<span class="string">":"</span>+v));</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">1:a123234324</div><div class="line">2:b34</div><div class="line">3:c</div><div class="line">4:d4</div><div class="line">5:e</div><div class="line">--------</div><div class="line">1:a</div><div class="line">2:c</div><div class="line">3:b</div><div class="line">10:d</div></pre></td></tr></table></figure>
<p>可以发现默认按照key排序的。</p>
<h3 id="更新值"><a href="#更新值" class="headerlink" title="更新值"></a>更新值</h3><p>如我们需要使用某个Map统计某个单词出现的次数，可以这样做：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testWordCount</span><span class="params">()</span> </span>&#123;</div><div class="line">    String[] strings = &#123;<span class="string">"a"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"d"</span>, <span class="string">"c"</span>, <span class="string">"c"</span>, <span class="string">"a"</span>, <span class="string">"e"</span>&#125;;</div><div class="line">    HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strings.length; i++) &#123;</div><div class="line">        countWord(map, strings[i]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    map.forEach((k, v) -&gt; System.out.println(k + <span class="string">":"</span> + v));</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">countWord</span><span class="params">(Map&lt;String, Integer&gt; map, String word)</span> </span>&#123;</div><div class="line"><span class="comment">//        map.put(word,hashMap.get(word)+1); //第一次会空指针,可以通过下面的方式避免</span></div><div class="line"></div><div class="line"><span class="comment">//        map.put(word,hashMap.getOrDefault(word,0)+1); //可以这样</span></div><div class="line"></div><div class="line">    <span class="comment">//也可以这样</span></div><div class="line"><span class="comment">//        map.putIfAbsent(word,0); //当键不存在时才添加</span></div><div class="line"><span class="comment">//        map.put(word,hashMap.get(word)+1);</span></div><div class="line"></div><div class="line">    <span class="comment">//当然还有更好的方式</span></div><div class="line">    map.merge(word, <span class="number">1</span>, Integer::sum); <span class="comment">//如果不存在key word时，装入1，存在时将原来的值加1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a:2</div><div class="line">c:3</div><div class="line">d:2</div><div class="line">e:1</div></pre></td></tr></table></figure>
<h2 id="弱散列映射"><a href="#弱散列映射" class="headerlink" title="弱散列映射"></a>弱散列映射</h2><p>设计WeakHashMap是为了解决一个很特别的问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;框架接口图&quot;&gt;&lt;a href=&quot;#框架接口图&quot; class=&quot;headerlink&quot; title=&quot;框架接口图&quot;&gt;&lt;/a&gt;框架接口图&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7qnc6h.com1.z0.glb.clouddn.com/java-colle
    
    </summary>
    
      <category term="Java" scheme="http://i.woblog.cn/categories/Java/"/>
    
    
      <category term="Collections" scheme="http://i.woblog.cn/tags/Collections/"/>
    
  </entry>
  
  <entry>
    <title>全方位动态调试Apk</title>
    <link href="http://i.woblog.cn/2016/08/19/debug-apk/"/>
    <id>http://i.woblog.cn/2016/08/19/debug-apk/</id>
    <published>2016-08-19T11:20:54.000Z</published>
    <updated>2016-11-21T15:12:36.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="软件调试分类"><a href="#软件调试分类" class="headerlink" title="软件调试分类"></a>软件调试分类</h1><h2 id="源码调试"><a href="#源码调试" class="headerlink" title="源码调试"></a>源码调试</h2><p>多用于软件开发阶段，我们可以拿到软件源码，可以通过集成开发环境(Eclipse,Android Studio)来跟踪软件的变量等</p>
<h2 id="汇编级调试"><a href="#汇编级调试" class="headerlink" title="汇编级调试"></a>汇编级调试</h2><p>他通常用在逆向工程，分析人员通常拿不到源码，所以只能跟踪栈，分析目标文件的汇编代码和查看寄存器的值，这种方式调试显然没有源码调试那个直观，但是动态调试通用能够跟踪软件的执行流程。通常用在静态分析很难取得突破时，就只能上动态调试了</p>
<h1 id="Android对动态调试的支持"><a href="#Android对动态调试的支持" class="headerlink" title="Android对动态调试的支持"></a>Android对动态调试的支持</h1><p>我们都知道android调试分为java代码的调试和ndk编译的代码调试，java程序使用dalvik虚拟机提供的调试特性来调试，他在最初的版本就加入了对调试的支持并实现了JDWP(java debug wire protocol,java调试有线协议)，所以说我们可以直接使用支持JDWP协议的调试器来调试android程序，如：jdb,eclipse,intellJ,jswat等，但是他并不支持JVMTI(java virtual machine tool interface,java虚拟机接口工具)</p>
<p>dalvik虚拟机为JDWP实现加入了DDM(dalvik debug monitor,davlik调试监视器)特性。他的实现为DDMS(dalvik debug monitor server,dalvik调试监控服务)，他集成到了eclipse和android studio(当然也可以单独运行)</p>
<p>dalvik虚拟机中所有调试的实现在dalvik/vm/jdwp/目录下</p>
<p>dalvik与JDWP之间的通讯桥梁位于dalvik/vm/Debugger.c</p>
<p>这样将代码分开的好处是，多个项目可以复用JDWP的代码</p>
<p>每一个开启了调试的Dalvik虚拟机都会启动一个JDWP线程，一直处于等待状态，直到DDMS或其他调试器来连接它，他只负责接收发来的调试连接，调试的处理则有其他相应的线程发出(比如：虚拟机遇到断点要通知调试器时)</p>
<h1 id="开启Dalvik调试功能"><a href="#开启Dalvik调试功能" class="headerlink" title="开启Dalvik调试功能"></a>开启Dalvik调试功能</h1><p>当启动一个虚拟机时如果系统属性ro.debuggable=1(可通adb shell getprop ro.debuggable命令查看)时所有的程序都会开启调试支持，如果为0则在判断清单文件debuggable=”true”只开启当前程序的调试支持</p>
<p>原生程序则使用传统的Linux程序调试方法来调试，如：GUN调试调试服务器(gdb)。其中原生程序又分动态链接库和可执行程序。动态链接库需要先启动android程序以加载他，然后在以附件的方式来调试，可执行程序则可以直接使用远程方式调试</p>
<h1 id="DDMS"><a href="#DDMS" class="headerlink" title="DDMS"></a>DDMS</h1><h2 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h2><p>默认的窗口只显示了logcat和一些常用的工具，如：录屏，而ddms则需要手动打开，打开有两种方式，一种是通过菜单栏-tools-android-android devices-monitor</p>
<p><img src="http://7qnc6h.com1.z0.glb.clouddn.com/ddms-as1.png" alt=""></p>
<p>另一种是通过快捷工具栏的android图标启动</p>
<p><img src="http://7qnc6h.com1.z0.glb.clouddn.com/ddms-as2.png" alt=""></p>
<p>打开后的界面和eclipse里面的差不多，具体的就不细说了</p>
<h1 id="怎么定位关键代码"><a href="#怎么定位关键代码" class="headerlink" title="怎么定位关键代码"></a>怎么定位关键代码</h1><p>不论是破解还是逆向研究一个应用，最难的就是定位到关键点代码，下面我们就说说有哪些方法可以定位</p>
<h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><p>当阅读反编译过来的文件时不太确定那个地方是关键点，我们就可以使用log方法在你怀疑是关键点的地方，注入log，然后在打包运行，就可以确定哪里是关键点，但是这个方法有个弊端是每次的改完文件还得编译签名安装，这步骤是很麻烦的</p>
<p>MyLog.smali</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div></pre></td><td class="code"><pre><div class="line">.class public Lex/ample/MyLog;</div><div class="line">.super Ljava/lang/Object;</div><div class="line">.source &quot;MyLog.java&quot;</div><div class="line"></div><div class="line"></div><div class="line"># static fields</div><div class="line">.field private static DEBUG:Z = false</div><div class="line"></div><div class="line">.field private static final DEFAULT_TAG:Ljava/lang/String; = &quot;DEFAULT_TAG&quot;</div><div class="line"></div><div class="line">.field private static final LOG_STRING:Ljava/lang/String; = &quot;%s:%s:%d:%s&quot;</div><div class="line"></div><div class="line"></div><div class="line"># direct methods</div><div class="line">.method static constructor &lt;clinit&gt;()V</div><div class="line">    .locals 1</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 10</div><div class="line">    const/4 v0, 0x1</div><div class="line"></div><div class="line">    sput-boolean v0, Lex/ample/MyLog;-&gt;DEBUG:Z</div><div class="line"></div><div class="line">    return-void</div><div class="line">.end method</div><div class="line"></div><div class="line">.method public constructor &lt;init&gt;()V</div><div class="line">    .locals 0</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 5</div><div class="line">    invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</div><div class="line"></div><div class="line">    return-void</div><div class="line">.end method</div><div class="line"></div><div class="line">.method public static e(Ljava/lang/Object;)V</div><div class="line">    .locals 2</div><div class="line">    .param p0, &quot;msg&quot;    # Ljava/lang/Object;</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 13</div><div class="line">    sget-boolean v0, Lex/ample/MyLog;-&gt;DEBUG:Z</div><div class="line"></div><div class="line">    if-eqz v0, :cond_0</div><div class="line"></div><div class="line">    .line 14</div><div class="line">    const-string v0, &quot;DEFAULT_TAG&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;v0&#125;, Lex/ample/MyLog;-&gt;getCallStackString(Ljava/lang/String;)Ljava/lang/String;</div><div class="line"></div><div class="line">    move-result-object v0</div><div class="line"></div><div class="line">    invoke-static &#123;p0&#125;, Lex/ample/MyLog;-&gt;formatMessage(Ljava/lang/Object;)Ljava/lang/String;</div><div class="line"></div><div class="line">    move-result-object v1</div><div class="line"></div><div class="line">    invoke-static &#123;v0, v1&#125;, Landroid/util/Log;-&gt;e(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    .line 16</div><div class="line">    :cond_0</div><div class="line">    return-void</div><div class="line">.end method</div><div class="line"></div><div class="line">.method public static e(Ljava/lang/String;Ljava/lang/Object;)V</div><div class="line">    .locals 2</div><div class="line">    .param p0, &quot;tag&quot;    # Ljava/lang/String;</div><div class="line">    .param p1, &quot;msg&quot;    # Ljava/lang/Object;</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 19</div><div class="line">    sget-boolean v0, Lex/ample/MyLog;-&gt;DEBUG:Z</div><div class="line"></div><div class="line">    if-eqz v0, :cond_0</div><div class="line"></div><div class="line">    .line 20</div><div class="line">    invoke-static &#123;p0&#125;, Lex/ample/MyLog;-&gt;getCallStackString(Ljava/lang/String;)Ljava/lang/String;</div><div class="line"></div><div class="line">    move-result-object v0</div><div class="line"></div><div class="line">    invoke-static &#123;p1&#125;, Lex/ample/MyLog;-&gt;formatMessage(Ljava/lang/Object;)Ljava/lang/String;</div><div class="line"></div><div class="line">    move-result-object v1</div><div class="line"></div><div class="line">    invoke-static &#123;v0, v1&#125;, Landroid/util/Log;-&gt;e(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    .line 22</div><div class="line">    :cond_0</div><div class="line">    return-void</div><div class="line">.end method</div><div class="line"></div><div class="line">.method private static formatMessage(Ljava/lang/Object;)Ljava/lang/String;</div><div class="line">    .locals 1</div><div class="line">    .param p0, &quot;msg&quot;    # Ljava/lang/Object;</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 30</div><div class="line">    if-nez p0, :cond_0</div><div class="line"></div><div class="line">    .line 31</div><div class="line">    const-string v0, &quot;&quot;</div><div class="line"></div><div class="line">    .line 33</div><div class="line">    :goto_0</div><div class="line">    return-object v0</div><div class="line"></div><div class="line">    :cond_0</div><div class="line">    invoke-static &#123;p0&#125;, Ljava/lang/String;-&gt;valueOf(Ljava/lang/Object;)Ljava/lang/String;</div><div class="line"></div><div class="line">    move-result-object v0</div><div class="line"></div><div class="line">    goto :goto_0</div><div class="line">.end method</div><div class="line"></div><div class="line">.method private static getCallStackString(Ljava/lang/String;)Ljava/lang/String;</div><div class="line">    .locals 5</div><div class="line">    .param p0, &quot;defaultTag&quot;    # Ljava/lang/String;</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    const/4 v2, 0x4</div><div class="line"></div><div class="line">    .line 25</div><div class="line">    invoke-static &#123;&#125;, Ljava/lang/Thread;-&gt;currentThread()Ljava/lang/Thread;</div><div class="line"></div><div class="line">    move-result-object v1</div><div class="line"></div><div class="line">    invoke-virtual &#123;v1&#125;, Ljava/lang/Thread;-&gt;getStackTrace()[Ljava/lang/StackTraceElement;</div><div class="line"></div><div class="line">    move-result-object v1</div><div class="line"></div><div class="line">    aget-object v0, v1, v2</div><div class="line"></div><div class="line">    .line 26</div><div class="line">    .local v0, &quot;stackTraceElement&quot;:Ljava/lang/StackTraceElement;</div><div class="line">    const-string v1, &quot;%s:%s:%d:%s&quot;</div><div class="line"></div><div class="line">    new-array v2, v2, [Ljava/lang/Object;</div><div class="line"></div><div class="line">    const/4 v3, 0x0</div><div class="line"></div><div class="line">    invoke-virtual &#123;v0&#125;, Ljava/lang/StackTraceElement;-&gt;getClassName()Ljava/lang/String;</div><div class="line"></div><div class="line">    move-result-object v4</div><div class="line"></div><div class="line">    aput-object v4, v2, v3</div><div class="line"></div><div class="line">    const/4 v3, 0x1</div><div class="line"></div><div class="line">    invoke-virtual &#123;v0&#125;, Ljava/lang/StackTraceElement;-&gt;getMethodName()Ljava/lang/String;</div><div class="line"></div><div class="line">    move-result-object v4</div><div class="line"></div><div class="line">    aput-object v4, v2, v3</div><div class="line"></div><div class="line">    const/4 v3, 0x2</div><div class="line"></div><div class="line">    invoke-virtual &#123;v0&#125;, Ljava/lang/StackTraceElement;-&gt;getLineNumber()I</div><div class="line"></div><div class="line">    move-result v4</div><div class="line"></div><div class="line">    invoke-static &#123;v4&#125;, Ljava/lang/Integer;-&gt;valueOf(I)Ljava/lang/Integer;</div><div class="line"></div><div class="line">    move-result-object v4</div><div class="line"></div><div class="line">    aput-object v4, v2, v3</div><div class="line"></div><div class="line">    const/4 v3, 0x3</div><div class="line"></div><div class="line">    aput-object p0, v2, v3</div><div class="line"></div><div class="line">    invoke-static &#123;v1, v2&#125;, Ljava/lang/String;-&gt;format(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;</div><div class="line"></div><div class="line">    move-result-object v1</div><div class="line"></div><div class="line">    return-object v1</div><div class="line">.end method</div></pre></td></tr></table></figure>
<p>使用方法也很简单，就是一个方法调用，可以传递一个tag或用默认的tag</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const-string v0, &quot;message&quot;</div><div class="line"></div><div class="line">invoke-static &#123;v0&#125;, Lex/ample/MyLog;-&gt;e(Ljava/lang/Object;)V</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">const-string v0, &quot;message&quot;</div><div class="line"></div><div class="line">const-string v1, &quot;TAG&quot;</div><div class="line"></div><div class="line">invoke-static &#123;v1,v0&#125;, Lex/ample/MyLog;-&gt;e(Ljava/lang/String;,Ljava/lang/Object;)V</div></pre></td></tr></table></figure>
<h2 id="method-profiling"><a href="#method-profiling" class="headerlink" title="method profiling"></a>method profiling</h2><p>我们都知道Ollydbg调试器有个trace功能，他能记录每个被调用的api名称，同时还能在关键性的api地方下断点。但是method profiling不能这样来设置断点，但可以记录方法的调用过程</p>
<p>使用方法是在ddms-devices标签列表先选中一个程序点击start method profiling按钮，然后操作应用你想关注的逻辑，然后在点击这个按钮就会弹出如下界面</p>
<p><img src="http://7qnc6h.com1.z0.glb.clouddn.com/method-profiling1.png" alt=""> </p>
<p>可以看到name处就是方法调用列表，每个方法可以展开。如果我们要已启动界面就开跟踪方法，那我们就可以通过代码方式来加入，在要开始跟踪方法的位置添加开始跟踪方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Debug.startMethodTracing(&quot;a&quot;);</div></pre></td></tr></table></figure>
<p>在合适的地方关闭跟踪</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Debug.stopMethodTracing();</div></pre></td></tr></table></figure>
<p>这样就会在/sdcard/下生产a.trace文件，导出到电脑，用traceview a.trace命令分析这个文件，这个工具在sdk\tools\目录下</p>
<h1 id="AndBug"><a href="#AndBug" class="headerlink" title="AndBug"></a>AndBug</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;软件调试分类&quot;&gt;&lt;a href=&quot;#软件调试分类&quot; class=&quot;headerlink&quot; title=&quot;软件调试分类&quot;&gt;&lt;/a&gt;软件调试分类&lt;/h1&gt;&lt;h2 id=&quot;源码调试&quot;&gt;&lt;a href=&quot;#源码调试&quot; class=&quot;headerlink&quot; title=&quot;源
    
    </summary>
    
      <category term="Android" scheme="http://i.woblog.cn/categories/Android/"/>
    
    
      <category term="调试APk" scheme="http://i.woblog.cn/tags/%E8%B0%83%E8%AF%95APk/"/>
    
      <category term="debug" scheme="http://i.woblog.cn/tags/debug/"/>
    
  </entry>
  
  <entry>
    <title>不可不知的反汇编相关知识</title>
    <link href="http://i.woblog.cn/2016/08/16/about-disassembly/"/>
    <id>http://i.woblog.cn/2016/08/16/about-disassembly/</id>
    <published>2016-08-16T22:53:56.000Z</published>
    <updated>2016-11-21T15:12:36.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编程语言相关"><a href="#编程语言相关" class="headerlink" title="编程语言相关"></a>编程语言相关</h1><p>我们都知道编程语言有好几代，那他们都是什么</p>
<h2 id="第一代语言"><a href="#第一代语言" class="headerlink" title="第一代语言"></a>第一代语言</h2><p>最低级的语言，一般有0和1组成，人很难讲指令和数据区分开也称机器语言，字节码，二进制文件</p>
<h2 id="第二代语言"><a href="#第二代语言" class="headerlink" title="第二代语言"></a>第二代语言</h2><p>汇编语言，他脱离了机器语言的0和1，使用短小且容易记忆的助记符对应相应的操作码。汇编器是将汇编转为机器码的工具</p>
<h2 id="第三代语言"><a href="#第三代语言" class="headerlink" title="第三代语言"></a>第三代语言</h2><p>引入了关键字和结构来描述事物，使得他使用起来更加接近自然语言。他们通常不依赖任何平台，如：C,Java</p>
<h1 id="什么是反汇编"><a href="#什么是反汇编" class="headerlink" title="什么是反汇编"></a>什么是反汇编</h1><p>传统软件开发过程中，一般是编译器-汇编器-链接器最后输出可执行程序。所以反汇编就是输入二进制文件或可执行文件输出汇编代码的过程。反编译器通常是输出高级语言</p>
<h1 id="反汇编所面临的问题"><a href="#反汇编所面临的问题" class="headerlink" title="反汇编所面临的问题"></a>反汇编所面临的问题</h1><h2 id="编译过程中造成的损失"><a href="#编译过程中造成的损失" class="headerlink" title="编译过程中造成的损失"></a>编译过程中造成的损失</h2><p>机器语言没有变量或函数名，变量类型信息只能通过用途来确定，如：看到一个32位的数据被传送到寄存器，需要很好地分析一番才能得出这是一个整数，还是浮点数或指针</p>
<h2 id="编译属于多对多操作"><a href="#编译属于多对多操作" class="headerlink" title="编译属于多对多操作"></a>编译属于多对多操作</h2><p>就是源程序可以通过多重凡是转为汇编语言，而机器语言也可通过多重方式转为源程序</p>
<h2 id="依赖于语言和库"><a href="#依赖于语言和库" class="headerlink" title="依赖于语言和库"></a>依赖于语言和库</h2><p>用专门反编译c代码的编译器来反编译delphi生成的代码，可能会出现非常乖的语法。同样用对windows api一无所知的反编译器反编译windows二进制，也会出现上述结果</p>
<h2 id="近乎源代码的反编译能力"><a href="#近乎源代码的反编译能力" class="headerlink" title="近乎源代码的反编译能力"></a>近乎源代码的反编译能力</h2><p>这是一个很大的挑战，反汇编器在任何反编译阶段都有可能错误或遗漏一些代码而影响反编译结果</p>
<h1 id="为什么要反汇编"><a href="#为什么要反汇编" class="headerlink" title="为什么要反汇编"></a>为什么要反汇编</h1><h2 id="分析恶意软件"><a href="#分析恶意软件" class="headerlink" title="分析恶意软件"></a>分析恶意软件</h2><h2 id="分析闭源软件漏洞"><a href="#分析闭源软件漏洞" class="headerlink" title="分析闭源软件漏洞"></a>分析闭源软件漏洞</h2><h2 id="和闭源软件互操作性"><a href="#和闭源软件互操作性" class="headerlink" title="和闭源软件互操作性"></a>和闭源软件互操作性</h2><h2 id="验证编译器的性能和准确性"><a href="#验证编译器的性能和准确性" class="headerlink" title="验证编译器的性能和准确性"></a>验证编译器的性能和准确性</h2><h1 id="怎么反汇编"><a href="#怎么反汇编" class="headerlink" title="怎么反汇编"></a>怎么反汇编</h1><h1 id="反汇编器工作步骤"><a href="#反汇编器工作步骤" class="headerlink" title="反汇编器工作步骤"></a>反汇编器工作步骤</h1><h3 id="确定反汇编代码区域"><a href="#确定反汇编代码区域" class="headerlink" title="确定反汇编代码区域"></a>确定反汇编代码区域</h3><p>通常指令和数据是混合在一起的，那怎么去区分呢。首先可执行文件肯定的按照一定的格式规则，如：windows的PE(portable executable),Unix的ELF(executable and linking format)，而这些格式通常就会描述怎么确定代码和数据的位置，以及怎么找到程序入口点(一个指令地址，一旦程序加载到内存，操作系统就将控制权交给当前位置的指令)</p>
<h2 id="读取该位置指令"><a href="#读取该位置指令" class="headerlink" title="读取该位置指令"></a>读取该位置指令</h2><p>当读取到该位置的指令后，进行一次查表操作，将二进制的与他的汇编助记符对应起来</p>
<h2 id="获取该指令操作数"><a href="#获取该指令操作数" class="headerlink" title="获取该指令操作数"></a>获取该指令操作数</h2><p>有些指令还有可能需要操作数和目的操作数，如：mov</p>
<h2 id="输出指令"><a href="#输出指令" class="headerlink" title="输出指令"></a>输出指令</h2><p>当助记符和操作数都有之后可以说是这条指令就反编译完成了，然后输出</p>
<h2 id="循环处理"><a href="#循环处理" class="headerlink" title="循环处理"></a>循环处理</h2><p>循环处理这个文件直到文件末尾。又大量的算法可以完成上述操作</p>
<h1 id="反汇编算法分类"><a href="#反汇编算法分类" class="headerlink" title="反汇编算法分类"></a>反汇编算法分类</h1><h2 id="线性扫描反汇编"><a href="#线性扫描反汇编" class="headerlink" title="线性扫描反汇编"></a>线性扫描反汇编</h2><p>从文件的开始一直处理到文件末尾。问题是不太好处理分支或非线性结构的流程。</p>
<p>优点：完全覆盖所以代码段</p>
<p>缺点：有可能代码中混有数据，但当指令处理了</p>
<p>gdb,windbag,objdump都是采用这一算法</p>
<h2 id="递归下降反汇编"><a href="#递归下降反汇编" class="headerlink" title="递归下降反汇编"></a>递归下降反汇编</h2><p>它采用了和线性完全不一样的方法定位代码逻辑。递归强调的是控制流，根据指令是否跳转在决定是否反编译。因此他会根据程序不同控制流来反编译，那有哪些控制流呢</p>
<h3 id="顺序流"><a href="#顺序流" class="headerlink" title="顺序流"></a>顺序流</h3><p>这个就很简单了，就是一条指令接一条，包括算术运行add,传值mov,堆栈push和pop等指令</p>
<h3 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h3><p>分支jnz(x86)，他有两条路径真或假，递归反编译会对两条路径都反编译</p>
<h3 id="无条件分支"><a href="#无条件分支" class="headerlink" title="无条件分支"></a>无条件分支</h3><p>与顺序流差不多，只是下一条指令不一定紧跟当前指令后面。如果跳转指令的目标地址是一个运行值，那么静态反汇编无法确定该值，也就没法反编译了，如：jmp eax(x86)</p>
<h3 id="函数调用指令"><a href="#函数调用指令" class="headerlink" title="函数调用指令"></a>函数调用指令</h3><p>他和无调整指令很相似，同样反编译器也无法识别call eax这样的指令。唯一不同的是函数执行完成后会返回调用指令后面的指令，但是在调用函数时出现错误，就有可能导致反汇编失败，如：在函数中修改了返回地址</p>
<h3 id="返回指令"><a href="#返回指令" class="headerlink" title="返回指令"></a>返回指令</h3><p>有时，递归下降算法访问了所有路径，且函数返回指令没有提供将要执行的指令地址。如果这时程序正在运行则可以从栈顶获取一个地址，而从这个地址开始恢复。但是静态反汇编并没有这个能力，这时递归下降反汇编器会继续反汇编原来搁置的反汇编地址列表</p>
<p>优点：具有很强的代码和数据区分能力</p>
<p>缺点：无法处理间接代码路径，如：通过指令表来查找目标地址的跳转或调用。然而采用一种用于识别指向代码的指针的启发式(heuristics)方法，则能够反汇编所有代码</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;编程语言相关&quot;&gt;&lt;a href=&quot;#编程语言相关&quot; class=&quot;headerlink&quot; title=&quot;编程语言相关&quot;&gt;&lt;/a&gt;编程语言相关&lt;/h1&gt;&lt;p&gt;我们都知道编程语言有好几代，那他们都是什么&lt;/p&gt;
&lt;h2 id=&quot;第一代语言&quot;&gt;&lt;a href=&quot;#第一代
    
    </summary>
    
      <category term="Ida" scheme="http://i.woblog.cn/categories/Ida/"/>
    
    
      <category term="Ida" scheme="http://i.woblog.cn/tags/Ida/"/>
    
  </entry>
  
  <entry>
    <title>加强版Apktool堪称逆向神器</title>
    <link href="http://i.woblog.cn/2016/08/15/extend-apktool/"/>
    <id>http://i.woblog.cn/2016/08/15/extend-apktool/</id>
    <published>2016-08-15T23:13:59.000Z</published>
    <updated>2016-11-21T15:12:36.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>首先基本使用我就不讲了，这里只说我在apktool上扩展的两个小功能，一个是自动签名，一个是自动安装。可以实现什么功能呢，就是你更改了代码后，以前是build-sign-install，然后才能在手机上测试。但是现在就是一句话就可以完成这个三个步骤，可以说是你完全感觉不到这两步的存在，但是在静态分析smali时有很大的帮助</p>
<h1 id="自动签名"><a href="#自动签名" class="headerlink" title="自动签名"></a>自动签名</h1><p>首先自动签名的前提是要一个配置文件和签名文件，把他们放到和apktool同一目录，keystore可以不放同一目录，但在配置文件使用绝对路径，如下图</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">test.keystore</div><div class="line">apktool</div><div class="line">apktool.jar</div><div class="line">sign.conf</div></pre></td></tr></table></figure>
<p>其中test.keystore就是你创建的签名文件，至于怎么创建，可以用eclipse也可以用命令创建，也可以用现有的</p>
<p>sign.conf就是配置文件,内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jarsigner -keystore test.keystore -storepass 123456 -signedjar %s %s a123456</div></pre></td></tr></table></figure>
<p>我们可以看见有两个%s，他们是最终会被替换成成apk的真是路径，大家安装这样写就行了，现在我们就可以试试自动签名了，执行下面的命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apktool b -si app</div></pre></td></tr></table></figure>
<p>其中-si就是自动签名的选项，签名完成后会在dist中生成app-sign.apk，你可以手动安装</p>
<h1 id="自动安装"><a href="#自动安装" class="headerlink" title="自动安装"></a>自动安装</h1><p>当我们自动签名后，我们希望自动安装</p>
<p>可以在加一个-ri选项,如下面这条命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apktool b -si -ri app</div></pre></td></tr></table></figure>
<p>就可以实现自动签名和安装，每次修改完代码执行他就行了，是不是很方便呢。<a href="https://github.com/lifengsofts/Apktool" target="_blank" rel="external">代码仓库在这里</a>其中生成好的apktool.jar在仓库的art文件夹下面，你只需要下载这三个文件就行了</p>
<p>这两个命令可以通过apktool的帮助查看到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">usage: apktool b[uild] [options] &lt;app_path&gt;</div><div class="line"> -f,--force-all          Skip changes detection and build all files.</div><div class="line"> -i,--install            Install this apk.</div><div class="line"> -o,--output &lt;dir&gt;       The name of apk that gets written. Default is dist/name.apk</div><div class="line"> -p,--frame-path &lt;dir&gt;   Uses framework files located in &lt;dir&gt;.</div><div class="line"> -ri,--reinstall         Reinstall this apk.</div><div class="line"> -si,--sign              Sign this apk.</div></pre></td></tr></table></figure>
<p>其中我添加的-si和-ri，也就是上面说的两个命令，-i也是安装，但不是覆盖，所以不常用</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;首先基本使用我就不讲了，这里只说我在apktool上扩展的两个小功能，一个是自动签名，一个是自动安装。可以实现什么功能呢，就是你更改了代码后
    
    </summary>
    
      <category term="Apktool" scheme="http://i.woblog.cn/categories/Apktool/"/>
    
    
      <category term="Apktool" scheme="http://i.woblog.cn/tags/Apktool/"/>
    
  </entry>
  
  <entry>
    <title>常用alias</title>
    <link href="http://i.woblog.cn/2016/08/15/alias/"/>
    <id>http://i.woblog.cn/2016/08/15/alias/</id>
    <published>2016-08-15T19:12:29.000Z</published>
    <updated>2016-11-21T15:12:36.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alias gcp=&apos;git add . &amp;&amp; git commit -m &quot;init&quot; &amp;&amp; git push&apos;</div></pre></td></tr></table></figure>
<h1 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h1><h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><p>添加到~/.zshrc文件末尾</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;模板&quot;&gt;&lt;a href=&quot;#模板&quot; class=&quot;headerlink&quot; title=&quot;模板&quot;&gt;&lt;/a&gt;模板&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
      <category term="Linux" scheme="http://i.woblog.cn/categories/Linux/"/>
    
    
      <category term="alias" scheme="http://i.woblog.cn/tags/alias/"/>
    
  </entry>
  
  <entry>
    <title>Android so文件反编译</title>
    <link href="http://i.woblog.cn/2016/08/14/so-decompile/"/>
    <id>http://i.woblog.cn/2016/08/14/so-decompile/</id>
    <published>2016-08-14T21:57:33.000Z</published>
    <updated>2016-11-21T15:12:36.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="objdump"><a href="#objdump" class="headerlink" title="objdump"></a>objdump</h1><p>其中测试代码为hello.s</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">	.arch armv5te</div><div class="line">	.fpu softvfp</div><div class="line">	.file	&quot;hello.c&quot;</div><div class="line">	.section	.rodata //只读数据段</div><div class="line">	.align	2 //4字节对齐</div><div class="line">.LC0:</div><div class="line">	.ascii	&quot;hello ARM!\000&quot; //字符串，一定要以\0结尾，不然他会一直读取直到\0才结束</div><div class="line">.LC1:</div><div class="line">	.ascii	&quot;hello world!\0&quot;</div><div class="line">.LC2:</div><div class="line">	.ascii	&quot;ha!&quot;</div><div class="line"></div><div class="line">	.text //指令段</div><div class="line">	.align	2</div><div class="line">	.global	main //申明为全局</div><div class="line">	.type	main, %function //类型为函数</div><div class="line">main:</div><div class="line">	@ args = 0, pretend = 0, frame = 8</div><div class="line">	@ frame_needed = 1, uses_anonymous_args = 0</div><div class="line">	stmfd	sp!, &#123;fp, lr&#125; //将fp,lr压栈</div><div class="line">	add	fp, sp, #4 @初始化fp寄存器，设置栈帧</div><div class="line">	sub	sp, sp, #8 @开辟栈控件</div><div class="line">	str	r0, [fp, #-8] @保存第一个参数</div><div class="line">	str	r1, [fp, #-12] @保存第二个参数</div><div class="line">	ldr	r3, .L3 @从l3标号加载一个字地址</div><div class="line">.LPIC0:</div><div class="line">	add r3, pc, r3 @把字符串的相对位置+pc地址就是这个字符串的绝对地址 </div><div class="line">	mov	r0, r3 @设置第一个参数</div><div class="line">	bl	puts(PLT) @调用puts函数</div><div class="line">	ldr	r3, .L3+4</div><div class="line">.LPIC1:</div><div class="line">	add	r3, pc, r3</div><div class="line">	mov	r0, r3</div><div class="line">	bl	puts(PLT)</div><div class="line">	ldr	r3, .L3+8</div><div class="line">.LPIC2:</div><div class="line">	add	r3, pc, r3</div><div class="line">	mov	r0, r3</div><div class="line">	bl	puts(PLT)</div><div class="line">	mov	r3, #0</div><div class="line">	mov	r0, r3</div><div class="line">	sub	sp, fp, #4</div><div class="line">	@ sp needed</div><div class="line">	ldmfd	sp!, &#123;fp, pc&#125;</div><div class="line"></div><div class="line">.L3:</div><div class="line">	.word	.LC0-(.LPIC0+8)</div><div class="line">	.word	.LC1-(.LPIC1+8)</div><div class="line">	.word	.LC2-(.LPIC2+8)</div><div class="line">	.size	main, .-main</div><div class="line">	.ident	&quot;GCC: (GNU) 4.9 20150123 (prerelease)&quot;</div><div class="line">	.section	.note.GNU-stack,&quot;&quot;,%progbits</div></pre></td></tr></table></figure>
<p>他是ndk中提供的一个工具</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arm-linux-androideabi-objdump -S hello</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line">hello:     file format elf32-littlearm</div><div class="line"></div><div class="line"></div><div class="line">Disassembly of section .plt:</div><div class="line"></div><div class="line">00008220 &lt;puts@plt-0x14&gt;:</div><div class="line">    8220:	e52de004 	push	&#123;lr&#125;		; (str lr, [sp, #-4]!)</div><div class="line">    8224:	e59fe004 	ldr	lr, [pc, #4]	; 8230 &lt;puts@plt-0x4&gt;</div><div class="line">    8228:	e08fe00e 	add	lr, pc, lr</div><div class="line">    822c:	e5bef008 	ldr	pc, [lr, #8]!</div><div class="line">    8230:	00001db8 			; &lt;UNDEFINED&gt; instruction: 0x00001db8</div><div class="line"></div><div class="line">00008234 &lt;puts@plt&gt;:</div><div class="line">    8234:	e28fc600 	add	ip, pc, #0, 12</div><div class="line">    8238:	e28cca01 	add	ip, ip, #4096	; 0x1000</div><div class="line">    823c:	e5bcfdb8 	ldr	pc, [ip, #3512]!	; 0xdb8</div><div class="line"></div><div class="line">00008240 &lt;__libc_init@plt&gt;:</div><div class="line">    8240:	e28fc600 	add	ip, pc, #0, 12</div><div class="line">    8244:	e28cca01 	add	ip, ip, #4096	; 0x1000</div><div class="line">    8248:	e5bcfdb0 	ldr	pc, [ip, #3504]!	; 0xdb0</div><div class="line"></div><div class="line">0000824c &lt;__cxa_atexit@plt&gt;:</div><div class="line">    824c:	e28fc600 	add	ip, pc, #0, 12</div><div class="line">    8250:	e28cca01 	add	ip, ip, #4096	; 0x1000</div><div class="line">    8254:	e5bcfda8 	ldr	pc, [ip, #3496]!	; 0xda8</div><div class="line"></div><div class="line">Disassembly of section .text:</div><div class="line"></div><div class="line">00008258 &lt;main&gt;:</div><div class="line">    8258:	e92d4800 	push	&#123;fp, lr&#125;</div><div class="line">    825c:	e28db004 	add	fp, sp, #4</div><div class="line">    8260:	e24dd008 	sub	sp, sp, #8</div><div class="line">    8264:	e50b0008 	str	r0, [fp, #-8]</div><div class="line">    8268:	e50b100c 	str	r1, [fp, #-12]</div><div class="line">    826c:	e59f3038 	ldr	r3, [pc, #56]	; 82ac &lt;main+0x54&gt;</div><div class="line">    8270:	e08f3003 	add	r3, pc, r3</div><div class="line">    8274:	e1a00003 	mov	r0, r3</div><div class="line">    8278:	ebffffed 	bl	8234 &lt;puts@plt&gt;</div><div class="line">    827c:	e59f302c 	ldr	r3, [pc, #44]	; 82b0 &lt;main+0x58&gt;</div><div class="line">    8280:	e08f3003 	add	r3, pc, r3</div><div class="line">    8284:	e1a00003 	mov	r0, r3</div><div class="line">    8288:	ebffffe9 	bl	8234 &lt;puts@plt&gt;</div><div class="line">    828c:	e59f3020 	ldr	r3, [pc, #32]	; 82b4 &lt;main+0x5c&gt;</div><div class="line">    8290:	e08f3003 	add	r3, pc, r3</div><div class="line">    8294:	e1a00003 	mov	r0, r3</div><div class="line">    8298:	ebffffe5 	bl	8234 &lt;puts@plt&gt;</div><div class="line">    829c:	e3a03000 	mov	r3, #0</div><div class="line">    82a0:	e1a00003 	mov	r0, r3</div><div class="line">    82a4:	e24bd004 	sub	sp, fp, #4</div><div class="line">    82a8:	e8bd8800 	pop	&#123;fp, pc&#125;</div><div class="line">    82ac:	000000e8 	.word	0x000000e8</div><div class="line">    82b0:	000000e3 	.word	0x000000e3</div><div class="line">    82b4:	000000e0 	.word	0x000000e0</div><div class="line"></div><div class="line">000082b8 &lt;__atexit_handler_wrapper&gt;:</div><div class="line">    82b8:	e3500000 	cmp	r0, #0</div><div class="line">    82bc:	012fff1e 	bxeq	lr</div><div class="line">    82c0:	e12fff10 	bx	r0</div><div class="line"></div><div class="line">000082c4 &lt;_start&gt;:</div><div class="line">    82c4:	e59fc05c 	ldr	ip, [pc, #92]	; 8328 &lt;_start+0x64&gt;</div><div class="line">    82c8:	e59f205c 	ldr	r2, [pc, #92]	; 832c &lt;_start+0x68&gt;</div><div class="line">    82cc:	e92d4800 	push	&#123;fp, lr&#125;</div><div class="line">    82d0:	e08fc00c 	add	ip, pc, ip</div><div class="line">    82d4:	e28db004 	add	fp, sp, #4</div><div class="line">    82d8:	e59f3050 	ldr	r3, [pc, #80]	; 8330 &lt;_start+0x6c&gt;</div><div class="line">    82dc:	e24dd010 	sub	sp, sp, #16</div><div class="line">    82e0:	e59f104c 	ldr	r1, [pc, #76]	; 8334 &lt;_start+0x70&gt;</div><div class="line">    82e4:	e79c2002 	ldr	r2, [ip, r2]</div><div class="line">    82e8:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec</div><div class="line">    82ec:	e59f2044 	ldr	r2, [pc, #68]	; 8338 &lt;_start+0x74&gt;</div><div class="line">    82f0:	e79c3003 	ldr	r3, [ip, r3]</div><div class="line">    82f4:	e50b3010 	str	r3, [fp, #-16]</div><div class="line">    82f8:	e59f303c 	ldr	r3, [pc, #60]	; 833c &lt;_start+0x78&gt;</div><div class="line">    82fc:	e79c1001 	ldr	r1, [ip, r1]</div><div class="line">    8300:	e50b100c 	str	r1, [fp, #-12]</div><div class="line">    8304:	e79c2002 	ldr	r2, [ip, r2]</div><div class="line">    8308:	e50b2008 	str	r2, [fp, #-8]</div><div class="line">    830c:	e28b0004 	add	r0, fp, #4</div><div class="line">    8310:	e79c2003 	ldr	r2, [ip, r3]</div><div class="line">    8314:	e3a01000 	mov	r1, #0</div><div class="line">    8318:	e24b3014 	sub	r3, fp, #20</div><div class="line">    831c:	ebffffc7 	bl	8240 &lt;__libc_init@plt&gt;</div><div class="line">    8320:	e24bd004 	sub	sp, fp, #4</div><div class="line">    8324:	e8bd8800 	pop	&#123;fp, pc&#125;</div><div class="line">    8328:	00001d10 	.word	0x00001d10</div><div class="line">    832c:	ffffffec 	.word	0xffffffec</div><div class="line">    8330:	fffffff0 	.word	0xfffffff0</div><div class="line">    8334:	fffffff4 	.word	0xfffffff4</div><div class="line">    8338:	fffffff8 	.word	0xfffffff8</div><div class="line">    833c:	fffffffc 	.word	0xfffffffc</div><div class="line"></div><div class="line">00008340 &lt;atexit&gt;:</div><div class="line">    8340:	e1a01000 	mov	r1, r0</div><div class="line">    8344:	e59f200c 	ldr	r2, [pc, #12]	; 8358 &lt;atexit+0x18&gt;</div><div class="line">    8348:	e59f000c 	ldr	r0, [pc, #12]	; 835c &lt;atexit+0x1c&gt;</div><div class="line">    834c:	e08f2002 	add	r2, pc, r2</div><div class="line">    8350:	e08f0000 	add	r0, pc, r0</div><div class="line">    8354:	eaffffbc 	b	824c &lt;__cxa_atexit@plt&gt;</div><div class="line">    8358:	00001cac 	.word	0x00001cac</div><div class="line">    835c:	ffffff60 	.word	0xffffff60</div></pre></td></tr></table></figure>
<p>我们可以从上面看到他用汇编显示了这个文件的内容</p>
<p>plt:主要用于函数重定位</p>
<p>text:程序代码段</p>
<h1 id="ida-pro"><a href="#ida-pro" class="headerlink" title="ida pro"></a>ida pro</h1><p>可以说是最强大的反汇编器，具体使用方法时将so拖入ida可以看见下面代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">.text:00008258                 STMFD   SP!, &#123;R11,LR&#125;</div><div class="line">.text:0000825C                 ADD     R11, SP, #4</div><div class="line">.text:00008260                 SUB     SP, SP, #8</div><div class="line">.text:00008264                 STR     R0, [R11,#var_8]</div><div class="line">.text:00008268                 STR     R1, [R11,#var_C]</div><div class="line">.text:0000826C                 LDR     R3, =(aHelloArm - 0x8278)</div><div class="line">.text:00008270                 ADD     R3, PC, R3      ; &quot;hello ARM!&quot;</div><div class="line">.text:00008274                 MOV     R0, R3          ; s</div><div class="line">.text:00008278                 BL      puts</div><div class="line">.text:0000827C                 LDR     R3, =(aHelloWorld - 0x8288)</div><div class="line">.text:00008280                 ADD     R3, PC, R3      ; &quot;hello world!&quot;</div><div class="line">.text:00008284                 MOV     R0, R3          ; s</div><div class="line">.text:00008288                 BL      puts</div><div class="line">.text:0000828C                 LDR     R3, =(aHa - 0x8298)</div><div class="line">.text:00008290                 ADD     R3, PC, R3      ; &quot;ha!&quot;</div><div class="line">.text:00008294                 MOV     R0, R3          ; s</div><div class="line">.text:00008298                 BL      puts</div><div class="line">.text:0000829C                 MOV     R3, #0</div><div class="line">.text:000082A0                 MOV     R0, R3</div><div class="line">.text:000082A4                 SUB     SP, R11, #4</div><div class="line">.text:000082A8                 LDMFD   SP!, &#123;R11,PC&#125;</div></pre></td></tr></table></figure>
<p>我们可以看到反汇编的代码和我们上面写的基本差不多。那下面我们就一一看看常用的反编译代码片段</p>
<h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;objdump&quot;&gt;&lt;a href=&quot;#objdump&quot; class=&quot;headerlink&quot; title=&quot;objdump&quot;&gt;&lt;/a&gt;objdump&lt;/h1&gt;&lt;p&gt;其中测试代码为hello.s&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;
    
    </summary>
    
      <category term="NDK" scheme="http://i.woblog.cn/categories/NDK/"/>
    
    
      <category term="ida pro" scheme="http://i.woblog.cn/tags/ida-pro/"/>
    
      <category term="objdump" scheme="http://i.woblog.cn/tags/objdump/"/>
    
  </entry>
  
  <entry>
    <title>elf文件格式</title>
    <link href="http://i.woblog.cn/2016/08/14/elf-format/"/>
    <id>http://i.woblog.cn/2016/08/14/elf-format/</id>
    <published>2016-08-14T21:47:34.000Z</published>
    <updated>2016-11-21T15:12:36.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在计算机科学中，是一种用于二进制文件、可执行文件、目标代码、共享库和核心转储的标准文件格式。<br>是UNIX系统实验室（USL）作为应用程序二进制接口（Application Binary Interface，ABI）而开发和发布的，也是Linux的主要可执行文件格式。在android中同样也是该格式，但是有部分不太一样可以在<a href="https://developer.android.com/ndk/guides/abis.html?hl=is" target="_blank" rel="external">官网查看ARM ELF File Format</a>他会跳到<a href="http://infocenter.arm.com/help/topic/com.arm.doc.dui0101a/DUI0101A_Elf.pdf" target="_blank" rel="external">arm官方格式定义文档</a></p>
<h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><p>elf文件分三种类型</p>
<p>relocatable file：可重定位文件，一般有汇编器生成的.o文件还未进行链接，链接后生成可执行的对象文件和可共享的对象文件。也可以使用ar工具将多个.o文件归档成.a静态库文件<br>executable file：可执行文件<br>shared object file：即.so文件</p>
<p>我们从上面的文档中发现，可执行文件和链接文件他们的结构不太一样</p>
<p>Linking View</p>
<table>
<thead>
<tr>
<th>ELF Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Program Header Table (Optional)</td>
</tr>
<tr>
<td>Section 1</td>
</tr>
<tr>
<td>…</td>
</tr>
<tr>
<td>Section Header Table</td>
</tr>
</tbody>
</table>
<p>Execution View</p>
<table>
<thead>
<tr>
<th>ELF Header</th>
</tr>
</thead>
<tbody>
<tr>
<td>Program Header Table</td>
</tr>
<tr>
<td>Segment 1</td>
</tr>
<tr>
<td>…</td>
</tr>
<tr>
<td>Section Header Table (Optional)</td>
</tr>
</tbody>
</table>
<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>elf格式中会有很多自定义数据类型</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>大小</th>
<th>对齐</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>Elf32_Addr</td>
<td>4</td>
<td>4</td>
<td>无符号程序地址</td>
</tr>
<tr>
<td>Elf32_Half</td>
<td>2</td>
<td>2</td>
<td>无符号短整数</td>
</tr>
<tr>
<td>Elf32_Off</td>
<td>4</td>
<td>4</td>
<td>无符号文件偏移</td>
</tr>
<tr>
<td>Elf32_Sword</td>
<td>4</td>
<td>4</td>
<td>有符号大整数</td>
</tr>
<tr>
<td>Elf32_Word</td>
<td>4</td>
<td>4</td>
<td>无符号大整数</td>
</tr>
<tr>
<td>unsigned char</td>
<td>1</td>
<td>1</td>
<td>无符号小整数</td>
</tr>
</tbody>
</table>
<p>他的定义可以在types_elf.h中查看</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">typedef uint32 Elf32_Addr;  // Unsigned program address</div><div class="line">typedef uint16 Elf32_Half;  // Unsigned medium integer</div><div class="line">typedef uint32 Elf32_Off;  // Unsigned file offset</div><div class="line">typedef int32 Elf32_Sword;  // Signed large integer</div><div class="line">typedef uint32 Elf32_Word;  // Unsigned large integer</div></pre></td></tr></table></figure>
<h1 id="查看工具"><a href="#查看工具" class="headerlink" title="查看工具"></a>查看工具</h1><h2 id="file"><a href="#file" class="headerlink" title="file"></a>file</h2><p>基本信息我们可以用file命令查看</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">file hello</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hello: ELF 32-bit LSB executable, ARM, version 1 (SYSV), dynamically linked (uses shared libs), stripped</div></pre></td></tr></table></figure>
<h2 id="readelf"><a href="#readelf" class="headerlink" title="readelf"></a>readelf</h2><h3 id="显示头部信息"><a href="#显示头部信息" class="headerlink" title="显示头部信息"></a>显示头部信息</h3><p>arm-linux-androideabi-readelf -h hello</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">ELF Header:</div><div class="line">  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 </div><div class="line">  Class:                             ELF32</div><div class="line">  Data:                              2&apos;s complement, little endian</div><div class="line">  Version:                           1 (current)</div><div class="line">  OS/ABI:                            UNIX - System V</div><div class="line">  ABI Version:                       0</div><div class="line">  Type:                              EXEC (Executable file)</div><div class="line">  Machine:                           ARM</div><div class="line">  Version:                           0x1</div><div class="line">  Entry point address:               0x8478</div><div class="line">  Start of program headers:          52 (bytes into file)</div><div class="line">  Start of section headers:          8552 (bytes into file)</div><div class="line">  Flags:                             0x5000200, Version5 EABI, soft-float ABI</div><div class="line">  Size of this header:               52 (bytes)</div><div class="line">  Size of program headers:           32 (bytes)</div><div class="line">  Number of program headers:         8</div><div class="line">  Size of section headers:           40 (bytes)</div><div class="line">  Number of section headers:         24</div><div class="line">  Section header string table index: 23</div></pre></td></tr></table></figure>
<p>上面看的是可执行文件，下面我们看看，共享文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">ELF Header:</div><div class="line">  Magic:   7f 45 4c 46 01 01 01 00 00 00 00 00 00 00 00 00 </div><div class="line">  Class:                             ELF32</div><div class="line">  Data:                              2&apos;s complement, little endian</div><div class="line">  Version:                           1 (current)</div><div class="line">  OS/ABI:                            UNIX - System V</div><div class="line">  ABI Version:                       0</div><div class="line">  Type:                              DYN (Shared object file)</div><div class="line">  Machine:                           ARM</div><div class="line">  Version:                           0x1</div><div class="line">  Entry point address:               0x0</div><div class="line">  Start of program headers:          52 (bytes into file)</div><div class="line">  Start of section headers:          12616 (bytes into file) //10进制,要转换为16进制查看所在内存地址</div><div class="line">  Flags:                             0x5000200, Version5 EABI, soft-float ABI</div><div class="line">  Size of this header:               52 (bytes)</div><div class="line">  Size of program headers:           32 (bytes)</div><div class="line">  Number of program headers:         8</div><div class="line">  Size of section headers:           40 (bytes)</div><div class="line">  Number of section headers:         22</div><div class="line">  Section header string table index: 21</div></pre></td></tr></table></figure>
<p>我们可以从type区分出他们的类型。</p>
<p>Entry point address:程序的入口地址，共享文件没有入口点</p>
<h3 id="显示节-section-信息"><a href="#显示节-section-信息" class="headerlink" title="显示节(section)信息"></a>显示节(section)信息</h3><p>arm-linux-androideabi-readelf -S hello</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">There are 24 section headers, starting at offset 0x2168:</div><div class="line"></div><div class="line">Section Headers:</div><div class="line">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</div><div class="line">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0</div><div class="line">  [ 1] .interp           PROGBITS        00008134 000134 000013 00   A  0   0  1</div><div class="line">  [ 2] .dynsym           DYNSYM          00008148 000148 0000e0 10   A  3   1  4</div><div class="line">  [ 3] .dynstr           STRTAB          00008228 000228 0000c4 00   A  0   0  1</div><div class="line">  [ 4] .hash             HASH            000082ec 0002ec 00004c 04   A  2   0  4</div><div class="line">  [ 5] .rel.dyn          REL             00008338 000338 000010 08   A  2   0  4</div><div class="line">  [ 6] .rel.plt          REL             00008348 000348 000048 08  AI  2   7  4</div><div class="line">  [ 7] .plt              PROGBITS        00008390 000390 000080 00  AX  0   0  4</div><div class="line">  [ 8] .text             PROGBITS        00008410 000410 0016d0 00  AX  0   0  4</div><div class="line">  [ 9] .note.android.ide PROGBITS        00009ae0 001ae0 000018 00   A  0   0  4</div><div class="line">  [10] .ARM.exidx        ARM_EXIDX       00009af8 001af8 000110 08  AL  8   0  4</div><div class="line">  [11] .ARM.extab        PROGBITS        00009c08 001c08 00003c 00   A  0   0  4</div><div class="line">  [12] .rodata           PROGBITS        00009c48 001c48 000028 01 AMS  0   0  8</div><div class="line">  [13] .fini_array       FINI_ARRAY      0000ae84 001e84 000008 00  WA  0   0  4</div><div class="line">  [14] .init_array       INIT_ARRAY      0000ae8c 001e8c 000010 00  WA  0   0  4</div><div class="line">  [15] .preinit_array    PREINIT_ARRAY   0000ae9c 001e9c 000008 00  WA  0   0  4</div><div class="line">  [16] .dynamic          DYNAMIC         0000aea4 001ea4 0000f8 08  WA  3   0  4</div><div class="line">  [17] .got              PROGBITS        0000af9c 001f9c 000064 00  WA  0   0  4</div><div class="line">  [18] .data             PROGBITS        0000b000 002000 000014 00  WA  0   0  4</div><div class="line">  [19] .bss              NOBITS          0000b014 002014 000004 00  WA  0   0  4</div><div class="line">  [20] .comment          PROGBITS        00000000 002014 000026 01  MS  0   0  1</div><div class="line">  [21] .note.gnu.gold-ve NOTE            00000000 00203c 00001c 00      0   0  4</div><div class="line">  [22] .ARM.attributes   ARM_ATTRIBUTES  00000000 002058 00002b 00      0   0  1</div><div class="line">  [23] .shstrtab         STRTAB          00000000 002083 0000e3 00      0   0  1</div><div class="line">Key to Flags:</div><div class="line">  W (write), A (alloc), X (execute), M (merge), S (strings)</div><div class="line">  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)</div><div class="line">  O (extra OS processing required) o (OS specific), p (processor specific)</div><div class="line">➜  armeabi arm-linux-androideabi-readelf -S libhello.so</div></pre></td></tr></table></figure>
<p>动态文件</p>
<p>arm-linux-androideabi-readelf -S libhello.so</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">There are 22 section headers, starting at offset 0x3148:</div><div class="line"></div><div class="line">Section Headers:</div><div class="line">  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al</div><div class="line">  [ 0]                   NULL            00000000 000000 000000 00      0   0  0</div><div class="line">  [ 1] .interp           PROGBITS        00000134 000134 000013 00   A  0   0  1</div><div class="line">  [ 2] .dynsym           DYNSYM          00000148 000148 0003d0 10   A  3   1  4</div><div class="line">  [ 3] .dynstr           STRTAB          00000518 000518 0004b1 00   A  0   0  1</div><div class="line">  [ 4] .hash             HASH            000009cc 0009cc 000190 04   A  2   0  4</div><div class="line">  [ 5] .rel.dyn          REL             00000b5c 000b5c 000048 08   A  2   0  4</div><div class="line">  [ 6] .rel.plt          REL             00000ba4 000ba4 000048 08  AI  2   7  4</div><div class="line">  [ 7] .plt              PROGBITS        00000bec 000bec 000080 00  AX  0   0  4</div><div class="line">  [ 8] .text             PROGBITS        00000c6c 000c6c 001664 00  AX  0   0  4</div><div class="line">  [ 9] .ARM.extab        PROGBITS        000022d0 0022d0 00003c 00   A  0   0  4</div><div class="line">  [10] .ARM.exidx        ARM_EXIDX       0000230c 00230c 000110 08  AL  8   0  4</div><div class="line">  [11] .rodata           PROGBITS        00002420 002420 000028 01 AMS  0   0  8</div><div class="line">  [12] .fini_array       FINI_ARRAY      00003eac 002eac 000008 00  WA  0   0  4</div><div class="line">  [13] .init_array       INIT_ARRAY      00003eb4 002eb4 000004 00  WA  0   0  1</div><div class="line">  [14] .dynamic          DYNAMIC         00003eb8 002eb8 0000f8 08  WA  3   0  4</div><div class="line">  [15] .got              PROGBITS        00003fb0 002fb0 000050 00  WA  0   0  4</div><div class="line">  [16] .data             PROGBITS        00004000 003000 000018 00  WA  0   0  4</div><div class="line">  [17] .bss              NOBITS          00004018 003018 000000 00  WA  0   0  1</div><div class="line">  [18] .comment          PROGBITS        00000000 003018 000026 01  MS  0   0  1</div><div class="line">  [19] .note.gnu.gold-ve NOTE            00000000 003040 00001c 00      0   0  4</div><div class="line">  [20] .ARM.attributes   ARM_ATTRIBUTES  00000000 00305c 00002b 00      0   0  1</div><div class="line">  [21] .shstrtab         STRTAB          00000000 003087 0000c0 00      0   0  1</div><div class="line">Key to Flags:</div><div class="line">  W (write), A (alloc), X (execute), M (merge), S (strings)</div><div class="line">  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)</div><div class="line">  O (extra OS processing required) o (OS specific), p (processor specific)</div></pre></td></tr></table></figure>
<p>那什么是节呢，节是elf文件里用来装载内容数据的最小容器。其中每一个sections内部都装载了性质和属性差不多的内容如：</p>
<p>.text section：可以执行代码</p>
<p>.data section:初始化数据</p>
<p>.bss section:未初始时数据</p>
<p>等，一个文件到底有哪些section，是有这个elf中的section head table(sht)决定的。</p>
<h1 id="dex文件整体结构"><a href="#dex文件整体结构" class="headerlink" title="dex文件整体结构"></a>dex文件整体结构</h1><h2 id="ELF-Header"><a href="#ELF-Header" class="headerlink" title="ELF Header"></a>ELF Header</h2><p>头部定义android-ndk-r11c/platforms/android-24/arch-arm/usr/include/linux/elf.h</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> EI_NIDENT 16</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> elf32_hdr&#123;</div><div class="line">	<span class="comment">/* WARNING: DO NOT EDIT, AUTO-GENERATED CODE - SEE TOP FOR INSTRUCTIONS */</span></div><div class="line">	 <span class="keyword">unsigned</span> <span class="keyword">char</span> e_ident[EI_NIDENT]; <span class="comment">//固定值7f 45 4c 46 01 01 01 00  00 00 00 00 00 00 00 00, ELF</span></div><div class="line">	 Elf32_Half e_type;</div><div class="line">	 Elf32_Half e_machine;</div><div class="line">	 Elf32_Word e_version;</div><div class="line">	<span class="comment">/* WARNING: DO NOT EDIT, AUTO-GENERATED CODE - SEE TOP FOR INSTRUCTIONS */</span></div><div class="line">	 Elf32_Addr e_entry;</div><div class="line">	 Elf32_Off e_phoff; <span class="comment">//程序头(Program Header)内容在整个文件的偏移值</span></div><div class="line">	 Elf32_Off e_shoff; <span class="comment">//段头(Section Header)内容在这个文件的偏移值</span></div><div class="line">	 Elf32_Word e_flags; </div><div class="line">	<span class="comment">/* WARNING: DO NOT EDIT, AUTO-GENERATED CODE - SEE TOP FOR INSTRUCTIONS */</span></div><div class="line">	 Elf32_Half e_ehsize;</div><div class="line">	 Elf32_Half e_phentsize;</div><div class="line">	 Elf32_Half e_phnum; <span class="comment">//程序头的个数</span></div><div class="line">	 Elf32_Half e_shentsize;</div><div class="line">	<span class="comment">/* WARNING: DO NOT EDIT, AUTO-GENERATED CODE - SEE TOP FOR INSTRUCTIONS */</span></div><div class="line">	 Elf32_Half e_shnum; <span class="comment">//段头的个数</span></div><div class="line">	 Elf32_Half e_shstrndx; <span class="comment">//String段在整个段列表中的索引值</span></div><div class="line">&#125; Elf32_Ehdr;</div></pre></td></tr></table></figure>
<p>当然定义也可以在/external/chromium_org/courgette/types_elf.h看到上面的定义</p>
<p>每个字段的解释如下：</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>偏移值</th>
<th>长度</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>e_ident</td>
<td>0x0</td>
<td>16</td>
<td>elf文件幻数</td>
</tr>
<tr>
<td>e_type</td>
<td>0x10</td>
<td>2</td>
<td>该文件的类型,见e_type表</td>
</tr>
<tr>
<td>e_machine</td>
<td>0x12</td>
<td>2</td>
<td>程序运行的体系结构,见e_machine表</td>
</tr>
<tr>
<td>e_version</td>
<td>0x14</td>
<td>4</td>
<td>文件版本,1表示当前版本</td>
</tr>
<tr>
<td>e_entry</td>
<td>0x18</td>
<td>4</td>
<td>程序入口点,动态链接文件没有入口，为0</td>
</tr>
<tr>
<td>e_phoff</td>
<td>0x1c</td>
<td>4</td>
<td>程序头表(program header table)偏移量,如果没有为0</td>
</tr>
<tr>
<td>e_shoff</td>
<td>0x20</td>
<td>4</td>
<td>section头表(section header table)偏移,如果没有为0</td>
</tr>
<tr>
<td>e_flags</td>
<td>0x24</td>
<td>4</td>
<td>特定处理器标志,采用EF_machine_flag格式</td>
</tr>
<tr>
<td>e_ehsize</td>
<td>0x28</td>
<td>2</td>
<td>elf头的大小,Size of this header就是这个字段</td>
</tr>
<tr>
<td>e_phentsize</td>
<td>0x2a</td>
<td>2</td>
<td>程序头表(program header table)大小,Size of program headers</td>
</tr>
<tr>
<td>e_phnum</td>
<td>0x2c</td>
<td>2</td>
<td>程序头表(program header table)个数, Number of program headers</td>
</tr>
<tr>
<td>e_shentsize</td>
<td>0x2e</td>
<td>2</td>
<td>section头的大小(单个), Size of section headers</td>
</tr>
<tr>
<td>e_shnum</td>
<td>0x30</td>
<td>2</td>
<td>section header table中的入口数目</td>
</tr>
<tr>
<td>e_shstrndx</td>
<td>0x32</td>
<td>2</td>
<td>跟section名字字符表相关入口的section头表(section header table)索引,//TODO</td>
</tr>
</tbody>
</table>
<h3 id="e-type"><a href="#e-type" class="headerlink" title="e_type"></a>e_type</h3><table>
<thead>
<tr>
<th>名称</th>
<th>值</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>ET_NONE</td>
<td>0</td>
<td>No file type</td>
</tr>
<tr>
<td>ET_REL</td>
<td>1</td>
<td>Relocatable file</td>
</tr>
<tr>
<td>ET_EXEC</td>
<td>2</td>
<td>Executable file</td>
</tr>
<tr>
<td>ET_DYN</td>
<td>3</td>
<td>Shared object file</td>
</tr>
<tr>
<td>ET_CORE</td>
<td>4</td>
<td>Core file</td>
</tr>
<tr>
<td>ET_LOPROC</td>
<td>0xff00</td>
<td>Processor-specific</td>
</tr>
<tr>
<td>ET_HIPROC</td>
<td>0xffff</td>
<td>Processor-specific</td>
</tr>
</tbody>
</table>
<p>其中CORE的文件内容未被指明，他是保留的</p>
<p>ET_LOPROC-ET_HIPROC是为特殊处理器保留的</p>
<h3 id="e-machine"><a href="#e-machine" class="headerlink" title="e_machine"></a>e_machine</h3><table>
<thead>
<tr>
<th>名称</th>
<th>值</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>EM_NONE</td>
<td>0</td>
<td>No machine</td>
</tr>
<tr>
<td>EM_M32</td>
<td>1</td>
<td>AT&amp;T WE 32100</td>
</tr>
<tr>
<td>EM_SPARC</td>
<td>2</td>
<td>SPARC</td>
</tr>
<tr>
<td>EM_386</td>
<td>3</td>
<td>Intel 80386</td>
</tr>
<tr>
<td>EM_68K</td>
<td>4</td>
<td>Motorola 68000</td>
</tr>
<tr>
<td>EM_88K</td>
<td>5</td>
<td>Motorola 88000</td>
</tr>
<tr>
<td>EM_860</td>
<td>7</td>
<td>Intel 80860</td>
</tr>
<tr>
<td>EM_MIPS</td>
<td>8</td>
<td>MIPS RS3000</td>
</tr>
<tr>
<td></td>
<td>28</td>
<td>ARM</td>
</tr>
</tbody>
</table>
<h2 id="Section"><a href="#Section" class="headerlink" title="Section"></a>Section</h2><p>节，它包含了目标文件中除了elf头部，程序头部表格，节区头部表格外所有内容。他们有如下特点：</p>
<ol>
<li>目标文件中每个节区都有对应的头部描述他，返回来则不成立</li>
<li>每个节区占用文件中一个连续的位置(可能为0)</li>
<li>节区不允许重叠</li>
<li>目标文件可能包含分活动空间(inactive space)，这些区域不属于任何头部和节区，他们没实际作用</li>
</ol>
<h2 id="Section-Header"><a href="#Section-Header" class="headerlink" title="Section Header"></a>Section Header</h2><p>只有文件是链接格式才有效，elf头中e_shoff指出了节区的偏移，e_shnum指出了表格条目数，e_shentsize给出了每项的字节数，所以根据这些信息我们就可以定位所以节信息。Section Header是对每一个section进行了一些描述，包括名称，类型，大小，在整个文件的整体偏移位置，他的定义如下</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> Elf32_Shdr &#123;</div><div class="line">  Elf32_Word   sh_name;</div><div class="line">  Elf32_Word   sh_type;</div><div class="line">  Elf32_Word   sh_flags;</div><div class="line">  Elf32_Addr   sh_addr;</div><div class="line">  Elf32_Off    sh_offset;</div><div class="line">  Elf32_Word   sh_size;</div><div class="line">  Elf32_Word   sh_link;</div><div class="line">  Elf32_Word   sh_info;</div><div class="line">  Elf32_Word   sh_addralign;</div><div class="line">  Elf32_Word   sh_entsize;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>我们从上面的信息显示这个文件有22个section，他的其使用位置可以从header中查看为12616转为16进制为0x3148，所以section header的开始位置就是这里，每个字段的解释如下：</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>长度</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>sh_name</td>
<td>4</td>
<td>section的名字，值是String Table中的索引</td>
</tr>
<tr>
<td>sh_type</td>
<td>4</td>
<td>把sections按内容和意义分类，见sh_type表</td>
</tr>
<tr>
<td>sh_flags</td>
<td>4</td>
<td>sections支持位的标记，用来描述多个属性,见sh_flags表</td>
</tr>
<tr>
<td>sh_addr</td>
<td>4</td>
<td>如果该section加载到内存为内存地址，否则为0</td>
</tr>
<tr>
<td>sh_offset</td>
<td>4</td>
<td>该section的真实偏移位置，SHT_NOBITS类的section不暂用空间</td>
</tr>
<tr>
<td>sh_size</td>
<td>4</td>
<td>section的字节大小，如果类型为SHT_NOBITS为0</td>
</tr>
<tr>
<td>sh_link</td>
<td>4</td>
<td>section报头表的索引连接,具体的还得依据他的类型来解释这个值,见sh_link表</td>
</tr>
<tr>
<td>sh_info</td>
<td>4</td>
<td>额外的信息，解释依靠该section的类型</td>
</tr>
<tr>
<td>sh_addralign</td>
<td>4</td>
<td>地址对齐的约束,假如一个section保存着双字，系统就必须确定整个section是否双字对齐。所以sh_addr的值以sh_addralign的值取模结果必须为0，目前取值为0和2的幂次数。如果是值为0和1表示没有对齐约束</td>
</tr>
<tr>
<td>sh_entsize</td>
<td>4</td>
<td>保存着一张固定大小入口的表，就象符号表。对于这类节区，这个值为表每项的长度(字节)，如果不包含值为0</td>
</tr>
</tbody>
</table>
<p>根据上面的信息我们总结出21个section</p>
<table>
<thead>
<tr>
<th>sh_name</th>
<th>sh_type</th>
<th>sh_flags</th>
<th>sh_addr</th>
<th>sh_offset</th>
<th>sh_size</th>
<th>sh_link</th>
<th>sh_info</th>
<th>sh_addralign</th>
<th>sh_entsize</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>0xb</td>
<td>0x1</td>
<td>0x2</td>
<td>0x134</td>
<td>0x134</td>
<td>0x13</td>
<td>0x0</td>
<td>0x0</td>
<td>0x1</td>
<td>0x0</td>
</tr>
<tr>
<td>0x13</td>
<td>0xb</td>
<td>0x2</td>
<td>148</td>
<td>148</td>
<td>3d0</td>
<td>3</td>
<td>1</td>
<td>4</td>
<td>10</td>
</tr>
<tr>
<td>1b</td>
<td>3</td>
<td>2</td>
<td>518</td>
<td>518</td>
<td>4b1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>23</td>
<td>5</td>
<td>2</td>
<td>9cc</td>
<td>9cc</td>
<td>190</td>
<td>2</td>
<td>0</td>
<td>4</td>
<td>4</td>
</tr>
<tr>
<td>29</td>
<td>9</td>
<td>2</td>
<td>b5c</td>
<td>b5c</td>
<td>48</td>
<td>2</td>
<td>0</td>
<td>4</td>
<td>8</td>
</tr>
<tr>
<td>32</td>
<td>9</td>
<td>42</td>
<td>ba4</td>
<td>ba4</td>
<td>48</td>
<td>2</td>
<td>7</td>
<td>4</td>
<td>8</td>
</tr>
<tr>
<td>36</td>
<td>1</td>
<td>6</td>
<td>bec</td>
<td>bec</td>
<td>80</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>0</td>
</tr>
<tr>
<td>3b</td>
<td>1</td>
<td>6</td>
<td>c6c</td>
<td>c6c</td>
<td>1664</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>0</td>
</tr>
<tr>
<td>41</td>
<td>1</td>
<td>2</td>
<td>22d0</td>
<td>22d0</td>
<td>3c</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>0</td>
</tr>
<tr>
<td>4c</td>
<td>70000001</td>
<td>82</td>
<td>23c0</td>
<td>23c0</td>
<td>110</td>
<td>8</td>
<td>0</td>
<td>4</td>
<td>8</td>
</tr>
<tr>
<td>57</td>
<td>1</td>
<td>32</td>
<td>2420</td>
<td>2420</td>
<td>28</td>
<td>0</td>
<td>0</td>
<td>8</td>
<td>1</td>
</tr>
<tr>
<td>5f</td>
<td>f</td>
<td>3</td>
<td>3eac</td>
<td>2eac</td>
<td>8</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>0</td>
</tr>
<tr>
<td>6b</td>
<td>e</td>
<td>e</td>
<td>3eb4</td>
<td>2eb4</td>
<td>4</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>77</td>
<td>6</td>
<td>3</td>
<td>3eb8</td>
<td>2eb8</td>
<td>f8</td>
<td>3</td>
<td>0</td>
<td>4</td>
<td>8</td>
</tr>
<tr>
<td>80</td>
<td>1</td>
<td>3</td>
<td>3fb0</td>
<td>2fb0</td>
<td>50</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>0</td>
</tr>
<tr>
<td>85</td>
<td>1</td>
<td>3</td>
<td>4000</td>
<td>3000</td>
<td>18</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>0</td>
</tr>
<tr>
<td>8b</td>
<td>8</td>
<td>3</td>
<td>4018</td>
<td>3018</td>
<td>0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>90</td>
<td>1</td>
<td>30</td>
<td>0</td>
<td>3018</td>
<td>26</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>99</td>
<td>7</td>
<td>0</td>
<td>0</td>
<td>3040</td>
<td>1c</td>
<td>0</td>
<td>0</td>
<td>4</td>
<td>0</td>
</tr>
<tr>
<td>b0</td>
<td>70000003</td>
<td>0</td>
<td>0</td>
<td>305c</td>
<td>2b</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>1</td>
<td>3</td>
<td>0</td>
<td>0</td>
<td>3087</td>
<td>c0</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
</tbody>
</table>
<h3 id="sh-type"><a href="#sh-type" class="headerlink" title="sh_type"></a>sh_type</h3><p>指示改section的意义</p>
<table>
<thead>
<tr>
<th>值</th>
<th>名称</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>SHT_NULL</td>
<td>0</td>
<td>section无效,其他成员的值也是未定义的</td>
</tr>
<tr>
<td>SHT_PROGBITS</td>
<td>1</td>
<td>程序定义了一些信息,格式和意义取决于程序本身</td>
</tr>
<tr>
<td>SHT_SYMTAB</td>
<td>2</td>
<td>他和SHT_DYNSYM(保存动态链接时所需最小标号集合),为连接器提供标号,也可以被动态链接器使用。SHT_SYMTAB他可能包含动态链接不需要的标号，见Symbol Table表</td>
</tr>
<tr>
<td>SHT_STRTAB</td>
<td>3</td>
<td>保存字符串列表，一个文件可能包含多个，见String Table</td>
</tr>
<tr>
<td>SHT_RELA</td>
<td>4</td>
<td>保存具有明确加数的重定位入口,一个object文件可能有多个重定位的sections,见Relocation</td>
</tr>
<tr>
<td>SHT_HASH</td>
<td>5</td>
<td>保存一个hash表,所有参与动态链接的object一定包含一个标记哈希表,见Hash Table</td>
</tr>
<tr>
<td>SHT_DYNAMIC</td>
<td>6</td>
<td>保存动态链接信息,当前(后面可能取消)一个文件只有一个,见Dynamic Section</td>
</tr>
<tr>
<td>SHT_NOTE</td>
<td>7</td>
<td>保存其他的一些标志文件信息，见Note Section</td>
</tr>
<tr>
<td>SHT_NOBITS</td>
<td>8</td>
<td>在文件不暂用空间，类似SHT_PROGBITS,虽然不包含字节,但包含了概念的上文件偏移量</td>
</tr>
<tr>
<td>SHT_REL</td>
<td>9</td>
<td>保存着具有明确加数的重定位的入口,见Relocation</td>
</tr>
<tr>
<td>SHT_SHLIB</td>
<td>10</td>
<td>保留类型</td>
</tr>
<tr>
<td>SHT_DYNSYM</td>
<td>11</td>
<td></td>
</tr>
<tr>
<td>SHT_LOPROC</td>
<td>0x70000000</td>
<td>在这范围之间的值为特定处理器语意保留的</td>
</tr>
<tr>
<td>SHT_HIPROC</td>
<td>0x7fffffff</td>
<td>在这范围之间的值为特定处理器语意保留的</td>
</tr>
<tr>
<td>SHT_LOUSER</td>
<td>0x80000000</td>
<td>应用程序保留的索引范围的最小边界,可能被应用程序使用</td>
</tr>
<tr>
<td>SHT_HIUSER</td>
<td>0xffffffff</td>
<td>应用程序保留的索引范围的最大边界,可能被应用程序使用</td>
</tr>
</tbody>
</table>
<h3 id="Symbol-Table"><a href="#Symbol-Table" class="headerlink" title="Symbol Table"></a>Symbol Table</h3><h3 id="String-Table"><a href="#String-Table" class="headerlink" title="String Table"></a>String Table</h3><h3 id="Relocation"><a href="#Relocation" class="headerlink" title="Relocation"></a>Relocation</h3><h3 id="Hash-Table"><a href="#Hash-Table" class="headerlink" title="Hash Table"></a>Hash Table</h3><h3 id="sh-flags"><a href="#sh-flags" class="headerlink" title="sh_flags"></a>sh_flags</h3><p>用来描述section的属性，下面是定义的值，其他的保留</p>
<table>
<thead>
<tr>
<th>值</th>
<th>名称</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>0x1</td>
<td>￼￼￼SHF_WRITE</td>
<td>可被写的数据</td>
</tr>
<tr>
<td>0x2</td>
<td>SHF_ALLOC</td>
<td>在进程执行过程中占据着内存</td>
</tr>
<tr>
<td>0x4</td>
<td>SHF_EXECINSTR</td>
<td>包含了可执行的机器指令</td>
</tr>
<tr>
<td>0xf0000000</td>
<td>SHF_MASKPROC</td>
<td>所有的包括在这掩码中的位为特定处理语意保留的</td>
</tr>
</tbody>
</table>
<h3 id="sh-link-amp-sh-info"><a href="#sh-link-amp-sh-info" class="headerlink" title="sh_link &amp; sh_info"></a>sh_link &amp; sh_info</h3><p>根据节的类型不同，这两个字段的含义也不尽相同</p>
<table>
<thead>
<tr>
<th>sh_type</th>
<th>sh_link</th>
<th>sh_info</th>
</tr>
</thead>
<tbody>
<tr>
<td>SHT_DYNAMIC</td>
<td>该节中条目所用到的字符串表格节区头部索引</td>
<td>0</td>
</tr>
<tr>
<td>SHT_HASH</td>
<td>此哈希表所适用的符号表的节区头部索引</td>
<td>0</td>
</tr>
<tr>
<td>SHT_REL,SHT_RELA</td>
<td>相关符号表的节区头部索引</td>
<td>重定位所适用的节区的</td>
</tr>
<tr>
<td>SHT_SYMTAB,SHT_DYNSYM</td>
<td>相关联的字符串表的节区头部索引</td>
<td>最后一个局部符号(绑 定 STB_LOCAL)的符 号表索引值加一</td>
</tr>
<tr>
<td>其它</td>
<td>SHN_UNDEF</td>
<td>0</td>
</tr>
</tbody>
</table>
<h3 id="特殊节区-special-sections"><a href="#特殊节区-special-sections" class="headerlink" title="特殊节区(special sections)"></a>特殊节区(special sections)</h3><p>就是包含了程序和控制信息，由系统定义的，在运行程序时需要使用的节区</p>
<table>
<thead>
<tr>
<th>节名称</th>
<th>节类型</th>
<th>节属性</th>
<th>意思</th>
</tr>
</thead>
<tbody>
<tr>
<td>.bss</td>
<td>SHT_NOBITS</td>
<td>SHF_ALLOC,SHF_WRITE</td>
<td>该sectiopn保存着未初始化的数据，这些数据存在于程序内存映象中。</td>
</tr>
<tr>
<td>.comment</td>
<td>SHT_PROGBITS</td>
<td>无属性</td>
<td>包含版本控制信息</td>
</tr>
<tr>
<td>.data</td>
<td>同上</td>
<td>SHF_ALLOC,SHF_WRITE</td>
<td>初始化了数据，将出现在程序内存映像中</td>
</tr>
<tr>
<td>.data1</td>
<td>同上</td>
<td>同上</td>
<td>同上</td>
</tr>
<tr>
<td>.debug</td>
<td>同上</td>
<td>无</td>
<td>包含用于符号调试的信息</td>
</tr>
<tr>
<td>.dynamic</td>
<td>SHT_DYNAMIC</td>
<td></td>
<td>动态链接信息，节区属性包含SHF_ALLOC,是否设置SHF_WRITE位取决于处理器</td>
</tr>
<tr>
<td>.dynstr</td>
<td>SHT_STRTAB</td>
<td>SHF_ALLOC</td>
<td>用于动态链接的字符串，大多数情况下这些字符串代表了与符号表现相关的名称</td>
</tr>
<tr>
<td>.dynsym</td>
<td>SHT_DYNSYM</td>
<td>SHF_ALLOC</td>
<td>动态链接符号表</td>
</tr>
<tr>
<td>.fini</td>
<td>SHT_PROGBITS</td>
<td>SHF_ALLOC,SHF_EXECINSTR</td>
<td>可执行指令,是进程终止代码的一部分,程序正常退出时，系统将执行这里的代码</td>
</tr>
<tr>
<td>.got</td>
<td>SHT_PROGBITS</td>
<td></td>
<td>全局偏移表</td>
</tr>
<tr>
<td>.hash</td>
<td>SHT_HASH</td>
<td>SHF_ALLOC</td>
<td>包含一个符号hash表</td>
</tr>
<tr>
<td>.init</td>
<td>SHT_PROGBITS</td>
<td>SHF_ALLOC,SHF_EXECINSTR</td>
<td>可执行指令,是进程初始化代码的一部分,系统在调用入口之前执行这些代码</td>
</tr>
<tr>
<td>.interp</td>
<td>SHT_PROGBITS</td>
<td></td>
<td>该section保存了程序的解释程序(interpreter)的路径。假如在这个section中有一个可装载的段，那么该section的属性的SHF_ALLOC位将被设置；否则，该位不会被设置。看第二部分获得更多的信息</td>
</tr>
<tr>
<td>.line</td>
<td>SHT_PROGBITS</td>
<td>无</td>
<td>符号调试行号信息，描述源程序与机器指令之间的对应关系，其中内容是未定义的</td>
</tr>
<tr>
<td>.note</td>
<td>SHT_NOTE</td>
<td>无</td>
<td>包含注释信息,有特定的格式,见Note Section</td>
</tr>
<tr>
<td>.plt</td>
<td>SHT_PROGBITS</td>
<td></td>
<td>该section保存着过程连接表(Procedure Linkage Table)看第一部分的Special Sections’’和第二部分的“Procedure Linkage Table”</td>
</tr>
<tr>
<td><code>.rel&lt;name&gt; ,.rela&lt;name&gt;</code></td>
<td>SHT_REL</td>
<td></td>
<td>这些section保存着重定位的信息，看下面的``Relocation’’描述。假如文件包含了一个可装载的段，并且这个段是重定位的，那么该section的属性将设置SHF_ALLOC位；否则该位被关闭。按照惯例，<name>由重定位适用的section来提供。因此，一个重定位的section适用的是.text，那么该名字就为.rel.text或者是.rela.text。</name></td>
</tr>
<tr>
<td>.rodata,.rodata11</td>
<td>SHT_PROGBITS</td>
<td>SHF_ALLOC</td>
<td>保存着只读数据，在进程映象中构造不可写的段</td>
</tr>
<tr>
<td>.shstrtab</td>
<td>SHT_STRTAB</td>
<td></td>
<td>保存着section名称</td>
</tr>
<tr>
<td>.strtab</td>
<td>SHT_STRTAB</td>
<td></td>
<td>保存着字符串，一般地，描述名字的字符串和一个标号的入口相关联。假如文件有一个可装载的段，并且该段包括了符号字符串表，那么section的SHF_ALLOC属性将被设置为1</td>
</tr>
<tr>
<td>.symtab</td>
<td>SHT_SYMTAB</td>
<td></td>
<td>包含一个符号表,假如文件有一个可装载的段，并且该段包含了符号表，那么section的SHF_ALLOC属性将被设置为1</td>
</tr>
<tr>
<td>.text</td>
<td>SHT_PROGBITS</td>
<td>SHF_ALLOC,SHF_EXECINSTR</td>
<td>可执行指令</td>
</tr>
</tbody>
</table>
<blockquote>
<p>注意：</p>
<ol>
<li>以.开头的节区名称是系统保留的，应用程序可以定义没有.前缀的节区名称，避免与系统节区冲突</li>
<li>目标文件格式允许我们定义自己的节区</li>
<li>可以包含多个名称相同的节区</li>
<li>保留给处理器体系结构的节区名称一般为:处理器体系结构简写(与e_machine相同)+节区名称,如:.arm.other,意思是arm处理器的other区</li>
</ol>
</blockquote>
<p>有些编译器扩展了节区,如下：</p>
<p>.sdata</p>
<p>.tdesc</p>
<p>.sbss</p>
<p>.lit4</p>
<p>.lit8</p>
<p>.reginfo</p>
<p>.gptab</p>
<p>.liblist</p>
<p>.conflict</p>
<h4 id="Hash-Table-1"><a href="#Hash-Table-1" class="headerlink" title="Hash Table"></a>Hash Table</h4><h3 id="字符串表-String-Table"><a href="#字符串表-String-Table" class="headerlink" title="字符串表(String Table)"></a>字符串表(String Table)</h3>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;在计算机科学中，是一种用于二进制文件、可执行文件、目标代码、共享库和核心转储的标准文件格式。&lt;br&gt;是UNIX系统实验室（USL）作为应用程
    
    </summary>
    
      <category term="elf" scheme="http://i.woblog.cn/categories/elf/"/>
    
    
      <category term="elf" scheme="http://i.woblog.cn/tags/elf/"/>
    
  </entry>
  
  <entry>
    <title>android中原生代码的编译方式</title>
    <link href="http://i.woblog.cn/2016/08/14/build-native-program/"/>
    <id>http://i.woblog.cn/2016/08/14/build-native-program/</id>
    <published>2016-08-14T16:45:58.000Z</published>
    <updated>2016-11-21T15:12:36.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ndk"><a href="#ndk" class="headerlink" title="ndk"></a>ndk</h1><p>从android1.5就提供了原生的开发套件(Native Development Kit),从R8版本中支持3中cpu，分别是x86，mips,arm,我们一般以arm来讲解</p>
<h2 id="arm交叉工具链"><a href="#arm交叉工具链" class="headerlink" title="arm交叉工具链"></a>arm交叉工具链</h2><p>android-ndk-r12b/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin，前缀为arm-linux-androideabi-，他们和linux下面的gcc使用没什么区别，只是他们编译的程序是用于android平台的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">arm-linux-androideabi-addr2line 将程序地址转换为文件名和行号</div><div class="line">arm-linux-androideabi-ar 建立，修改，提取归档文件</div><div class="line">arm-linux-androideabi-as gas汇编器</div><div class="line">arm-linux-androideabi-c++ g++的一个拷贝</div><div class="line">arm-linux-androideabi-c++filt 连接器使用它过滤符号，防止重载函数冲突</div><div class="line">arm-linux-androideabi-cpp c++程序编译工具</div><div class="line">arm-linux-androideabi-dwp </div><div class="line">arm-linux-androideabi-elfedit</div><div class="line">arm-linux-androideabi-g++ c++编译工具</div><div class="line">arm-linux-androideabi-gcc c程序编译工具</div><div class="line">arm-linux-androideabi-gcc-4.9 gcc拷贝</div><div class="line">arm-linux-androideabi-gcc-4.9.x gcc拷贝</div><div class="line">arm-linux-androideabi-gcc-ar</div><div class="line">arm-linux-androideabi-gcc-nm </div><div class="line">arm-linux-androideabi-gcc-ranlib 产生归档文件索引并保存到这个归档文件中</div><div class="line">arm-linux-androideabi-gcov 程序覆盖度测量工具，记录代码的执行路径</div><div class="line">arm-linux-androideabi-gcov-tool</div><div class="line">arm-linux-androideabi-gprof 程序信息测量工具</div><div class="line">arm-linux-androideabi-ld 连接器，用于生产可以执行文件</div><div class="line">arm-linux-androideabi-ld.bfd</div><div class="line">arm-linux-androideabi-ld.gold</div><div class="line">arm-linux-androideabi-nm 列出目标文件中的符号</div><div class="line">arm-linux-androideabi-objcopy 赋值目标文件中的内容到另一种类型的目标文件中</div><div class="line">arm-linux-androideabi-objdump 输出目标文件的信息(反编译)</div><div class="line">arm-linux-androideabi-ranlib </div><div class="line">arm-linux-androideabi-readelf 显示elf格式可执行文件信息</div><div class="line">arm-linux-androideabi-size 显示目标文件每一段的大小以及文件的大小</div><div class="line">arm-linux-androideabi-strings 输出目标文件的可打印字符串</div><div class="line">arm-linux-androideabi-strip 去除目标文件中的符号信息</div></pre></td></tr></table></figure>
<h1 id="原生程序编译步骤"><a href="#原生程序编译步骤" class="headerlink" title="原生程序编译步骤"></a>原生程序编译步骤</h1><p>我们用下面的测试代码来测试几种编译方式</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="built_in">printf</span>(<span class="string">"hello arm\n"</span>);</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h2><p>使用gcc需要些makefile(当然也可以直接在目录行下面将依赖库传递给gcc)然后make命令来编译</p>
<h3 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h3><figure class="highlight mak"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">NDK_ROOT=/Users/renpingqing/Documents/android/android-ndk-r12b</div><div class="line">TOOLCHAINS_ROOT=<span class="variable">$(NDK_ROOT)</span>/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64</div><div class="line">TOOLCHAINS_PREFIX=<span class="variable">$(TOOLCHAINS_ROOT)</span>/bin/arm-linux-androideabi</div><div class="line">TOOLCHAINS_INCLUDE=<span class="variable">$(TOOLCHAINS_ROOT)</span>/lib/gcc/arm-linux-androideabi/4.9/include-fixed</div><div class="line"></div><div class="line">PLATFORM_ROOT=<span class="variable">$(NDK_ROOT)</span>/platforms/android-14/arch-arm</div><div class="line">PLATFORM_INCLUDE=<span class="variable">$(PLATFORM_ROOT)</span>/usr/include</div><div class="line">PLATFORM_LIB=<span class="variable">$(PLATFORM_ROOT)</span>/usr/lib</div><div class="line"></div><div class="line">MODULE_NAME=hello</div><div class="line">RM=rm -rf</div><div class="line"></div><div class="line">FLAGS=-I<span class="variable">$(TOOLCHAINS_INCLUDE)</span> \</div><div class="line">	-I<span class="variable">$(PLATFORM_INCLUDE)</span> \</div><div class="line">	-L<span class="variable">$(PLATFORM_LIB)</span> \</div><div class="line">	-nostdlib \</div><div class="line">	-lgcc \</div><div class="line">	-Bdynamic \</div><div class="line">	-lc</div><div class="line"></div><div class="line">OBJS=<span class="variable">$(MODULE_NAME)</span>.o \</div><div class="line">	<span class="variable">$(PLATFORM_LIB)</span>/crtbegin_dynamic.o \</div><div class="line">	<span class="variable">$(PLATFORM_LIB)</span>/crtend_android.o</div><div class="line"></div><div class="line"><span class="section">all:</span></div><div class="line">	#<span class="variable">$(TOOLCHAINS_PREFIX)</span>-gcc <span class="variable">$(FLAGS)</span> -c <span class="variable">$(MODULE_NAME)</span>.c -o <span class="variable">$(MODULE_NAME)</span>.o</div><div class="line">	#<span class="variable">$(TOOLCHAINS_PREFIX)</span>-gcc <span class="variable">$(FLAGS)</span> <span class="variable">$(OBJS)</span> -o <span class="variable">$(MODULE_NAME)</span></div><div class="line"></div><div class="line">	#下面是分布来编译，一般情况下，用上面两条命令就行了</div><div class="line">	#预处理</div><div class="line">	<span class="variable">$(TOOLCHAINS_PREFIX)</span>-gcc <span class="variable">$(FLAGS)</span> -E <span class="variable">$(MODULE_NAME)</span>.c -o <span class="variable">$(MODULE_NAME)</span>.i</div><div class="line"></div><div class="line">	#编译</div><div class="line">	<span class="variable">$(TOOLCHAINS_PREFIX)</span>-gcc <span class="variable">$(FLAGS)</span> -S <span class="variable">$(MODULE_NAME)</span>.i -o <span class="variable">$(MODULE_NAME)</span>.s</div><div class="line"></div><div class="line">	#汇编</div><div class="line">	<span class="variable">$(TOOLCHAINS_PREFIX)</span>-gcc <span class="variable">$(FLAGS)</span> -c <span class="variable">$(MODULE_NAME)</span>.s -o <span class="variable">$(MODULE_NAME)</span>.o</div><div class="line"></div><div class="line">	#链接</div><div class="line">	<span class="variable">$(TOOLCHAINS_PREFIX)</span>-gcc <span class="variable">$(FLAGS)</span> <span class="variable">$(OBJS)</span> -o <span class="variable">$(MODULE_NAME)</span></div><div class="line"><span class="section">clean:</span></div><div class="line">	<span class="variable">$(RM)</span> *.o</div><div class="line"><span class="section">install:</span></div><div class="line">	adb push <span class="variable">$(MODULE_NAME)</span> /data/local/</div><div class="line">	adb shell chmod 755 /data/local/<span class="variable">$(MODULE_NAME)</span></div><div class="line">	adb shell /data/local/<span class="variable">$(MODULE_NAME)</span></div></pre></td></tr></table></figure>
<p>FLAGS：变量添加了头文件和库文件上的搜索路径</p>
<p>all:指定了编译程序时需要的命令</p>
<p>clean:用于清理编译生成的文件</p>
<p>install:用来将生成的可执行文件push到手机并执行</p>
<blockquote>
<p>注意：由于android没有采用标准的glibc库，而是用自己开发的bionic库，所以flags中需要加-nostdlib</p>
</blockquote>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>接下来我们只需要执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
<p>就可以看见如下输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hello arm</div></pre></td></tr></table></figure>
<p>如果makefile叫其他的名字那需要这样执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make -f makefile1</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：虽然我们可以通过makefile的方式来编译，但是官方推荐使用ndk-build来完成</p>
</blockquote>
<h2 id="ndk-build"><a href="#ndk-build" class="headerlink" title="ndk-build"></a>ndk-build</h2><p>使用gcc来编译时很原始的，所以android开发了一套编译套件，其目录结构一般是在android工程下创建一个jni目录，然后在里面放入原生代码源文件。同时编译脚本</p>
<p>Android.mk：相当于makefile</p>
<p>Application.mk(可选):描述原始程序本身的一些特性，如：支持的指令集，stl支持</p>
<p>也放在这里</p>
<p>Android.mk</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#定义本地源码的路径，调用了my-dir宏，有编译系统提供，返回Android.mk文件本身的路径，一般在源码跟目录</div><div class="line">LOCAL_PATH := $(call my-dir)</div><div class="line"></div><div class="line"># 让编译系统清除已经定义的宏，像LOCAL_ARM_MODE是全局的，当编译多个模块如果不清除将会导致混乱</div><div class="line">include $(CLEAR_VARS)</div><div class="line"></div><div class="line">#指定原生程序所使用的arm指令模式</div><div class="line">LOCAL_ARM_MODE := arm</div><div class="line"></div><div class="line">#指定生成后的模块名称，如果是共享库，生成libhello.so</div><div class="line">LOCAL_MODULE := hello</div><div class="line"></div><div class="line">#源码列表，多个用空格分开</div><div class="line">LOCAL_SRC_FILES := hello.c</div><div class="line"></div><div class="line">#指定生成的文件类型，BUILD_SHARED_LIBRARY：动态库，BUILD_EXECUTEABLE:可执行文件，BUILD_STATIC_LIBRARY:静态库</div><div class="line">include $(BUILD_EXECUTABLE)</div></pre></td></tr></table></figure>
<p>现在我们可以在jni上层目录执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ndk-build</div></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[arm64-v8a] Compile        : hello &lt;= hello.c</div><div class="line">[arm64-v8a] SharedLibrary  : libhello.so</div><div class="line">[arm64-v8a] Install        : libhello.so =&gt; libs/arm64-v8a/libhello.so</div><div class="line">[x86_64] Compile        : hello &lt;= hello.c</div><div class="line">[x86_64] SharedLibrary  : libhello.so</div><div class="line">[x86_64] Install        : libhello.so =&gt; libs/x86_64/libhello.so</div><div class="line">[mips64] Compile        : hello &lt;= hello.c</div><div class="line">[mips64] SharedLibrary  : libhello.so</div><div class="line">[mips64] Install        : libhello.so =&gt; libs/mips64/libhello.so</div><div class="line">[armeabi-v7a] Compile arm    : hello &lt;= hello.c</div><div class="line">[armeabi-v7a] SharedLibrary  : libhello.so</div><div class="line">[armeabi-v7a] Install        : libhello.so =&gt; libs/armeabi-v7a/libhello.so</div><div class="line">[armeabi] Compile arm    : hello &lt;= hello.c</div><div class="line">[armeabi] SharedLibrary  : libhello.so</div><div class="line">[armeabi] Install        : libhello.so =&gt; libs/armeabi/libhello.so</div><div class="line">[x86] Compile        : hello &lt;= hello.c</div><div class="line">[x86] SharedLibrary  : libhello.so</div><div class="line">[x86] Install        : libhello.so =&gt; libs/x86/libhello.so</div><div class="line">[mips] Compile        : hello &lt;= hello.c</div><div class="line">[mips] SharedLibrary  : libhello.so</div><div class="line">[mips] Install        : libhello.so =&gt; libs/mips/libhello.so</div></pre></td></tr></table></figure>
<p>我们可以在当前目录看到生成libs目录有如下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">arm64-v8a</div><div class="line">	hello</div><div class="line">armeabi</div><div class="line">	hello</div><div class="line">armeabi-v7a</div><div class="line">	hello</div><div class="line">mips</div><div class="line">	hello</div><div class="line">mips64</div><div class="line">	hello</div><div class="line">x86</div><div class="line">	hello</div><div class="line">x86_64</div><div class="line">	hello</div></pre></td></tr></table></figure>
<p>如果我们没有指定编译平台，他会编译所有平台。我只需要将arm下的hello文件push到手机，然后运行也可以看到上面同样的输出</p>
<h3 id="源码不再jni目录"><a href="#源码不再jni目录" class="headerlink" title="源码不再jni目录"></a>源码不再jni目录</h3><p>有时候我们的源码不一定放在jni目录，那么在当前目录执行ndk-build后有如下提示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Android NDK: Could not find application project directory !    </div><div class="line">Android NDK: Please define the NDK_PROJECT_PATH variable to point to it.    </div><div class="line">/Users/renpingqing/Documents/android/android-ndk-r12b/build/core/build-local.mk:151: *** Android NDK: Aborting    .  Stop.</div></pre></td></tr></table></figure>
<p>解决办法是要指定NDK_PROJECT_PATH等文件的路径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ndk-build NDK_PROJECT_PATH=. APP_BUILD_SCRIPT=./Android.mk</div></pre></td></tr></table></figure>
<p>这样就可以编译了，会在当前目录下生产libs目录</p>
<h2 id="eclipse自动编译"><a href="#eclipse自动编译" class="headerlink" title="eclipse自动编译"></a>eclipse自动编译</h2><p>大家可以发现如果我们的ndk代码很多而又是从java层调用这些代码，如果我改一点在手动编译，可以是说有点麻烦，所以接下来我们说说怎么是eclipse自动编译，所谓自动编译就是我改了c/c++文件，然后运行和java代码编译方式没什么两样，这里我们可以以官方的<a href="https://github.com/googlesamples/android-ndk/tree/android-mk/hello-jni" target="_blank" rel="external">hello-jni</a>例子来演示自动build</p>
<h3 id="新建一个build"><a href="#新建一个build" class="headerlink" title="新建一个build"></a>新建一个build</h3><p>在项目右键-properties-builders-new，来到如下界面</p>
<p><img src="http://7qnc6h.com1.z0.glb.clouddn.com/eclipse-build1.png" alt=""></p>
<p>我们按照上图填写，接下来我们来到refresh标签</p>
<p><img src="http://7qnc6h.com1.z0.glb.clouddn.com/eclipse-build2.png" alt=""></p>
<p>build options</p>
<p><img src="http://7qnc6h.com1.z0.glb.clouddn.com/eclipse-build3.png" alt=""></p>
<p>这一步我们除了勾选上图，还需要点击specify resource按钮选择jni目录，到这里基本配置完成了，单机ok，如果配置没问题，就会自动编译jni下面的源码。最重要的是，下次我们改变了jni下面的代码他会自动触发编译</p>
<h2 id="android-studio"><a href="#android-studio" class="headerlink" title="android studio"></a>android studio</h2><p>创建项目我就不说了。创建完成后再项目右键选择open module settings在sdk location的idk location中选择ndk目录</p>
<p>将源代码添加到main/jni目录下，不在需要Android.mk这样的文件了。在build.gradle开启ndk编译</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">defaultConfig &#123;</div><div class="line">    ...</div><div class="line">    ndk&#123;</div><div class="line">        moduleName &quot;hello-jni&quot;    //lib的名称，对应LOCAL_MODULE</div><div class="line">        //stl &quot;stlport_shared&quot;    //对应APP_STL</div><div class="line">        ldLibs &quot;log&quot;, &quot;z&quot;, &quot;m&quot;  //链接时使用到的库，对应LOCAL_LDLIBS</div><div class="line">        //cFlags 编译gcc的flag，对应LOCAL_CFLAGS</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加完后，直接运行就可以编译了。如果报错</p>
<h3 id="Error-NDK-integration-is-deprecated-in-the-current-plugin"><a href="#Error-NDK-integration-is-deprecated-in-the-current-plugin" class="headerlink" title="Error: NDK integration is deprecated in the current plugin"></a>Error: NDK integration is deprecated in the current plugin</h3><p>如果编译时报错，详细错误信息如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Error:Execution failed for task &apos;:app:compileDebugNdk&apos;.</div><div class="line">&gt; Error: NDK integration is deprecated in the current plugin.  Consider trying the new experimental plugin.  For details, see http://tools.android.com/tech-docs/new-build-system/gradle-experimental.  Set &quot;android.useDeprecatedNdk=true&quot; in gradle.properties to continue using the current NDK integration.</div></pre></td></tr></table></figure>
<p>直接在gradle.properties中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android.useDeprecatedNdk=true</div></pre></td></tr></table></figure>
<h3 id="关闭自动编译"><a href="#关闭自动编译" class="headerlink" title="关闭自动编译"></a>关闭自动编译</h3><p>有时候我们想关闭自动as的自动编译，我们注释掉build.gradle的ndk配置，然后添加Android.mk，在jni上层目录执行ndk-build，但是他生成默认在libs目录下，我们需要手动创建jniLibs然后将libs下面的拷贝到当前目录。<a href="https://github.com/lifengsofts/BuildNativeCodeSimple" target="_blank" rel="external">以上测试代码在这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ndk&quot;&gt;&lt;a href=&quot;#ndk&quot; class=&quot;headerlink&quot; title=&quot;ndk&quot;&gt;&lt;/a&gt;ndk&lt;/h1&gt;&lt;p&gt;从android1.5就提供了原生的开发套件(Native Development Kit),从R8版本中支持3中cpu，分别是x8
    
    </summary>
    
      <category term="NDK" scheme="http://i.woblog.cn/categories/NDK/"/>
    
    
      <category term="ndk" scheme="http://i.woblog.cn/tags/ndk/"/>
    
      <category term="ndk-build" scheme="http://i.woblog.cn/tags/ndk-build/"/>
    
      <category term="make" scheme="http://i.woblog.cn/tags/make/"/>
    
  </entry>
  
  <entry>
    <title>ARM汇编</title>
    <link href="http://i.woblog.cn/2016/08/10/arm-assembly/"/>
    <id>http://i.woblog.cn/2016/08/10/arm-assembly/</id>
    <published>2016-08-10T17:18:12.000Z</published>
    <updated>2016-11-21T15:12:36.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ARM汇编程序结构"><a href="#ARM汇编程序结构" class="headerlink" title="ARM汇编程序结构"></a>ARM汇编程序结构</h1><p>Android中使用的ARM汇编是GUN ARM汇编，用到的编译器是GAS(GUN assembler)他有一套自己的语法，具体的可以参考<a href="https://sourceware.org/binutils/docs/as/index.html" target="_blank" rel="external">https://sourceware.org/binutils/docs/as/index.html</a></p>
<h1 id="解析ARM汇编"><a href="#解析ARM汇编" class="headerlink" title="解析ARM汇编"></a>解析ARM汇编</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div></pre></td><td class="code"><pre><div class="line">	.arch armv5te @处理器架构</div><div class="line">	.fpu softvfp @协处理类型</div><div class="line">	.eabi_attribute 20, 1 @接口属性</div><div class="line">	.eabi_attribute 21, 1</div><div class="line">	.eabi_attribute 23, 3</div><div class="line">	.eabi_attribute 24, 1</div><div class="line">	.eabi_attribute 25, 1</div><div class="line">	.eabi_attribute 26, 2</div><div class="line">	.eabi_attribute 30, 6</div><div class="line">	.eabi_attribute 34, 0</div><div class="line">	.eabi_attribute 18, 4</div><div class="line">	.file	&quot;hello.c&quot; @源文件名</div><div class="line">	.global	nums @全局符号nums</div><div class="line">	.data</div><div class="line">	.align	2 @对齐方式2^2=4字节=32位</div><div class="line">	.type	nums, %object @类型为对象</div><div class="line">	.size	nums, 20 @20个字节，5个int值</div><div class="line">nums:</div><div class="line">	.word	1</div><div class="line">	.word	2</div><div class="line">	.word	3</div><div class="line">	.word	4</div><div class="line">	.word	5</div><div class="line">	.text</div><div class="line">	.align	2</div><div class="line">	.global	for0</div><div class="line">	.type	for0, %function</div><div class="line">for0:</div><div class="line">	@ args = 0, pretend = 0, frame = 16</div><div class="line">	@ frame_needed = 1, uses_anonymous_args = 0</div><div class="line">	@ link register save eliminated.</div><div class="line">	str	fp, [sp, #-4]!</div><div class="line">	add	fp, sp, #0</div><div class="line">	sub	sp, sp, #20</div><div class="line">	str	r0, [fp, #-16]</div><div class="line">	mov	r3, #0</div><div class="line">	str	r3, [fp, #-8]</div><div class="line">	mov	r3, #0</div><div class="line">	str	r3, [fp, #-12]</div><div class="line">	mov	r3, #0</div><div class="line">	str	r3, [fp, #-8]</div><div class="line">	b	.L2</div><div class="line">.L3:</div><div class="line">	ldr	r2, [fp, #-12]</div><div class="line">	ldr	r3, [fp, #-8]</div><div class="line">	add	r3, r2, r3</div><div class="line">	str	r3, [fp, #-12]</div><div class="line">	ldr	r3, [fp, #-8]</div><div class="line">	add	r3, r3, #1</div><div class="line">	str	r3, [fp, #-8]</div><div class="line">.L2:</div><div class="line">	ldr	r2, [fp, #-8]</div><div class="line">	ldr	r3, [fp, #-16]</div><div class="line">	cmp	r2, r3</div><div class="line">	blt	.L3</div><div class="line">	ldr	r3, [fp, #-12]</div><div class="line">	mov	r0, r3</div><div class="line">	sub	sp, fp, #0</div><div class="line">	@ sp needed</div><div class="line">	ldr	fp, [sp], #4</div><div class="line">	bx	lr</div><div class="line">	.size	for0, .-for0</div><div class="line">	.align	2</div><div class="line">	.global	for1</div><div class="line">	.type	for1, %function</div><div class="line">for1:</div><div class="line">	@ args = 0, pretend = 0, frame = 16</div><div class="line">	@ frame_needed = 1, uses_anonymous_args = 0</div><div class="line">	@ link register save eliminated.</div><div class="line">	str	fp, [sp, #-4]!</div><div class="line">	add	fp, sp, #0</div><div class="line">	sub	sp, sp, #20</div><div class="line">	str	r0, [fp, #-16]</div><div class="line">	mov	r3, #0</div><div class="line">	str	r3, [fp, #-8]</div><div class="line">	mov	r3, #0</div><div class="line">	str	r3, [fp, #-12]</div><div class="line">	mov	r3, #0</div><div class="line">	str	r3, [fp, #-8]</div><div class="line">	b	.L6</div><div class="line">.L7:</div><div class="line">	ldr	r3, [fp, #-8]</div><div class="line">	mov	r3, r3, asl #1</div><div class="line">	ldr	r2, [fp, #-12]</div><div class="line">	add	r3, r2, r3</div><div class="line">	str	r3, [fp, #-12]</div><div class="line">	ldr	r3, [fp, #-8]</div><div class="line">	add	r3, r3, #1</div><div class="line">	str	r3, [fp, #-8]</div><div class="line">.L6:</div><div class="line">	ldr	r2, [fp, #-8]</div><div class="line">	ldr	r3, [fp, #-16]</div><div class="line">	cmp	r2, r3</div><div class="line">	blt	.L7</div><div class="line">	ldr	r3, [fp, #-12]</div><div class="line">	mov	r0, r3</div><div class="line">	sub	sp, fp, #0</div><div class="line">	@ sp needed</div><div class="line">	ldr	fp, [sp], #4</div><div class="line">	bx	lr</div><div class="line">	.size	for1, .-for1</div><div class="line">	.align	2</div><div class="line">	.global	for2</div><div class="line">	.type	for2, %function</div><div class="line">for2:</div><div class="line">	@ args = 0, pretend = 0, frame = 16</div><div class="line">	@ frame_needed = 1, uses_anonymous_args = 0</div><div class="line">	@ link register save eliminated.</div><div class="line">	str	fp, [sp, #-4]!</div><div class="line">	add	fp, sp, #0</div><div class="line">	sub	sp, sp, #20</div><div class="line">	str	r0, [fp, #-16]</div><div class="line">	ldr	r1, .L13</div><div class="line">.LPIC0:</div><div class="line">	add	r1, pc, r1</div><div class="line">	mov	r3, #0</div><div class="line">	str	r3, [fp, #-8]</div><div class="line">	mov	r3, #0</div><div class="line">	str	r3, [fp, #-12]</div><div class="line">	mov	r3, #0</div><div class="line">	str	r3, [fp, #-8]</div><div class="line">	b	.L10</div><div class="line">.L11:</div><div class="line">	ldr	r3, [fp, #-8]</div><div class="line">	ldr	r2, [fp, #-8]</div><div class="line">	mul	r2, r3, r2</div><div class="line">	ldr	r3, [fp, #-16]</div><div class="line">	sub	r0, r3, #1</div><div class="line">	ldr	r3, .L13+4</div><div class="line">	ldr	r3, [r1, r3]</div><div class="line">	ldr	r3, [r3, r0, asl #2]</div><div class="line">	add	r3, r2, r3</div><div class="line">	ldr	r2, [fp, #-12]</div><div class="line">	add	r3, r2, r3</div><div class="line">	str	r3, [fp, #-12]</div><div class="line">	ldr	r3, [fp, #-8]</div><div class="line">	add	r3, r3, #1</div><div class="line">	str	r3, [fp, #-8]</div><div class="line">.L10:</div><div class="line">	ldr	r2, [fp, #-8]</div><div class="line">	ldr	r3, [fp, #-16]</div><div class="line">	cmp	r2, r3</div><div class="line">	blt	.L11</div><div class="line">	ldr	r3, [fp, #-12]</div><div class="line">	mov	r0, r3</div><div class="line">	sub	sp, fp, #0</div><div class="line">	@ sp needed</div><div class="line">	ldr	fp, [sp], #4</div><div class="line">	bx	lr</div><div class="line">.L14:</div><div class="line">	.align	2</div><div class="line">.L13:</div><div class="line">	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC0+8)</div><div class="line">	.word	nums(GOT)</div><div class="line">	.size	for2, .-for2</div><div class="line">	.section	.rodata @声明只读数据段</div><div class="line">	.align	2</div><div class="line">.LC0: @标号LC0</div><div class="line">	.ascii	&quot;hello ARM!\000&quot; @声明字符串</div><div class="line">	.align	2</div><div class="line">.LC1:</div><div class="line">	.ascii	&quot;for0%d\012\000&quot;</div><div class="line">	.align	2</div><div class="line">.LC2:</div><div class="line">	.ascii	&quot;for1%d\012\000&quot;</div><div class="line">	.align	2</div><div class="line">.LC3:</div><div class="line">	.ascii	&quot;for2%d\012\000&quot;</div><div class="line">	.text @代码段</div><div class="line">	.align	2</div><div class="line">	.global	main @全局符号，main</div><div class="line">	.type	main, %function @main符号的类型为函数</div><div class="line">main:</div><div class="line">	@ args = 0, pretend = 0, frame = 8</div><div class="line">	@ frame_needed = 1, uses_anonymous_args = 0</div><div class="line">	stmfd	sp!, &#123;fp, lr&#125; @将fp,lr寄存器入栈</div><div class="line">	add	fp, sp, #4 @初始化fp寄存器，设置栈帧</div><div class="line">	sub	sp, sp, #8 @开辟栈控件</div><div class="line">	str	r0, [fp, #-8] @保存第一个参数</div><div class="line">	str	r1, [fp, #-12] @保存第二个参数</div><div class="line">	ldr	r3, .L17 @取标号L17处的内容，即“hello ARM!\n”</div><div class="line">.LPIC1: @标号.LPIC1</div><div class="line">	add	r3, pc, r3 @计算“hello ARM!\n”字符串的内存地址</div><div class="line">	mov	r0, r3 @设置参数1</div><div class="line">	bl	puts(PLT) @调用puts函数</div><div class="line">	mov	r0, #5 @程序返回结果为0</div><div class="line">	bl	for0(PLT) @调用函数for0</div><div class="line">	mov	r2, r0 @for0的返回结果</div><div class="line">	ldr	r3, .L17+4</div><div class="line">.LPIC2:</div><div class="line">	add	r3, pc, r3</div><div class="line">	mov	r0, r3</div><div class="line">	mov	r1, r2</div><div class="line">	bl	printf(PLT)</div><div class="line">	mov	r0, #5</div><div class="line">	bl	for1(PLT)</div><div class="line">	mov	r2, r0</div><div class="line">	ldr	r3, .L17+8</div><div class="line">.LPIC3:</div><div class="line">	add	r3, pc, r3</div><div class="line">	mov	r0, r3</div><div class="line">	mov	r1, r2</div><div class="line">	bl	printf(PLT)</div><div class="line">	mov	r0, #5</div><div class="line">	bl	for2(PLT)</div><div class="line">	mov	r2, r0</div><div class="line">	ldr	r3, .L17+12</div><div class="line">.LPIC4:</div><div class="line">	add	r3, pc, r3</div><div class="line">	mov	r0, r3</div><div class="line">	mov	r1, r2</div><div class="line">	bl	printf(PLT)</div><div class="line">	mov	r3, #0</div><div class="line">	mov	r0, r3</div><div class="line">	sub	sp, fp, #4</div><div class="line">	@ sp needed</div><div class="line">	ldmfd	sp!, &#123;fp, pc&#125; @回复，fp的值，并将lr寄存器的值赋值给pc寄存器</div><div class="line">.L18:</div><div class="line">	.align	2</div><div class="line">.L17:</div><div class="line">	.word	.LC0-(.LPIC1+8)</div><div class="line">	.word	.LC1-(.LPIC2+8)</div><div class="line">	.word	.LC2-(.LPIC3+8)</div><div class="line">	.word	.LC3-(.LPIC4+8)</div><div class="line">	.size	main, .-main</div><div class="line">	.ident	&quot;GCC: (GNU) 4.9 20150123 (prerelease)&quot;</div><div class="line">	.section	.note.GNU-stack,&quot;&quot;,%progbits</div></pre></td></tr></table></figure>
<h2 id="处理器架构定义"><a href="#处理器架构定义" class="headerlink" title="处理器架构定义"></a>处理器架构定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.arch armv5te @处理器架构</div><div class="line">.fpu softvfp @协处理类型</div><div class="line">.eabi_attribute 20, 1 @接口属性</div><div class="line">.eabi_attribute 21, 1</div><div class="line">.eabi_attribute 23, 3</div><div class="line">.eabi_attribute 24, 1</div><div class="line">.eabi_attribute 25, 1</div><div class="line">.eabi_attribute 26, 2</div><div class="line">.eabi_attribute 30, 6</div><div class="line">.eabi_attribute 34, 0</div><div class="line">.eabi_attribute 18, 4</div></pre></td></tr></table></figure>
<p>这些指令定义了程序使用的处理器架构，协处理器类型，接口属性</p>
<p>armv5te:表示本程序的代码可以在armv5te及以上的架构处理器上运行，包括armv6,armv7-a</p>
<p>fpt:</p>
<p>​    softvfp:表示使用浮点运算库来模拟协处理运算。取值vfpv2,vfpv3</p>
<p>eabi_attribute：指定了接口属性(Embedded application binary interface,嵌入式应用二进制接口)是arm制订的一套接口规范，Android实现了这套规范</p>
<h2 id="段定义"><a href="#段定义" class="headerlink" title="段定义"></a>段定义</h2><p>段都是很多年前的术语了，现在的高级语言基本上没有直接使用，而是由编译器字节生成的。</p>
<p>使用.section指令来定义</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.section name [, &quot;flags&quot; [,%type [,flag_specifice_arguments]]]</div></pre></td></tr></table></figure>
<p>name:段名</p>
<p>flags:段属性，读，写，可执行</p>
<p>type:段的类型，如：progbits表示段中包含数据，note表示包含的数据非程序本身使用</p>
<p>flag_specifice_arguments：指定平台相关的参数</p>
<p>我们上面定义三个段</p>
<p>.section    .rodata:定义只读段，属性采用默认值</p>
<p>.text:代码段</p>
<p>.section .note.GUN-stack,””,%progbits：定义了.note.GUN-stack段，他的作用是禁止生产可以执行堆栈，用来保护代码安全</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>/<em> 多行注释 </em>/</p>
<p>@单行注释</p>
<h2 id="标号"><a href="#标号" class="headerlink" title="标号"></a>标号</h2><p>在汇编中标号十分常见，当程序跳转时就是使用标号作为跳转目的地，汇编器在编译时会将标号转为地址，标号申明格式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;标号名&gt;:</div><div class="line">	代码...</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">for1:</div><div class="line">	@ args = 0, pretend = 0, frame = 16</div><div class="line">	@ frame_needed = 1, uses_anonymous_args = 0</div><div class="line">	@ link register save eliminated.</div><div class="line">	str	fp, [sp, #-4]!</div><div class="line">	add	fp, sp, #0</div><div class="line">	sub	sp, sp, #20</div><div class="line">	str	r0, [fp, #-16]</div><div class="line">	mov	r3, #0</div><div class="line">	str	r3, [fp, #-8]</div><div class="line">	mov	r3, #0</div><div class="line">	str	r3, [fp, #-12]</div><div class="line">	mov	r3, #0</div><div class="line">	str	r3, [fp, #-8]</div><div class="line">	b	.L6</div></pre></td></tr></table></figure>
<h2 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h2><p>程序中所有以“.”开头的指令都是汇编指令，他不属于ARM指令集。在GAS的文档<a href="https://sourceware.org/binutils/docs/as/Pseudo-Ops.html#Pseudo-Ops" target="_blank" rel="external">Assembler Directives</a>列出了所以得汇编指令</p>
<p>在上面的示例中我们使用到的汇编指令有：</p>
<p>.file:源文件名</p>
<p>.align:代码定制方式，后面的数值为2^次数放</p>
<p>.ascii:声明字符串</p>
<p>.global:声明全局符号。全局符号是指在本程序外可以访问的符号</p>
<p>.type：指定符号的类型。</p>
<p>​    .type    for0, %function表示for0是一个函数</p>
<p>.word：用来存放地址值</p>
<p>​    .word    .LC0-(.LPIC1+8)表示存放一个与地址无关的偏移量</p>
<p>.size:设置指定符号的大小</p>
<p>​    .size    for2, .-for2表示当前地址减去for2符号的地址即为整个for2函数的大小</p>
<p>.ident:编译器表示，没有实际用途，生成可执行程序后值被放到.comment段中</p>
<h2 id="子程序间参数传递"><a href="#子程序间参数传递" class="headerlink" title="子程序间参数传递"></a>子程序间参数传递</h2><p>自程序一般用来完成一个独立的功能，汇编中的函数声明如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.global 函数名</div><div class="line">.type 函数,%function</div><div class="line">函数名:</div><div class="line">	&lt;函数体&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.global myAdd</div><div class="line">.type myAdd,%function</div><div class="line">myAdd:</div><div class="line">	add r0, r0, r1 @两个参数相加</div><div class="line">	mov pc, lr @函数返回</div></pre></td></tr></table></figure>
<p>在ARM汇编中参数传递规则:用R0-R3传递1-4个参数，如果超出用堆栈来传递，R0返回时并保存函数的返回值</p>
<h1 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式"></a>寻址方式</h1><p>通过一定的方法从给出的地址码寻找真实的操作数，叫寻址</p>
<h2 id="立即寻址"><a href="#立即寻址" class="headerlink" title="立即寻址"></a>立即寻址</h2><p>最简单的一种寻址，只能做源操作数，为立即数(常量或常数)</p>
<p>mov r0, #888</p>
<p>mov r1,#0x888</p>
<h2 id="寄存器寻址"><a href="#寄存器寻址" class="headerlink" title="寄存器寻址"></a>寄存器寻址</h2><p>操作数在寄存器中</p>
<p>mov r0,r1</p>
<h2 id="寄存器移位寻址"><a href="#寄存器移位寻址" class="headerlink" title="寄存器移位寻址"></a>寄存器移位寻址</h2><p>arm特有的寻址方法，他和寄存器寻址差不多，只是在寻址前先对操作数移位，它共有下面5种</p>
<p>lsl:逻辑左移，低位补0</p>
<p>lsr:逻辑右移，高位补0</p>
<p>asr:算术右移，移位过程中符号不变，也就是源操作室为正数，移位后高位补0，负数补1</p>
<p>ror：循环右移，移位后移除的低位填入移除的高位</p>
<p>rrx:带扩展的循环右移，操作数右移一位，移位空出的高位用C标志(进位标志)的值填充</p>
<p>mov r0, r1, lsl #2</p>
<h2 id="寄存器间接寻址"><a href="#寄存器间接寻址" class="headerlink" title="寄存器间接寻址"></a>寄存器间接寻址</h2><p>源操作寄存器里面给出的是操作数的地址指针，将源寄存器值作为地址，并取出真实值赋值给目的寄存器</p>
<p>ldr r0, [r1]</p>
<h2 id="基址寻址"><a href="#基址寻址" class="headerlink" title="基址寻址"></a>基址寻址</h2><p>基址寄存器的值+偏移量在作为地址，取出来值。一般用于，数组，查表</p>
<p>ldr r0, [r1, #-4] @将r1寄存器的值-4作为地址，然后在取出改地址的值赋值给r0寄存器</p>
<h2 id="多寄存器寻址"><a href="#多寄存器寻址" class="headerlink" title="多寄存器寻址"></a>多寄存器寻址</h2><p>改指令最多可以完成16个通用寄存器值得传送</p>
<p>ldmia r0, {r1,r2,r3,r4}</p>
<p>ldm:数据加载指令，ia为指令后缀，表示每执行一次操作，r0寄存器的值自增1个字(arm中表示32的数值)</p>
<p>上述指令结果为：r1=[r0],r2=[r0+#4],r3=[r0+#8],r4=[r0+#12]</p>
<h2 id="堆栈寻址"><a href="#堆栈寻址" class="headerlink" title="堆栈寻址"></a>堆栈寻址</h2><p>arm特有的寻址，有ldmfa/stmfa,ldmea/stmea,ldmfd/stmfd,ldmed/stmed。ldm，stm为指令前缀，表示多寄存器寻址。fa,ea,fd,ed为指令后缀</p>
<p>stmfd sp!, {r1-r7, lr} @将r1-r7,lr入栈。常用于调用子程序前的现场保护</p>
<p>ldmfd sp!, {r1-r7,lr} @数据出栈，数据一次放入r1-r7,lr。常用于子程序调用完毕，现在恢复</p>
<h2 id="块拷贝寻址"><a href="#块拷贝寻址" class="headerlink" title="块拷贝寻址"></a>块拷贝寻址</h2><p>连续地址数据在存储器从一个位置拷贝到另一位置。ldmia/stmia,ldmda/stmda,ldmid/stmid,ldmdb/stmdb</p>
<p>ldmia r0!, {r1-r3} @从r0寄存器指向的存储单元中读取3个字到r1-r3</p>
<p>stmia r0!, {r1-r3} @将存储器r1-r3的值一次存到r0寄存器指向的内存单元</p>
<h2 id="相对寻址"><a href="#相对寻址" class="headerlink" title="相对寻址"></a>相对寻址</h2><p>以程序计数器pc的值为基址，指令中的地址作为偏移量，相加得到操作数的地址</p>
<p>bl loop</p>
<p>​    …</p>
<p>loop:</p>
<p>​    …</p>
<p>这里的跳转就是相对寻址</p>
<h1 id="arm指令集"><a href="#arm指令集" class="headerlink" title="arm指令集"></a>arm指令集</h1><h2 id="指令格式"><a href="#指令格式" class="headerlink" title="指令格式"></a>指令格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;opcode&gt; &#123;&lt;cond&gt;&#125; &#123;s&#125;&#123;.w|.n&#125; &lt;rd&gt;,&lt;rn&gt;&#123;,&lt;operand2&gt;&#125;</div></pre></td></tr></table></figure>
<p>opcode:指令助记符，mov,add</p>
<p>cond:指令执行条件，取值如下</p>
<table>
<thead>
<tr>
<th>条件助记符</th>
<th>标志位</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>eq</td>
<td>z=1</td>
<td>等于</td>
</tr>
<tr>
<td>ne</td>
<td>z=0</td>
<td>不等于</td>
</tr>
<tr>
<td>cs/hs</td>
<td>c=1</td>
<td>无符号数大于或等于</td>
</tr>
<tr>
<td>cc/lo</td>
<td>c=0</td>
<td>无符号数小于</td>
</tr>
<tr>
<td>mi</td>
<td>n=1</td>
<td>负数</td>
</tr>
<tr>
<td>pl</td>
<td>n=0</td>
<td>正数或0</td>
</tr>
<tr>
<td>vs</td>
<td>v=1</td>
<td>溢出</td>
</tr>
<tr>
<td>vc</td>
<td>v=0</td>
<td>没有溢出</td>
</tr>
<tr>
<td>hi</td>
<td>c=1,z=0</td>
<td>无符号数大于</td>
</tr>
<tr>
<td>ls</td>
<td>c=0，z=1</td>
<td>无符号数大于或等于</td>
</tr>
<tr>
<td>ge</td>
<td>n=v</td>
<td>有符号数大于</td>
</tr>
<tr>
<td>lt</td>
<td>n!=v</td>
<td>有符号大于</td>
</tr>
<tr>
<td>gt</td>
<td>z=0,n=v</td>
<td>有符号数大于</td>
</tr>
<tr>
<td>le</td>
<td>z=1，n!=v</td>
<td>有符号数小于或等于</td>
</tr>
<tr>
<td>al</td>
<td>任何</td>
<td>无条件执行(指令默认条件)</td>
</tr>
</tbody>
</table>
<p>s:指定这条指令是否影响CPSR寄存器的值，如：adds,subs</p>
<p>.w/.n:指令宽度说明符，armv6t2及更高版本的thumb代码中，部分指令的编码为16位，也可以是32位，正常情况下代码都是有效的，默认会生成16为，如果想要生成32位的编码，则需要在指令后面加.w说明符。无论是arm代码还是thumb(armv6t2或更高)代码，都可以使用.w。如果需要将指令汇编为16位编码，则需要添加.n说明符号</p>
<p>rd:目的寄存器</p>
<p>rn：为第一个操作数寄存器</p>
<p>operand2:第二个操作数，可以是立即数，寄存器，寄存器移位操作</p>
<p>mov r0, #2</p>
<p>add r1, r2, r3</p>
<p>sub r2, r3, r4, lsl #2</p>
<h2 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h2><p>也称分支指令，作用是改变指令的执行流程，arm中有两个方式可以实现，使用跳转指令和直接赋值pc寄存器</p>
<h3 id="b"><a href="#b" class="headerlink" title="b"></a>b</h3><p>b{cond} label</p>
<p>满足条件就跳转到标号出，bne label,表示z=0时跳转到label处</p>
<h3 id="bl"><a href="#bl" class="headerlink" title="bl"></a>bl</h3><p>bl{cond} label</p>
<p>带链接的跳转指令，如果条件满足，执行bl指令是，他先将当前指令的下调指令的地址拷贝到r14(lr)寄存器，然后跳转到label标号处，常用于子程序，在子程序末尾就可以使用mov pc,lr返回到主程序</p>
<h3 id="bx"><a href="#bx" class="headerlink" title="bx"></a>bx</h3><p>带状态切换的跳转指令，如果条件满足，执行bx时，处理器会先判断rm的位[0]是否为1，如果为1则跳转时自动将cpsr寄存器的标志t置为1，并将目标地址出的代码解释为thumb代码来执行，即处理器切换到了thumb状态。反之rm的位[0]为0，则跳转时自动将cpsr寄存器t置为0，并将目标地址处的代码解释为arm代码执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">	.code 32</div><div class="line">	...</div><div class="line">	add r0, thumbcode+1</div><div class="line">	bx r0</div><div class="line">thumbcode:</div><div class="line">	.code 16</div><div class="line">	...</div></pre></td></tr></table></figure>
<h3 id="blx"><a href="#blx" class="headerlink" title="blx"></a>blx</h3><p>带链接和状态切换的条状指令，就是bl和bx功能的结合，除了设置链接寄存器，还根据rm[0]的值来切换处理器状态</p>
<h2 id="存储器访问指令"><a href="#存储器访问指令" class="headerlink" title="存储器访问指令"></a>存储器访问指令</h2><p>用于从存储器加载数据，存储数据到存储器，寄存器与存储器间数据交换</p>
<h3 id="ldr"><a href="#ldr" class="headerlink" title="ldr"></a>ldr</h3><p>从存储器加载到数据到寄存器中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ldr&#123;type&#125;&#123;cond&#125; rd,label</div><div class="line"></div><div class="line">ldrd&#123;type&#125;&#123;cond&#125; rd,rd2,label</div></pre></td></tr></table></figure>
<p>type：指定操作数的数据大小</p>
<table>
<thead>
<tr>
<th>type</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>b</td>
<td>无符号字节(加载时0扩展为32位)</td>
</tr>
<tr>
<td>sb</td>
<td>有符号字节(加载时符号位扩展为32位)</td>
</tr>
<tr>
<td>h</td>
<td>无符号半字(0扩展32位)</td>
</tr>
<tr>
<td>sh</td>
<td>有符号半字(符号位扩展为32位)</td>
</tr>
</tbody>
</table>
<p>cond：执行条件，取值为上面的表</p>
<p>rd:加载完要存储到的寄存器</p>
<p>label:要读取的内存地址，有三种表示方法</p>
<p>​    直接偏移量:ldr r8,[r9,#04]、ldr r8,[r9],#04</p>
<p>​    寄存器偏移:ldr r8,[r9,r10,#04]</p>
<p>ldrd:一次加载双字数据，到r2,rd2寄存器中</p>
<p>ldrd r0,r1,label12 @从标号label12指向的内存地址加载两个字</p>
<h2 id="str"><a href="#str" class="headerlink" title="str"></a>str</h2><p>用于存储数据到指定的存储单元中</p>
<p>str{type}{cond} rd,label</p>
<p>strd{cond} rd,rd2,label</p>
<p>str r0, [r2,#04] @将r0寄存器的数据存储到r2+4地址的值</p>
<h2 id="ldm"><a href="#ldm" class="headerlink" title="ldm"></a>ldm</h2><p>可以从指定的存储单元加载多个数据到一个寄存器列表</p>
<p>ldm{add_mode}{cond} rn{!} reglist</p>
<p>add_mode:</p>
<table>
<thead>
<tr>
<th>addr_mode</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>ia</td>
<td>increase after,基址寄存器在执行指令之后增加，默认值</td>
</tr>
<tr>
<td>ib</td>
<td>increase before,之间增加(仅arm支持)</td>
</tr>
<tr>
<td>da</td>
<td>decrease after,之后减少(仅arm支持)</td>
</tr>
<tr>
<td>db</td>
<td>decrease before,之间减少</td>
</tr>
<tr>
<td>fd</td>
<td>满递减堆栈。高地址到低地址，堆栈指针指向最后一个入栈的有效数据项</td>
</tr>
<tr>
<td>fa</td>
<td>满递增堆栈。低地址到高地址，堆栈指针指向下一个要存放的空地址</td>
</tr>
<tr>
<td>ed</td>
<td>空递减堆栈。高地址到低地址</td>
</tr>
<tr>
<td>ea</td>
<td>空递增堆栈。低地址到高地址</td>
</tr>
</tbody>
</table>
<p>rn为基地存储器，</p>
<p>!可选后缀：将最终地址协会rn寄存器</p>
<p>reglist:用来存储数据的寄存器列表，用大括号括起来，可以用-表示多个连续的寄存器，如果不是连续的需要写出来</p>
<p>ldm R0!, {r1-r3} @依次加载r0指向的存储单元的数据到r1,r2,r3</p>
<h2 id="stm"><a href="#stm" class="headerlink" title="stm"></a>stm</h2><p>将一个寄存器列表数据存储到指定的存储单元</p>
<p>stm{addr_mode}{cond} rn{!} reglist</p>
<p>stmdb r1!, {r3-r6, r11} @将r3-r6,r11寄存器的内容存储到r1指向的存储单元</p>
<p>stmfd sp!, {r3-r7} @r3-r7寄存器压入堆栈，等价于stmdb sp!, {r3-r7}</p>
<h2 id="push"><a href="#push" class="headerlink" title="push"></a>push</h2><p>将寄存器的值推入满减堆栈</p>
<p>push{cond} reglist</p>
<p>push {r0, r4-r7} @r0,r4-r7寄存器内容入栈</p>
<h2 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h2><p>从满递减堆栈中弹出数据到寄存器</p>
<p>pop{cond} reglist</p>
<p>pop {r0, r4-r7} @将r0,r4-r7寄存器从堆栈中弹出</p>
<h2 id="swp"><a href="#swp" class="headerlink" title="swp"></a>swp</h2><p>寄存器之间交换数据</p>
<p>swp{b}{cond} rd, rm, [rn]</p>
<p>b：可选，交换字节，否则交换32位字</p>
<p>rd:</p>
<p>//TODO</p>
<h2 id="数据处理指令"><a href="#数据处理指令" class="headerlink" title="数据处理指令"></a>数据处理指令</h2><p>包括传送，算术，逻辑，比较。除了比较指令其他的都可以选用s后缀，来决定是否影响标志位</p>
<h3 id="mov"><a href="#mov" class="headerlink" title="mov"></a>mov</h3><p>将8位立即数或寄存器的内容传送到目标寄存器</p>
<p>mov{cond}{s} rd,operand2</p>
<p>mov r0, #8 @r0=8</p>
<p>mov r1, r0 @r1=r0</p>
<p>movs r2, r1, lsl #2 @r2=r1*4，影响状态标志位</p>
<h3 id="mvn"><a href="#mvn" class="headerlink" title="mvn"></a>mvn</h3><p>将8位的立即数或寄存器的值按位取反后传递到目标</p>
<p>mvn r0, #0xff @r0=ffffff00</p>
<p>mvn r1, r2 @将寄存器数据取反后存入r1</p>
<h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><p>加法</p>
<p>add r0, r1 #2 @r0=r1+2</p>
<p>adds r0, r1,r2 @r0=r1+r2,影响标志位</p>
<p>add r0,r1,lsl #3 @r0=r1*8</p>
<h3 id="adc"><a href="#adc" class="headerlink" title="adc"></a>adc</h3><p>带进位加法指令，功能为rn+operand2+cpsr寄存器c条件标志位的值，存入rd</p>
<p>adc{cond}{s} rd,rn,operand2</p>
<p>add r0,r0,r2</p>
<p>add r1,r1,r3 @两条指令完成64位加法，r1,r0=r1,r0+r3,r2</p>
<h3 id="sub"><a href="#sub" class="headerlink" title="sub"></a>sub</h3><p>减法，rn-operand2值，结果保存到rd</p>
<p>sub r0,r1,#4 @r0=r1-4</p>
<p>sub r0,r1,r2 @r0=r1-r2，影响标志位</p>
<h3 id="rsb"><a href="#rsb" class="headerlink" title="rsb"></a>rsb</h3><p>逆向减法指令，operand2-rn，结果保存到rd</p>
<p>rsb{cond}{s}rd,rn,opearand2</p>
<p>rsb r0,r1 #0x1234 @r0=0x1234-r1</p>
<p>rub r0,r1 @r0=-r1</p>
<h4 id="sbc"><a href="#sbc" class="headerlink" title="sbc"></a>sbc</h4><p>带进位减法，rn-opearnad2,在减去cpsr寄存器c值</p>
<p>sbc{cond}{s} rd,rn,operand2</p>
<p>subs r0,r0,r2</p>
<p>sbc r1,r1,r3 @64位减法，r1,r0=r1,r0-r2,r3</p>
<h3 id="rsc"><a href="#rsc" class="headerlink" title="rsc"></a>rsc</h3><p>带进位逆向减法指令，operand2-rn-c=rd</p>
<p>rsc{cond} rd,rn,operand2</p>
<p>rsbs r2,r0,#0</p>
<p>rsc r3,r1,#0 @64为数取反，r3,r2=r1,r0</p>
<h3 id="mul"><a href="#mul" class="headerlink" title="mul"></a>mul</h3><p>32位乘法，rm*rn，结果低32位保存到rd</p>
<p>mul{cond}{s} rd,rm ,rn</p>
<p>mum r0,r1,r2 @r0=r1*r2</p>
<p>muls r0,r2,r3 @r0=r2*r3,影响n和z</p>
<h3 id="mls"><a href="#mls" class="headerlink" title="mls"></a>mls</h3><p>mls{cond}{s} rd,rm,rn,ra</p>
<p>rm寄存器的值*rn寄存器的值，然后在从ra寄存器的值中减去上一步的乘积</p>
<p>mls r0,r1,r2,r3 @r0=r3-r1*r2</p>
<h3 id="mla"><a href="#mla" class="headerlink" title="mla"></a>mla</h3><p>mla{cond}{s} rd,rm,rn,ra</p>
<p>将rm*rn在加ra</p>
<p>mla r0,r1,r2,r3 @r0=r1*r2+r3</p>
<h3 id="umull"><a href="#umull" class="headerlink" title="umull"></a>umull</h3><p>umull{cond}{s} rdLo,rdHi,rm,rn</p>
<p>将无符号rm寄存器的值和无符号寄存器rn的值相乘，然后将结果的低32位存入rdLo,高32位存入rdHi寄存器</p>
<p>umull r0,r1,r2,r3 @r1,r0=r2*r3</p>
<h3 id="umlal"><a href="#umlal" class="headerlink" title="umlal"></a>umlal</h3><p>umlal{cond}{s} rdLo,rdHi,rm,rn</p>
<p>将无符号rm寄存器的值和无符号寄存器rn的值相乘,然后将64位的结果与rdHi,rdLo组成的64位数相加，然后在按顺序放入寄存器</p>
<p>umlal r0,r1,r2,r3 @r1,r0=r2*r3+(r1,r0)</p>
<h3 id="smull"><a href="#smull" class="headerlink" title="smull"></a>smull</h3><p>smull{cond}{s} rdLo,rdHi,rm,rn</p>
<p>将rm寄存器的值和寄存器rn的值做为有符号数相乘，结果低32位放入rdLo,高32位存入rdHi</p>
<p>smull r0,r1,r2,r3 @r1,r0=r2*r3</p>
<h3 id="smlal"><a href="#smlal" class="headerlink" title="smlal"></a>smlal</h3><p>将rm寄存器的值和寄存器rn的值做为有符号数相乘，然后将结果加上rdHi,rdLo组成的64位数，结果低32位放入rdLo,高32位存入rdHi</p>
<p>smlal r0,r1,r2,r3 @r1,r0=r2*r3+(r1,r0)</p>
<h3 id="smlad"><a href="#smlad" class="headerlink" title="smlad"></a>smlad</h3><p>smlad{cond}{s} rd,rm,rn,ra</p>
<p>将rm寄存器低半字节和rn寄存器低半字节相乘，然后将rm寄存器的高半字节和rn的高半字节相乘，最后将两个乘积//TODO</p>
<h3 id="smlsd"><a href="#smlsd" class="headerlink" title="smlsd"></a>smlsd</h3><h3 id="sdiv"><a href="#sdiv" class="headerlink" title="sdiv"></a>sdiv</h3><p>有符号除法指令</p>
<p>sdiv{cond}rd,rm,rn</p>
<p>sdiv r0,r1,r2 @r0=r1/r2</p>
<h3 id="udiv"><a href="#udiv" class="headerlink" title="udiv"></a>udiv</h3><p>无符号除法</p>
<p>udiv{cond} rd,rm,rn</p>
<p>udiv r0,r1,r2 @r0=r1/r2</p>
<h3 id="asr"><a href="#asr" class="headerlink" title="asr"></a>asr</h3><p>asr{cond}{s} rd,rm,opearnd2</p>
<p>算术右移指令。rm寄存器算术右移opearnd2位，高位用符号位填充，结果保存到rd</p>
<p>asr r0,r1,#2</p>
<h3 id="and"><a href="#and" class="headerlink" title="and"></a>and</h3><p>逻辑与</p>
<p>and{cond}{s} rd,rn,operand2</p>
<p>and r0,r0,#1 @取r0得最低1位</p>
<h3 id="orr"><a href="#orr" class="headerlink" title="orr"></a>orr</h3><p>逻辑或</p>
<p>orr{cond}{s} rd,rn,operand2</p>
<p>orr r0,r0,#0xf @保留r0低4位，其余位清0</p>
<h3 id="eor"><a href="#eor" class="headerlink" title="eor"></a>eor</h3><p>异或</p>
<p>eor{cond}{s} rd,rn,opearnd2</p>
<p>eor r0,r1,r2 @r0=r1^r2</p>
<h3 id="bic"><a href="#bic" class="headerlink" title="bic"></a>bic</h3><p>位清除指令。功能是讲operand2得值取反，然后与rn的值，结果保存到rd</p>
<p>bic{cond}{s} rd,rn,operand2</p>
<p>bic r0,r0,#0x0f @清除r0低4位</p>
<h3 id="lsl"><a href="#lsl" class="headerlink" title="lsl"></a>lsl</h3><p>逻辑左移，rm的值左移operand2,空位补0</p>
<p>lsl{cond}{s} rd,rm,operand2</p>
<p>lsl r0,r1,#2 @r0=r1*2^2</p>
<h3 id="lsr"><a href="#lsr" class="headerlink" title="lsr"></a>lsr</h3><p>逻辑右移指令。rm逻辑右移operand2位，空位补0</p>
<p>lsr{cond}{s} rd,rm,operand2</p>
<p>lsr r0,r1#2 @r0=r1/(2^2)</p>
<h4 id="ror"><a href="#ror" class="headerlink" title="ror"></a>ror</h4><p>循环右移，rm的值循环右移operand2位，右边移除的值放回左边</p>
<p>ror{cond}{s} rd,rm,operand2</p>
<p>ror r1,r1,#1</p>
<h3 id="rrx"><a href="#rrx" class="headerlink" title="rrx"></a>rrx</h3><p>带扩展位的循环右移，将rm寄存器右移1位，最高位用标志位填充</p>
<p>rrx r1,r1</p>
<h3 id="cmp"><a href="#cmp" class="headerlink" title="cmp"></a>cmp</h3><p>cmp{cond} rn,operand2</p>
<p>rn-operand2和subs指令差不多，但是他不保存计算结果只设置标志位</p>
<p>cmp r0,#0 @判断r0寄存器的值是否为0</p>
<h3 id="cmn"><a href="#cmn" class="headerlink" title="cmn"></a>cmn</h3><p>cmn{cond} rn,operand2</p>
<p>rn+operand2和adds差不多，但不保存计算结果，只设置标志位</p>
<p>cmn r0,r1</p>
<h3 id="tst"><a href="#tst" class="headerlink" title="tst"></a>tst</h3><p>tst{cond} rn,operand2</p>
<p>rn&amp;operand2和ands差不多，但不保存结果，只设置标志位</p>
<p>tst r0,#1 @判断r0寄存器最低位是否为1</p>
<h3 id="teq"><a href="#teq" class="headerlink" title="teq"></a>teq</h3><p>teq{cond} rn,operand2</p>
<p>rn^operand2和eors差不多，但不保存结果，只设置标志位</p>
<p>teq r0,r1 @判断r0和r1是否相等</p>
<h2 id="其他指令"><a href="#其他指令" class="headerlink" title="其他指令"></a>其他指令</h2><h3 id="swi"><a href="#swi" class="headerlink" title="swi"></a>swi</h3><p>软中断指令，用于产生中断，可以从用户模式切换的管理模式</p>
<p>swi{cond},immed_24</p>
<p>immed_24:24位的中断号，在Android中，系统调用为0号中断，使用r7寄存器存放系统调用，使用r0-r3传递前4个参数，对应大于4个参数的调用，剩余的采用堆栈传递，如：exit(0)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mov r0,#0</div><div class="line">mov r7,#1</div><div class="line">swi #0</div></pre></td></tr></table></figure>
<h3 id="nop"><a href="#nop" class="headerlink" title="nop"></a>nop</h3><p>空操作，一般用于字节码对齐</p>
<h3 id="mrs"><a href="#mrs" class="headerlink" title="mrs"></a>mrs</h3><p>读状态寄存器</p>
<p>msr rd,psr</p>
<p>psr取值可以是cpsr,spsr</p>
<p>msr r0,cpsr @读取cpsr寄存器到r0寄存器中</p>
<h3 id="msr"><a href="#msr" class="headerlink" title="msr"></a>msr</h3><p>写状态寄存器</p>
<p>msr rd,psr_fields,operand2</p>
<p>psr取值cpsr,spsr</p>
<table>
<thead>
<tr>
<th>field</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>c</td>
<td>控制域[7:0]</td>
</tr>
<tr>
<td>x</td>
<td>扩展域[15:8]</td>
</tr>
<tr>
<td>s</td>
<td>状态域[23:16]</td>
</tr>
<tr>
<td>f</td>
<td>标志位[31:24]</td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mrs r0,cpsr @读取cpsr值到r0</div><div class="line"></div><div class="line">bic r0,r0,#0x80 @清除r0寄存器第7位</div><div class="line"></div><div class="line">msr cpsr_c,r0 @开启irq中断</div><div class="line"></div><div class="line">mov pc,lr @子程序返回</div></pre></td></tr></table></figure>
<h1 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h1><p>这里我写一个arm版的hello world</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">	.arch armv5te</div><div class="line">	.fpu softvfp</div><div class="line">	.file	&quot;hello.c&quot;</div><div class="line">	.section	.rodata //只读数据段</div><div class="line">	.align	2 //4字节对齐</div><div class="line">.LC0:</div><div class="line">	.ascii	&quot;hello ARM!\000&quot; //字符串，一定要以\0结尾，不然他会一直读取直到\0才结束</div><div class="line">.LC1:</div><div class="line">	.ascii	&quot;hello world!\0&quot;</div><div class="line">.LC2:</div><div class="line">	.ascii	&quot;ha!&quot;</div><div class="line"></div><div class="line">	.text //指令段</div><div class="line">	.align	2</div><div class="line">	.global	main //申明为全局</div><div class="line">	.type	main, %function //类型为函数</div><div class="line">main:</div><div class="line">	@ args = 0, pretend = 0, frame = 8</div><div class="line">	@ frame_needed = 1, uses_anonymous_args = 0</div><div class="line">	stmfd	sp!, &#123;fp, lr&#125; //将fp,lr压栈</div><div class="line">	add	fp, sp, #4 @初始化fp寄存器，设置栈帧</div><div class="line">	sub	sp, sp, #8 @开辟栈控件</div><div class="line">	str	r0, [fp, #-8] @保存第一个参数</div><div class="line">	str	r1, [fp, #-12] @保存第二个参数</div><div class="line">	ldr	r3, .L3 @从l3标号加载一个字地址</div><div class="line">.LPIC0:</div><div class="line">	add r3, pc, r3 @把字符串的相对位置+pc地址就是这个字符串的绝对地址 </div><div class="line">	mov	r0, r3 @设置第一个参数</div><div class="line">	bl	puts(PLT) @调用puts函数</div><div class="line">	ldr	r3, .L3+4</div><div class="line">.LPIC1:</div><div class="line">	add	r3, pc, r3</div><div class="line">	mov	r0, r3</div><div class="line">	bl	puts(PLT)</div><div class="line">	ldr	r3, .L3+8</div><div class="line">.LPIC2:</div><div class="line">	add	r3, pc, r3</div><div class="line">	mov	r0, r3</div><div class="line">	bl	puts(PLT)</div><div class="line">	mov	r3, #0</div><div class="line">	mov	r0, r3</div><div class="line">	sub	sp, fp, #4</div><div class="line">	@ sp needed</div><div class="line">	ldmfd	sp!, &#123;fp, pc&#125;</div><div class="line"></div><div class="line">.L3:</div><div class="line">	.word	.LC0-(.LPIC0+8)</div><div class="line">	.word	.LC1-(.LPIC1+8)</div><div class="line">	.word	.LC2-(.LPIC2+8)</div><div class="line">	.size	main, .-main</div><div class="line">	.ident	&quot;GCC: (GNU) 4.9 20150123 (prerelease)&quot;</div><div class="line">	.section	.note.GNU-stack,&quot;&quot;,%progbits</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ARM汇编程序结构&quot;&gt;&lt;a href=&quot;#ARM汇编程序结构&quot; class=&quot;headerlink&quot; title=&quot;ARM汇编程序结构&quot;&gt;&lt;/a&gt;ARM汇编程序结构&lt;/h1&gt;&lt;p&gt;Android中使用的ARM汇编是GUN ARM汇编，用到的编译器是GAS(GUN 
    
    </summary>
    
      <category term="ARM" scheme="http://i.woblog.cn/categories/ARM/"/>
    
    
      <category term="ARM汇编" scheme="http://i.woblog.cn/tags/ARM%E6%B1%87%E7%BC%96/"/>
    
  </entry>
  
  <entry>
    <title>关于ARM你必须知道的</title>
    <link href="http://i.woblog.cn/2016/08/10/about-arm/"/>
    <id>http://i.woblog.cn/2016/08/10/about-arm/</id>
    <published>2016-08-10T16:42:13.000Z</published>
    <updated>2016-11-21T15:12:36.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是ARM"><a href="#什么是ARM" class="headerlink" title="什么是ARM"></a>什么是ARM</h1><p>arm是一个商标，是一个公司的名字，一系列的处理器有点和java差不多</p>
<h1 id="arm处理器"><a href="#arm处理器" class="headerlink" title="arm处理器"></a>arm处理器</h1><p>arm处理器和inter处理器都差不多，他们都有寄存器，寄存器是处理器里面的高速存储部件，可以用来暂存指令，数据和地址。高级语言中的变量，常量，结构体，类等到了ARM汇编语言中，就是使用寄存器保存值或者内存的地址。当然寄存器的数量是有限制的，ARM处理器有37个32位的寄存器，31个通用寄存器，6个装填寄存器，另外ARM处理支持7种运行模式：</p>
<p>用户模式(usr)：正常的程序执行状态</p>
<p>快速中断模式(fiq):高速数据传输或通道处理</p>
<p>外部中断模式(irq)：通用的中断处理</p>
<p>管理模式(svc):操作系统使用的保护模式</p>
<p>数据访问终止模式(abt):当数据或质量预取终止时进入该模式，可用于虚拟存储以及存储保护</p>
<p>系统模式(sys)：运行在具有特权的操作系统任务</p>
<p>未定义指令终止模式(und)：当执行未定义的指令时进入该模式</p>
<p>这些模式的切换可以通过软件改变，外部中断或异常处理来改变。不同的模式下，处理器使用的寄存器不尽相同并且可供访问的资源也不一样，除了用户模式，其他都是特权模式(处理器可以访问受保护的系统资源)</p>
<p>用户模式:可访问不分组寄存器R0-R7，分组寄存器R8-R14,程序计算器R15(PC)和当前程序的状态寄存器CPSR=R16</p>
<h1 id="工作状态"><a href="#工作状态" class="headerlink" title="工作状态"></a>工作状态</h1><p>ARM处理器有两种工作状态，ARM状态与Thumb状态，处理器可以自由在这两种状态间切换。当为ARM状态时，执行32位字对齐的ARM指令，处于Thumb状态时，执行16位对齐的Thumb，他们的寄存器状态分别为：</p>
<p>Thumb：R0-R7 = ARM:R0-R7</p>
<p>Thumb:CPSR = ARM:CPSR</p>
<p>Thumb:FP = ARM:R11</p>
<p>Thumb:IP = ARM:R12</p>
<p>Thumb:SP = ARM:R13</p>
<p>Thumb:LR = ARM:R14</p>
<p>Thumb:PC = ARM:R15</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是ARM&quot;&gt;&lt;a href=&quot;#什么是ARM&quot; class=&quot;headerlink&quot; title=&quot;什么是ARM&quot;&gt;&lt;/a&gt;什么是ARM&lt;/h1&gt;&lt;p&gt;arm是一个商标，是一个公司的名字，一系列的处理器有点和java差不多&lt;/p&gt;
&lt;h1 id=&quot;arm处理器
    
    </summary>
    
      <category term="ARM" scheme="http://i.woblog.cn/categories/ARM/"/>
    
    
      <category term="ARM" scheme="http://i.woblog.cn/tags/ARM/"/>
    
  </entry>
  
  <entry>
    <title>详解gcc的四个编译步骤</title>
    <link href="http://i.woblog.cn/2016/08/10/gcc-compile-step/"/>
    <id>http://i.woblog.cn/2016/08/10/gcc-compile-step/</id>
    <published>2016-08-10T11:16:21.000Z</published>
    <updated>2016-11-21T15:12:36.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>GNU编译器套件（GNU Compiler Collection），他提供了包括C、C++、Objective-C、Fortran、Java、Ada和Go语言的编译器，也包括了这些语言的库（如libstdc++、libgcj等等）。GCC的初衷是为GNU操作系统专门编写的一款编译器。GNU系统是彻底的自由软件。此处，“自由”的含义是它尊重用户的自由。</p>
<h1 id="gcc基本使用"><a href="#gcc基本使用" class="headerlink" title="gcc基本使用"></a>gcc基本使用</h1><p>一般的命令格式为：gcc [选项] 需要编译的文件 [选项] [编译后的文件]</p>
<p>如：我们编译一个hello.c程序</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gcc hello.c #生成a.out </div><div class="line">gcc -o hello hello.c #生成hello,gcc hello.c -o hello</div></pre></td></tr></table></figure>
<p>上面这一条指令其实执行了四个步骤，预处理，汇编，编译，链接。下面我们一步一步来分析下他每步完成了什么</p>
<h1 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h1><p>处理预处理指令，他会把#include包含的头文件都拷贝进来，#defin，#if。可以通过-E来查看这一步</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -E hello.c -o hello.i</div></pre></td></tr></table></figure>
<p>生成的hello.i文件内容如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div></pre></td><td class="code"><pre><div class="line"># 1 "hello.c"</div><div class="line"># 1 "&lt;built-in&gt;"</div><div class="line"># 1 "&lt;command-line&gt;"</div><div class="line"># 1 "hello.c"</div><div class="line"># 1 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/stdio.h" 1</div><div class="line"># 49 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/stdio.h"</div><div class="line"># 1 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/sys/cdefs.h" 1</div><div class="line"># 77 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/sys/cdefs.h"</div><div class="line"># 1 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/sys/cdefs_elf.h" 1</div><div class="line"># 78 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/sys/cdefs.h" 2</div><div class="line"># 547 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/sys/cdefs.h"</div><div class="line"># 1 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/android/api-level.h" 1</div><div class="line"># 548 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/sys/cdefs.h" 2</div><div class="line"># 50 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/stdio.h" 2</div><div class="line"># 1 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/sys/types.h" 1</div><div class="line"># 33 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/sys/types.h"</div><div class="line"># 1 "/Users/renpingqing/Documents/android/android-ndk-r11c/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/lib/gcc/arm-linux-androideabi/4.9/include/stddef.h" 1 3 4</div><div class="line"># 147 "/Users/renpingqing/Documents/android/android-ndk-r11c/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/lib/gcc/arm-linux-androideabi/4.9/include/stddef.h" 3 4</div><div class="line">typedef int ptrdiff_t;</div><div class="line"># 212 "/Users/renpingqing/Documents/android/android-ndk-r11c/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/lib/gcc/arm-linux-androideabi/4.9/include/stddef.h" 3 4</div><div class="line">typedef unsigned int size_t;</div><div class="line"># 34 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/sys/types.h" 2</div><div class="line"># 1 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/stdint.h" 1</div><div class="line"># 31 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/stdint.h"</div><div class="line"># 1 "/Users/renpingqing/Documents/android/android-ndk-r11c/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/lib/gcc/arm-linux-androideabi/4.9/include/stddef.h" 1 3 4</div><div class="line"># 324 "/Users/renpingqing/Documents/android/android-ndk-r11c/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/lib/gcc/arm-linux-androideabi/4.9/include/stddef.h" 3 4</div><div class="line">typedef unsigned int wchar_t;</div><div class="line"># 32 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/stdint.h" 2</div><div class="line"># 1 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/sys/_types.h" 1</div><div class="line"># 40 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/sys/_types.h"</div><div class="line"># 1 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/machine/_types.h" 1</div><div class="line"># 39 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/machine/_types.h"</div><div class="line">typedef signed char __int8_t;</div><div class="line">typedef unsigned char __uint8_t;</div><div class="line">typedef short __int16_t;</div><div class="line">typedef unsigned short __uint16_t;</div><div class="line">typedef int __int32_t;</div><div class="line">typedef unsigned int __uint32_t;</div><div class="line"></div><div class="line">typedef long long __int64_t;</div><div class="line"></div><div class="line">typedef unsigned long long __uint64_t;</div><div class="line"></div><div class="line"></div><div class="line">typedef __int8_t __int_least8_t;</div><div class="line">typedef __uint8_t __uint_least8_t;</div><div class="line">typedef __int16_t __int_least16_t;</div><div class="line">typedef __uint16_t __uint_least16_t;</div><div class="line">typedef __int32_t __int_least32_t;</div><div class="line">typedef __uint32_t __uint_least32_t;</div><div class="line">typedef __int64_t __int_least64_t;</div><div class="line">typedef __uint64_t __uint_least64_t;</div><div class="line"></div><div class="line"></div><div class="line">typedef __int32_t __int_fast8_t;</div><div class="line">typedef __uint32_t __uint_fast8_t;</div><div class="line">typedef __int32_t __int_fast16_t;</div><div class="line">typedef __uint32_t __uint_fast16_t;</div><div class="line">typedef __int32_t __int_fast32_t;</div><div class="line">typedef __uint32_t __uint_fast32_t;</div><div class="line">typedef __int64_t __int_fast64_t;</div><div class="line">typedef __uint64_t __uint_fast64_t;</div><div class="line"></div><div class="line"></div><div class="line">typedef int __intptr_t;</div><div class="line">typedef unsigned int __uintptr_t;</div><div class="line"></div><div class="line"></div><div class="line">typedef __int64_t __intmax_t;</div><div class="line">typedef __uint64_t __uintmax_t;</div><div class="line"></div><div class="line"></div><div class="line">typedef __int32_t __register_t;</div><div class="line"></div><div class="line"></div><div class="line">typedef unsigned long __vaddr_t;</div><div class="line">typedef unsigned long __paddr_t;</div><div class="line">typedef unsigned long __vsize_t;</div><div class="line">typedef unsigned long __psize_t;</div><div class="line"></div><div class="line"></div><div class="line">typedef int __clock_t;</div><div class="line">typedef int __clockid_t;</div><div class="line">typedef long __ptrdiff_t;</div><div class="line">typedef int __time_t;</div><div class="line">typedef int __timer_t;</div><div class="line"></div><div class="line">typedef __builtin_va_list __va_list;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">typedef int __wchar_t;</div><div class="line"></div><div class="line">typedef int __wint_t;</div><div class="line">typedef int __rune_t;</div><div class="line">typedef void * __wctrans_t;</div><div class="line">typedef void * __wctype_t;</div><div class="line"># 41 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/sys/_types.h" 2</div><div class="line"></div><div class="line">typedef unsigned long __cpuid_t;</div><div class="line">typedef __int32_t __dev_t;</div><div class="line">typedef __uint32_t __fixpt_t;</div><div class="line">typedef __uint32_t __gid_t;</div><div class="line">typedef __uint32_t __id_t;</div><div class="line">typedef __uint32_t __in_addr_t;</div><div class="line">typedef __uint16_t __in_port_t;</div><div class="line">typedef __uint32_t __ino_t;</div><div class="line">typedef long __key_t;</div><div class="line">typedef __uint32_t __mode_t;</div><div class="line">typedef __uint32_t __nlink_t;</div><div class="line">typedef __int32_t __pid_t;</div><div class="line">typedef __uint64_t __rlim_t;</div><div class="line">typedef __uint16_t __sa_family_t;</div><div class="line">typedef __int32_t __segsz_t;</div><div class="line">typedef __uint32_t __socklen_t;</div><div class="line">typedef __int32_t __swblk_t;</div><div class="line">typedef __uint32_t __uid_t;</div><div class="line">typedef __uint32_t __useconds_t;</div><div class="line">typedef __int32_t __suseconds_t;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">typedef union &#123;</div><div class="line"> char __mbstate8[128];</div><div class="line"> __int64_t __mbstateL;</div><div class="line">&#125; __mbstate_t;</div><div class="line"># 33 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/stdint.h" 2</div><div class="line"># 42 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/stdint.h"</div><div class="line">typedef __int8_t int8_t;</div><div class="line">typedef __uint8_t uint8_t;</div><div class="line">typedef __int16_t int16_t;</div><div class="line">typedef __uint16_t uint16_t;</div><div class="line">typedef __int32_t int32_t;</div><div class="line">typedef __uint32_t uint32_t;</div><div class="line">typedef __int64_t int64_t;</div><div class="line">typedef __uint64_t uint64_t;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">typedef int8_t int_least8_t;</div><div class="line">typedef int8_t int_fast8_t;</div><div class="line"></div><div class="line">typedef uint8_t uint_least8_t;</div><div class="line">typedef uint8_t uint_fast8_t;</div><div class="line"># 88 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/stdint.h"</div><div class="line">typedef int16_t int_least16_t;</div><div class="line">typedef int32_t int_fast16_t;</div><div class="line"></div><div class="line">typedef uint16_t uint_least16_t;</div><div class="line">typedef uint32_t uint_fast16_t;</div><div class="line"># 121 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/stdint.h"</div><div class="line">typedef int32_t int_least32_t;</div><div class="line">typedef int32_t int_fast32_t;</div><div class="line"></div><div class="line">typedef uint32_t uint_least32_t;</div><div class="line">typedef uint32_t uint_fast32_t;</div><div class="line"># 154 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/stdint.h"</div><div class="line">typedef int64_t int_least64_t;</div><div class="line">typedef int64_t int_fast64_t;</div><div class="line"></div><div class="line">typedef uint64_t uint_least64_t;</div><div class="line">typedef uint64_t uint_fast64_t;</div><div class="line"># 198 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/stdint.h"</div><div class="line">typedef int intptr_t;</div><div class="line">typedef unsigned int uintptr_t;</div><div class="line"># 220 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/stdint.h"</div><div class="line">typedef uint64_t uintmax_t;</div><div class="line">typedef int64_t intmax_t;</div><div class="line"># 242 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/stdint.h"</div><div class="line"># 1 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/sys/_wchar_limits.h" 1</div><div class="line"># 243 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/stdint.h" 2</div><div class="line"># 254 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/stdint.h"</div><div class="line">typedef int ssize_t;</div><div class="line"># 35 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/sys/types.h" 2</div><div class="line"></div><div class="line"></div><div class="line"># 1 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/linux/posix_types.h" 1</div><div class="line"># 15 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/linux/posix_types.h"</div><div class="line"># 1 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/linux/stddef.h" 1</div><div class="line"># 21 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/linux/stddef.h"</div><div class="line"># 1 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/linux/compiler.h" 1</div><div class="line"># 22 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/linux/stddef.h" 2</div><div class="line"># 16 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/linux/posix_types.h" 2</div><div class="line"># 32 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/linux/posix_types.h"</div><div class="line">typedef struct &#123;</div><div class="line"> unsigned long fds_bits [(1024/(8 * sizeof(unsigned long)))];</div><div class="line">&#125; __kernel_fd_set;</div><div class="line"></div><div class="line">typedef void (*__kernel_sighandler_t)(int);</div><div class="line"></div><div class="line">typedef int __kernel_key_t;</div><div class="line">typedef int __kernel_mqd_t;</div><div class="line"></div><div class="line"># 1 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/asm/posix_types.h" 1</div><div class="line"># 15 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/asm/posix_types.h"</div><div class="line">typedef unsigned long __kernel_ino_t;</div><div class="line">typedef unsigned short __kernel_mode_t;</div><div class="line">typedef unsigned short __kernel_nlink_t;</div><div class="line">typedef long __kernel_off_t;</div><div class="line">typedef int __kernel_pid_t;</div><div class="line">typedef unsigned short __kernel_ipc_pid_t;</div><div class="line">typedef unsigned short __kernel_uid_t;</div><div class="line">typedef unsigned short __kernel_gid_t;</div><div class="line">typedef unsigned int __kernel_size_t;</div><div class="line">typedef int __kernel_ssize_t;</div><div class="line">typedef int __kernel_ptrdiff_t;</div><div class="line">typedef long __kernel_time_t;</div><div class="line">typedef long __kernel_suseconds_t;</div><div class="line">typedef long __kernel_clock_t;</div><div class="line">typedef int __kernel_timer_t;</div><div class="line">typedef int __kernel_clockid_t;</div><div class="line">typedef int __kernel_daddr_t;</div><div class="line">typedef char * __kernel_caddr_t;</div><div class="line">typedef unsigned short __kernel_uid16_t;</div><div class="line">typedef unsigned short __kernel_gid16_t;</div><div class="line">typedef unsigned int __kernel_uid32_t;</div><div class="line">typedef unsigned int __kernel_gid32_t;</div><div class="line"></div><div class="line">typedef unsigned short __kernel_old_uid_t;</div><div class="line">typedef unsigned short __kernel_old_gid_t;</div><div class="line">typedef unsigned short __kernel_old_dev_t;</div><div class="line"></div><div class="line"></div><div class="line">typedef long long __kernel_loff_t;</div><div class="line"></div><div class="line"></div><div class="line">typedef struct &#123;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"> int __val[2];</div><div class="line"></div><div class="line">&#125; __kernel_fsid_t;</div><div class="line"># 42 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/linux/posix_types.h" 2</div><div class="line"># 38 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/sys/types.h" 2</div><div class="line"># 1 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/asm/types.h" 1</div><div class="line"># 17 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/asm/types.h"</div><div class="line">typedef unsigned short umode_t;</div><div class="line"></div><div class="line">typedef __signed__ char __s8;</div><div class="line">typedef unsigned char __u8;</div><div class="line"></div><div class="line">typedef __signed__ short __s16;</div><div class="line">typedef unsigned short __u16;</div><div class="line"></div><div class="line">typedef __signed__ int __s32;</div><div class="line">typedef unsigned int __u32;</div><div class="line"></div><div class="line"></div><div class="line">typedef __signed__ long long __s64;</div><div class="line">typedef unsigned long long __u64;</div><div class="line"># 39 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/sys/types.h" 2</div><div class="line"># 1 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/linux/types.h" 1</div><div class="line"># 21 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/linux/types.h"</div><div class="line">typedef __u16 __le16;</div><div class="line">typedef __u16 __be16;</div><div class="line">typedef __u32 __le32;</div><div class="line">typedef __u32 __be32;</div><div class="line"></div><div class="line">typedef __u64 __le64;</div><div class="line">typedef __u64 __be64;</div><div class="line"></div><div class="line"></div><div class="line">struct ustat &#123;</div><div class="line"> __kernel_daddr_t f_tfree;</div><div class="line"> __kernel_ino_t f_tinode;</div><div class="line"> char f_fname[6];</div><div class="line"> char f_fpack[6];</div><div class="line">&#125;;</div><div class="line"># 40 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/sys/types.h" 2</div><div class="line"># 1 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/machine/kernel.h" 1</div><div class="line"># 34 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/machine/kernel.h"</div><div class="line">typedef unsigned long __kernel_blkcnt_t;</div><div class="line">typedef unsigned long __kernel_blksize_t;</div><div class="line"></div><div class="line"></div><div class="line">typedef unsigned long __kernel_fsblkcnt_t;</div><div class="line">typedef unsigned long __kernel_fsfilcnt_t;</div><div class="line">typedef unsigned int __kernel_id_t;</div><div class="line"># 41 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/sys/types.h" 2</div><div class="line"></div><div class="line">typedef __u32 __kernel_dev_t;</div><div class="line"># 52 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/sys/types.h"</div><div class="line">typedef __kernel_blkcnt_t blkcnt_t;</div><div class="line">typedef __kernel_blksize_t blksize_t;</div><div class="line">typedef __kernel_clock_t clock_t;</div><div class="line">typedef __kernel_clockid_t clockid_t;</div><div class="line">typedef __kernel_dev_t dev_t;</div><div class="line">typedef __kernel_fsblkcnt_t fsblkcnt_t;</div><div class="line">typedef __kernel_fsfilcnt_t fsfilcnt_t;</div><div class="line">typedef __kernel_gid32_t gid_t;</div><div class="line">typedef __kernel_id_t id_t;</div><div class="line">typedef __kernel_ino_t ino_t;</div><div class="line">typedef __kernel_key_t key_t;</div><div class="line">typedef __kernel_mode_t mode_t;</div><div class="line">typedef __kernel_nlink_t nlink_t;</div><div class="line"></div><div class="line"></div><div class="line">typedef __kernel_off_t off_t;</div><div class="line"></div><div class="line">typedef __kernel_loff_t loff_t;</div><div class="line">typedef loff_t off64_t;</div><div class="line"></div><div class="line">typedef __kernel_pid_t pid_t;</div><div class="line"># 93 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/sys/types.h"</div><div class="line">typedef __kernel_suseconds_t suseconds_t;</div><div class="line">typedef __kernel_time_t time_t;</div><div class="line">typedef __kernel_uid32_t uid_t;</div><div class="line">typedef signed long useconds_t;</div><div class="line"></div><div class="line">typedef __kernel_daddr_t daddr_t;</div><div class="line">typedef __kernel_timer_t timer_t;</div><div class="line">typedef __kernel_mqd_t mqd_t;</div><div class="line"></div><div class="line">typedef __kernel_caddr_t caddr_t;</div><div class="line">typedef unsigned int uint_t;</div><div class="line">typedef unsigned int uint;</div><div class="line"></div><div class="line"></div><div class="line"># 1 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/sys/sysmacros.h" 1</div><div class="line"># 36 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/sys/sysmacros.h"</div><div class="line">static __inline__ int major(dev_t _dev)</div><div class="line">&#123;</div><div class="line">  return (_dev &gt;&gt; 8) &amp; 0xfff;</div><div class="line">&#125;</div><div class="line"></div><div class="line">static __inline__ int minor(dev_t _dev)</div><div class="line">&#123;</div><div class="line">  return (_dev &amp; 0xff) | ((_dev &gt;&gt; 12) &amp; 0xfff00);</div><div class="line">&#125;</div><div class="line"></div><div class="line">static __inline__ dev_t makedev(int __ma, int __mi)</div><div class="line">&#123;</div><div class="line">  return ((__ma &amp; 0xfff) &lt;&lt; 8) | (__mi &amp; 0xff) | ((__mi &amp; 0xfff00) &lt;&lt; 12);</div><div class="line">&#125;</div><div class="line"># 108 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/sys/types.h" 2</div><div class="line"></div><div class="line"></div><div class="line">typedef unsigned char u_char;</div><div class="line">typedef unsigned short u_short;</div><div class="line">typedef unsigned int u_int;</div><div class="line">typedef unsigned long u_long;</div><div class="line"></div><div class="line">typedef uint32_t u_int32_t;</div><div class="line">typedef uint16_t u_int16_t;</div><div class="line">typedef uint8_t u_int8_t;</div><div class="line">typedef uint64_t u_int64_t;</div><div class="line"># 51 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/stdio.h" 2</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"># 1 "/Users/renpingqing/Documents/android/android-ndk-r11c/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/lib/gcc/arm-linux-androideabi/4.9/include/stdarg.h" 1 3 4</div><div class="line"># 40 "/Users/renpingqing/Documents/android/android-ndk-r11c/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/lib/gcc/arm-linux-androideabi/4.9/include/stdarg.h" 3 4</div><div class="line">typedef __builtin_va_list __gnuc_va_list;</div><div class="line"># 55 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/stdio.h" 2</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"># 1 "/Users/renpingqing/Documents/android/android-ndk-r11c/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/lib/gcc/arm-linux-androideabi/4.9/include/stddef.h" 1 3 4</div><div class="line"># 59 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/stdio.h" 2</div><div class="line"></div><div class="line"></div><div class="line"># 1 "/Users/renpingqing/Documents/android/android-ndk-r11c/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/lib/gcc/arm-linux-androideabi/4.9/include/stddef.h" 1 3 4</div><div class="line"># 62 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/stdio.h" 2</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">typedef off_t fpos_t;</div><div class="line"># 74 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/stdio.h"</div><div class="line">struct __sbuf &#123;</div><div class="line"> unsigned char *_base;</div><div class="line"> int _size;</div><div class="line">&#125;;</div><div class="line"># 106 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/stdio.h"</div><div class="line">typedef struct __sFILE &#123;</div><div class="line"> unsigned char *_p;</div><div class="line"> int _r;</div><div class="line"> int _w;</div><div class="line"> short _flags;</div><div class="line"> short _file;</div><div class="line"> struct __sbuf _bf;</div><div class="line"> int _lbfsize;</div><div class="line"></div><div class="line"></div><div class="line"> void *_cookie;</div><div class="line"> int (*_close)(void *);</div><div class="line"> int (*_read)(void *, char *, int);</div><div class="line"> fpos_t (*_seek)(void *, fpos_t, int);</div><div class="line"> int (*_write)(void *, const char *, int);</div><div class="line"></div><div class="line"></div><div class="line"> struct __sbuf _ext;</div><div class="line"></div><div class="line"> unsigned char *_up;</div><div class="line"> int _ur;</div><div class="line"></div><div class="line"></div><div class="line"> unsigned char _ubuf[3];</div><div class="line"> unsigned char _nbuf[1];</div><div class="line"></div><div class="line"></div><div class="line"> struct __sbuf _lb;</div><div class="line"></div><div class="line"></div><div class="line"> int _blksize;</div><div class="line"> fpos_t _offset;</div><div class="line">&#125; FILE;</div><div class="line"></div><div class="line"></div><div class="line">extern FILE __sF[];</div><div class="line"></div><div class="line"># 210 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/stdio.h"</div><div class="line"></div><div class="line">void clearerr(FILE *);</div><div class="line">int fclose(FILE *);</div><div class="line">int feof(FILE *);</div><div class="line">int ferror(FILE *);</div><div class="line">int fflush(FILE *);</div><div class="line">int fgetc(FILE *);</div><div class="line">int fgetpos(FILE *, fpos_t *);</div><div class="line">char *fgets(char *, int, FILE *);</div><div class="line">FILE *fopen(const char *, const char *);</div><div class="line">int fprintf(FILE *, const char *, ...);</div><div class="line">int fputc(int, FILE *);</div><div class="line">int fputs(const char *, FILE *);</div><div class="line">size_t fread(void *, size_t, size_t, FILE *);</div><div class="line">FILE *freopen(const char *, const char *, FILE *);</div><div class="line">int fscanf(FILE *, const char *, ...);</div><div class="line">int fseek(FILE *, long, int);</div><div class="line">int fseeko(FILE *, off_t, int);</div><div class="line">int fsetpos(FILE *, const fpos_t *);</div><div class="line">long ftell(FILE *);</div><div class="line">off_t ftello(FILE *);</div><div class="line">size_t fwrite(const void *, size_t, size_t, FILE *);</div><div class="line">int getc(FILE *);</div><div class="line">int getchar(void);</div><div class="line">char *gets(char *);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">extern int sys_nerr;</div><div class="line">extern char *sys_errlist[];</div><div class="line"></div><div class="line">void perror(const char *);</div><div class="line">int printf(const char *, ...);</div><div class="line">int putc(int, FILE *);</div><div class="line">int putchar(int);</div><div class="line">int puts(const char *);</div><div class="line">int remove(const char *);</div><div class="line">int rename(const char *, const char *);</div><div class="line">void rewind(FILE *);</div><div class="line">int scanf(const char *, ...);</div><div class="line">void setbuf(FILE *, char *);</div><div class="line">int setvbuf(FILE *, char *, int, size_t);</div><div class="line">int sprintf(char *, const char *, ...);</div><div class="line">int sscanf(const char *, const char *, ...);</div><div class="line">FILE *tmpfile(void);</div><div class="line">char *tmpnam(char *);</div><div class="line">int ungetc(int, FILE *);</div><div class="line">int vfprintf(FILE *, const char *, __va_list);</div><div class="line">int vprintf(const char *, __va_list);</div><div class="line">int vsprintf(char *, const char *, __va_list);</div><div class="line"></div><div class="line"></div><div class="line">int snprintf(char *, size_t, const char *, ...)</div><div class="line">  __attribute__((__format__ (printf, 3, 4)))</div><div class="line">  __attribute__((__nonnull__ (3)));</div><div class="line">int vfscanf(FILE *, const char *, __va_list)</div><div class="line">  __attribute__((__format__ (scanf, 2, 0)))</div><div class="line">  __attribute__((__nonnull__ (2)));</div><div class="line">int vscanf(const char *, __va_list)</div><div class="line">  __attribute__((__format__ (scanf, 1, 0)))</div><div class="line">  __attribute__((__nonnull__ (1)));</div><div class="line">int vsnprintf(char *, size_t, const char *, __va_list)</div><div class="line">  __attribute__((__format__ (printf, 3, 0)))</div><div class="line">  __attribute__((__nonnull__ (3)));</div><div class="line">int vsscanf(const char *, const char *, __va_list)</div><div class="line">  __attribute__((__format__ (scanf, 2, 0)))</div><div class="line">  __attribute__((__nonnull__ (2)));</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"># 289 "/Users/renpingqing/Documents/android/android-ndk-r11c/platforms/android-14/arch-arm/usr/include/stdio.h"</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">FILE *fdopen(int, const char *);</div><div class="line">int fileno(FILE *);</div><div class="line"></div><div class="line"></div><div class="line">int pclose(FILE *);</div><div class="line">FILE *popen(const char *, const char *);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">void flockfile(FILE *);</div><div class="line">int ftrylockfile(FILE *);</div><div class="line">void funlockfile(FILE *);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">int getc_unlocked(FILE *);</div><div class="line">int getchar_unlocked(void);</div><div class="line">int putc_unlocked(int, FILE *);</div><div class="line">int putchar_unlocked(int);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">char *tempnam(const char *, const char *);</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">int asprintf(char **, const char *, ...)</div><div class="line">  __attribute__((__format__ (printf, 2, 3)))</div><div class="line">  __attribute__((__nonnull__ (2)));</div><div class="line">char *fgetln(FILE *, size_t *);</div><div class="line">int fpurge(FILE *);</div><div class="line">int getw(FILE *);</div><div class="line">int putw(int, FILE *);</div><div class="line">void setbuffer(FILE *, char *, int);</div><div class="line">int setlinebuf(FILE *);</div><div class="line">int vasprintf(char **, const char *, __va_list)</div><div class="line">  __attribute__((__format__ (printf, 2, 0)))</div><div class="line">  __attribute__((__nonnull__ (2)));</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">FILE *funopen(const void *,</div><div class="line">  int (*)(void *, char *, int),</div><div class="line">  int (*)(void *, const char *, int),</div><div class="line">  fpos_t (*)(void *, fpos_t, int),</div><div class="line">  int (*)(void *));</div><div class="line"></div><div class="line"># 2 "hello.c" 2</div><div class="line"></div><div class="line">int nums[5] = &#123;1,2,3,4,5&#125;;</div><div class="line"></div><div class="line">int for0(int n)</div><div class="line">&#123;</div><div class="line">    int i = 0;</div><div class="line">    int s = 0;</div><div class="line">    for(i = 0;i&lt;n;i++)</div><div class="line">    &#123;</div><div class="line">        s+=i;</div><div class="line">    &#125;</div><div class="line">    return s;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int for1(int n)</div><div class="line">&#123;</div><div class="line">    int i = 0;</div><div class="line">    int s = 0;</div><div class="line">    for(i = 0;i&lt;n;i++)</div><div class="line">    &#123;</div><div class="line">        s+=i*2;</div><div class="line">    &#125;</div><div class="line">    return s;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int for2(int n)</div><div class="line">&#123;</div><div class="line">    int i = 0;</div><div class="line">    int s = 0;</div><div class="line">    for(i = 0;i&lt;n;i++)</div><div class="line">    &#123;</div><div class="line">        s+=i*i+nums[n-1];</div><div class="line">    &#125;</div><div class="line">    return s;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main(int argc,char* argv[])</div><div class="line">&#123;</div><div class="line">    printf("hello ARM!\n");</div><div class="line">    printf("for0%d\n", for0(5));</div><div class="line">    printf("for1%d\n", for1(5));</div><div class="line">    printf("for2%d\n", for2(5));</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看见他确实包含进来了stdio.h的内容，printf的申明就在其中</p>
<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><p>检查的代码的规范性和语法错误等。确认无误后将.i文件翻译为ARM汇编，可以通过-S查看</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -S hello.i -o hello.s</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div></pre></td><td class="code"><pre><div class="line">	.arch armv5te</div><div class="line">	.fpu softvfp</div><div class="line">	.eabi_attribute 20, 1</div><div class="line">	.eabi_attribute 21, 1</div><div class="line">	.eabi_attribute 23, 3</div><div class="line">	.eabi_attribute 24, 1</div><div class="line">	.eabi_attribute 25, 1</div><div class="line">	.eabi_attribute 26, 2</div><div class="line">	.eabi_attribute 30, 6</div><div class="line">	.eabi_attribute 34, 0</div><div class="line">	.eabi_attribute 18, 4</div><div class="line">	.file	&quot;hello.c&quot;</div><div class="line">	.global	nums</div><div class="line">	.data</div><div class="line">	.align	2</div><div class="line">	.type	nums, %object</div><div class="line">	.size	nums, 20</div><div class="line">nums:</div><div class="line">	.word	1</div><div class="line">	.word	2</div><div class="line">	.word	3</div><div class="line">	.word	4</div><div class="line">	.word	5</div><div class="line">	.text</div><div class="line">	.align	2</div><div class="line">	.global	for0</div><div class="line">	.type	for0, %function</div><div class="line">for0:</div><div class="line">	@ args = 0, pretend = 0, frame = 16</div><div class="line">	@ frame_needed = 1, uses_anonymous_args = 0</div><div class="line">	@ link register save eliminated.</div><div class="line">	str	fp, [sp, #-4]!</div><div class="line">	add	fp, sp, #0</div><div class="line">	sub	sp, sp, #20</div><div class="line">	str	r0, [fp, #-16]</div><div class="line">	mov	r3, #0</div><div class="line">	str	r3, [fp, #-8]</div><div class="line">	mov	r3, #0</div><div class="line">	str	r3, [fp, #-12]</div><div class="line">	mov	r3, #0</div><div class="line">	str	r3, [fp, #-8]</div><div class="line">	b	.L2</div><div class="line">.L3:</div><div class="line">	ldr	r2, [fp, #-12]</div><div class="line">	ldr	r3, [fp, #-8]</div><div class="line">	add	r3, r2, r3</div><div class="line">	str	r3, [fp, #-12]</div><div class="line">	ldr	r3, [fp, #-8]</div><div class="line">	add	r3, r3, #1</div><div class="line">	str	r3, [fp, #-8]</div><div class="line">.L2:</div><div class="line">	ldr	r2, [fp, #-8]</div><div class="line">	ldr	r3, [fp, #-16]</div><div class="line">	cmp	r2, r3</div><div class="line">	blt	.L3</div><div class="line">	ldr	r3, [fp, #-12]</div><div class="line">	mov	r0, r3</div><div class="line">	sub	sp, fp, #0</div><div class="line">	@ sp needed</div><div class="line">	ldr	fp, [sp], #4</div><div class="line">	bx	lr</div><div class="line">	.size	for0, .-for0</div><div class="line">	.align	2</div><div class="line">	.global	for1</div><div class="line">	.type	for1, %function</div><div class="line">for1:</div><div class="line">	@ args = 0, pretend = 0, frame = 16</div><div class="line">	@ frame_needed = 1, uses_anonymous_args = 0</div><div class="line">	@ link register save eliminated.</div><div class="line">	str	fp, [sp, #-4]!</div><div class="line">	add	fp, sp, #0</div><div class="line">	sub	sp, sp, #20</div><div class="line">	str	r0, [fp, #-16]</div><div class="line">	mov	r3, #0</div><div class="line">	str	r3, [fp, #-8]</div><div class="line">	mov	r3, #0</div><div class="line">	str	r3, [fp, #-12]</div><div class="line">	mov	r3, #0</div><div class="line">	str	r3, [fp, #-8]</div><div class="line">	b	.L6</div><div class="line">.L7:</div><div class="line">	ldr	r3, [fp, #-8]</div><div class="line">	mov	r3, r3, asl #1</div><div class="line">	ldr	r2, [fp, #-12]</div><div class="line">	add	r3, r2, r3</div><div class="line">	str	r3, [fp, #-12]</div><div class="line">	ldr	r3, [fp, #-8]</div><div class="line">	add	r3, r3, #1</div><div class="line">	str	r3, [fp, #-8]</div><div class="line">.L6:</div><div class="line">	ldr	r2, [fp, #-8]</div><div class="line">	ldr	r3, [fp, #-16]</div><div class="line">	cmp	r2, r3</div><div class="line">	blt	.L7</div><div class="line">	ldr	r3, [fp, #-12]</div><div class="line">	mov	r0, r3</div><div class="line">	sub	sp, fp, #0</div><div class="line">	@ sp needed</div><div class="line">	ldr	fp, [sp], #4</div><div class="line">	bx	lr</div><div class="line">	.size	for1, .-for1</div><div class="line">	.align	2</div><div class="line">	.global	for2</div><div class="line">	.type	for2, %function</div><div class="line">for2:</div><div class="line">	@ args = 0, pretend = 0, frame = 16</div><div class="line">	@ frame_needed = 1, uses_anonymous_args = 0</div><div class="line">	@ link register save eliminated.</div><div class="line">	str	fp, [sp, #-4]!</div><div class="line">	add	fp, sp, #0</div><div class="line">	sub	sp, sp, #20</div><div class="line">	str	r0, [fp, #-16]</div><div class="line">	ldr	r1, .L13</div><div class="line">.LPIC0:</div><div class="line">	add	r1, pc, r1</div><div class="line">	mov	r3, #0</div><div class="line">	str	r3, [fp, #-8]</div><div class="line">	mov	r3, #0</div><div class="line">	str	r3, [fp, #-12]</div><div class="line">	mov	r3, #0</div><div class="line">	str	r3, [fp, #-8]</div><div class="line">	b	.L10</div><div class="line">.L11:</div><div class="line">	ldr	r3, [fp, #-8]</div><div class="line">	ldr	r2, [fp, #-8]</div><div class="line">	mul	r2, r3, r2</div><div class="line">	ldr	r3, [fp, #-16]</div><div class="line">	sub	r0, r3, #1</div><div class="line">	ldr	r3, .L13+4</div><div class="line">	ldr	r3, [r1, r3]</div><div class="line">	ldr	r3, [r3, r0, asl #2]</div><div class="line">	add	r3, r2, r3</div><div class="line">	ldr	r2, [fp, #-12]</div><div class="line">	add	r3, r2, r3</div><div class="line">	str	r3, [fp, #-12]</div><div class="line">	ldr	r3, [fp, #-8]</div><div class="line">	add	r3, r3, #1</div><div class="line">	str	r3, [fp, #-8]</div><div class="line">.L10:</div><div class="line">	ldr	r2, [fp, #-8]</div><div class="line">	ldr	r3, [fp, #-16]</div><div class="line">	cmp	r2, r3</div><div class="line">	blt	.L11</div><div class="line">	ldr	r3, [fp, #-12]</div><div class="line">	mov	r0, r3</div><div class="line">	sub	sp, fp, #0</div><div class="line">	@ sp needed</div><div class="line">	ldr	fp, [sp], #4</div><div class="line">	bx	lr</div><div class="line">.L14:</div><div class="line">	.align	2</div><div class="line">.L13:</div><div class="line">	.word	_GLOBAL_OFFSET_TABLE_-(.LPIC0+8)</div><div class="line">	.word	nums(GOT)</div><div class="line">	.size	for2, .-for2</div><div class="line">	.section	.rodata</div><div class="line">	.align	2</div><div class="line">.LC0:</div><div class="line">	.ascii	&quot;hello ARM!\000&quot;</div><div class="line">	.align	2</div><div class="line">.LC1:</div><div class="line">	.ascii	&quot;for0%d\012\000&quot;</div><div class="line">	.align	2</div><div class="line">.LC2:</div><div class="line">	.ascii	&quot;for1%d\012\000&quot;</div><div class="line">	.align	2</div><div class="line">.LC3:</div><div class="line">	.ascii	&quot;for2%d\012\000&quot;</div><div class="line">	.text</div><div class="line">	.align	2</div><div class="line">	.global	main</div><div class="line">	.type	main, %function</div><div class="line">main:</div><div class="line">	@ args = 0, pretend = 0, frame = 8</div><div class="line">	@ frame_needed = 1, uses_anonymous_args = 0</div><div class="line">	stmfd	sp!, &#123;fp, lr&#125;</div><div class="line">	add	fp, sp, #4</div><div class="line">	sub	sp, sp, #8</div><div class="line">	str	r0, [fp, #-8]</div><div class="line">	str	r1, [fp, #-12]</div><div class="line">	ldr	r3, .L17</div><div class="line">.LPIC1:</div><div class="line">	add	r3, pc, r3</div><div class="line">	mov	r0, r3</div><div class="line">	bl	puts(PLT)</div><div class="line">	mov	r0, #5</div><div class="line">	bl	for0(PLT)</div><div class="line">	mov	r2, r0</div><div class="line">	ldr	r3, .L17+4</div><div class="line">.LPIC2:</div><div class="line">	add	r3, pc, r3</div><div class="line">	mov	r0, r3</div><div class="line">	mov	r1, r2</div><div class="line">	bl	printf(PLT)</div><div class="line">	mov	r0, #5</div><div class="line">	bl	for1(PLT)</div><div class="line">	mov	r2, r0</div><div class="line">	ldr	r3, .L17+8</div><div class="line">.LPIC3:</div><div class="line">	add	r3, pc, r3</div><div class="line">	mov	r0, r3</div><div class="line">	mov	r1, r2</div><div class="line">	bl	printf(PLT)</div><div class="line">	mov	r0, #5</div><div class="line">	bl	for2(PLT)</div><div class="line">	mov	r2, r0</div><div class="line">	ldr	r3, .L17+12</div><div class="line">.LPIC4:</div><div class="line">	add	r3, pc, r3</div><div class="line">	mov	r0, r3</div><div class="line">	mov	r1, r2</div><div class="line">	bl	printf(PLT)</div><div class="line">	mov	r3, #0</div><div class="line">	mov	r0, r3</div><div class="line">	sub	sp, fp, #4</div><div class="line">	@ sp needed</div><div class="line">	ldmfd	sp!, &#123;fp, pc&#125;</div><div class="line">.L18:</div><div class="line">	.align	2</div><div class="line">.L17:</div><div class="line">	.word	.LC0-(.LPIC1+8)</div><div class="line">	.word	.LC1-(.LPIC2+8)</div><div class="line">	.word	.LC2-(.LPIC3+8)</div><div class="line">	.word	.LC3-(.LPIC4+8)</div><div class="line">	.size	main, .-main</div><div class="line">	.ident	&quot;GCC: (GNU) 4.9 20150123 (prerelease)&quot;</div><div class="line">	.section	.note.GNU-stack,&quot;&quot;,%progbits</div></pre></td></tr></table></figure>
<p>完成这一步只是将.i文件转为了汇编，但还不是二进制</p>
<h1 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h1><p>这一步才将汇编代码转为二进制，可以通过-c查看</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -c hello.s -o hello.o</div></pre></td></tr></table></figure>
<p>这一步会生成.o，但是还不能执行，因为程序执行还得依赖其他库，不然上面的print他的真实实现在哪里</p>
<h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p>这一步就是讲上面编译的二进制文件和他依赖的库链接成可以执行文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc hello.o -o hello</div></pre></td></tr></table></figure>
<p>这一步就可以生成hello文件了，我们将他上传到手机，就可以执行了</p>
<blockquote>
<p>注意：由于我们是在mac上编译出arm可执行文件，所以得用交叉编译器ndk里面的gcc,所以我们还需要如下makefile</p>
</blockquote>
<p>makefile</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">NDK_ROOT=/Users/renpingqing/Documents/android/android-ndk-r11c</div><div class="line">TOOLCHAINS_ROOT=<span class="variable">$(NDK_ROOT)</span>/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64</div><div class="line">TOOLCHAINS_PREFIX=<span class="variable">$(TOOLCHAINS_ROOT)</span>/bin/arm-linux-androideabi</div><div class="line">TOOLCHAINS_INCLUDE=<span class="variable">$(TOOLCHAINS_ROOT)</span>/lib/gcc/arm-linux-androideabi/4.9/include-fixed</div><div class="line"></div><div class="line">PLATFORM_ROOT=<span class="variable">$(NDK_ROOT)</span>/platforms/android-14/arch-arm</div><div class="line">PLATFORM_INCLUDE=<span class="variable">$(PLATFORM_ROOT)</span>/usr/include</div><div class="line">PLATFORM_LIB=<span class="variable">$(PLATFORM_ROOT)</span>/usr/lib</div><div class="line"></div><div class="line">MODULE_NAME=hello</div><div class="line">RM=rm -rf</div><div class="line"></div><div class="line">FLAGS=-I<span class="variable">$(TOOLCHAINS_INCLUDE)</span> \</div><div class="line">	-I<span class="variable">$(PLATFORM_INCLUDE)</span> \</div><div class="line">	-L<span class="variable">$(PLATFORM_LIB)</span> \</div><div class="line">	-nostdlib \</div><div class="line">	-lgcc \</div><div class="line">	-Bdynamic \</div><div class="line">	-lc</div><div class="line"></div><div class="line">OBJS=<span class="variable">$(MODULE_NAME)</span>.o \</div><div class="line">	<span class="variable">$(PLATFORM_LIB)</span>/crtbegin_dynamic.o \</div><div class="line">	<span class="variable">$(PLATFORM_LIB)</span>/crtend_android.o</div><div class="line"></div><div class="line"><span class="section">all:</span></div><div class="line">	#<span class="variable">$(TOOLCHAINS_PREFIX)</span>-gcc <span class="variable">$(FLAGS)</span> -c <span class="variable">$(MODULE_NAME)</span>.c -o <span class="variable">$(MODULE_NAME)</span>.o</div><div class="line">	#<span class="variable">$(TOOLCHAINS_PREFIX)</span>-gcc <span class="variable">$(FLAGS)</span> <span class="variable">$(OBJS)</span> -o <span class="variable">$(MODULE_NAME)</span></div><div class="line"></div><div class="line">	#预处理</div><div class="line">	<span class="variable">$(TOOLCHAINS_PREFIX)</span>-gcc <span class="variable">$(FLAGS)</span> -E <span class="variable">$(MODULE_NAME)</span>.c -o <span class="variable">$(MODULE_NAME)</span>.i</div><div class="line"></div><div class="line">	#编译</div><div class="line">	<span class="variable">$(TOOLCHAINS_PREFIX)</span>-gcc <span class="variable">$(FLAGS)</span> -S <span class="variable">$(MODULE_NAME)</span>.i -o <span class="variable">$(MODULE_NAME)</span>.s</div><div class="line"></div><div class="line">	#汇编</div><div class="line">	<span class="variable">$(TOOLCHAINS_PREFIX)</span>-gcc <span class="variable">$(FLAGS)</span> -c <span class="variable">$(MODULE_NAME)</span>.s -o <span class="variable">$(MODULE_NAME)</span>.o</div><div class="line"></div><div class="line">	#链接</div><div class="line">	<span class="variable">$(TOOLCHAINS_PREFIX)</span>-gcc <span class="variable">$(FLAGS)</span> <span class="variable">$(OBJS)</span> -o <span class="variable">$(MODULE_NAME)</span></div><div class="line"><span class="section">clean:</span></div><div class="line">	<span class="variable">$(RM)</span> *.o</div><div class="line"><span class="section">install:</span></div><div class="line">	adb push <span class="variable">$(MODULE_NAME)</span> /data/local/</div><div class="line">	adb shell chmod 755 /data/local/<span class="variable">$(MODULE_NAME)</span></div></pre></td></tr></table></figure>
<p>hello.c</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> nums[<span class="number">5</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">for0</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;   </div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)</div><div class="line">    &#123;</div><div class="line">        s+=i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">for1</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;   </div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)</div><div class="line">    &#123;</div><div class="line">        s+=i*<span class="number">2</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">for2</span><span class="params">(<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;   </div><div class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;n;i++)</div><div class="line">    &#123;</div><div class="line">        s+=i*i+nums[n<span class="number">-1</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> s;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"hello ARM!\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"for0%d\n"</span>, for0(<span class="number">5</span>));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"for1%d\n"</span>, for1(<span class="number">5</span>));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"for2%d\n"</span>, for2(<span class="number">5</span>));</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;GNU编译器套件（GNU Compiler Collection），他提供了包括C、C++、Objective-C、Fortran、Java
    
    </summary>
    
      <category term="Gcc" scheme="http://i.woblog.cn/categories/Gcc/"/>
    
    
      <category term="gcc" scheme="http://i.woblog.cn/tags/gcc/"/>
    
      <category term="编译步骤" scheme="http://i.woblog.cn/tags/%E7%BC%96%E8%AF%91%E6%AD%A5%E9%AA%A4/"/>
    
  </entry>
  
  <entry>
    <title>androguard的基本使用</title>
    <link href="http://i.woblog.cn/2016/08/08/use-androguard/"/>
    <id>http://i.woblog.cn/2016/08/08/use-androguard/</id>
    <published>2016-08-08T15:06:13.000Z</published>
    <updated>2016-11-21T15:12:36.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>androguard (Android guard) 是 Android 应用程序的逆向工程，提供恶意软件分析等等功能。</p>
<p>androguard 主要由 Python 编写，支持：</p>
<ul>
<li>DEX, ODEX</li>
<li>APK</li>
<li>Android’s binary xml</li>
</ul>
<p>安装过程比较复杂，请参考另一篇文章，下面就来说说一些工具的基本使用</p>
<h1 id="androapkinfo"><a href="#androapkinfo" class="headerlink" title="androapkinfo"></a>androapkinfo</h1><p>用来列出apk的文件，权限，主activity,其他activity,service,receivers,providers</p>
<p>是否有native code,是否有动态代码，是否用了反射</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./androapkinfo.py -i apk/app-debug.apk &gt; apk/apkinfo.txt</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">app-debug.apk :</div><div class="line">FILES: </div><div class="line">	AndroidManifest.xml Android binary XML -6ccb1fe1</div><div class="line">	res/anim-v21/design_appbar_state_list_animator.xml Android binary XML 6d63fc0c</div><div class="line">	res/anim-v21/design_bottom_sheet_slide_in.xml Android binary XML -71f29031</div><div class="line">	</div><div class="line">	...</div><div class="line"></div><div class="line">PERMISSIONS: </div><div class="line">	android.permission.INTERNET [&apos;dangerous&apos;, &apos;full Internet access&apos;, &apos;Allows an application to create network sockets.&apos;]</div><div class="line">MAIN ACTIVITY:  cn.woblog.weatherapp.MainActivity</div><div class="line">ACTIVITIES: </div><div class="line">	cn.woblog.weatherapp.MainActivity &#123;&apos;action&apos;: [u&apos;android.intent.action.MAIN&apos;], &apos;category&apos;: [u&apos;android.intent.category.LAUNCHER&apos;]&#125;</div><div class="line">	cn.woblog.weatherapp.activity.WeatherDetailActivity </div><div class="line">	cn.woblog.weatherapp.activity.TestActivity </div><div class="line">	cn.woblog.weatherapp.activity.SettingsActivity </div><div class="line">SERVICES: </div><div class="line">RECEIVERS: </div><div class="line">PROVIDERS:  []</div><div class="line">Native code: False</div><div class="line">Dynamic code: True</div><div class="line">Reflection code: True</div><div class="line">Ascii Obfuscation: False</div><div class="line">Landroid/support/design/R$anim; &lt;init&gt; [&apos;ANDROID&apos;, &apos;SUPPORT&apos;]</div><div class="line">Landroid/support/design/R$anim; &lt;init&gt; [&apos;ANDROID&apos;, &apos;SUPPORT&apos;]</div><div class="line">Landroid/support/design/R$attr; &lt;init&gt; [&apos;ANDROID&apos;, &apos;SUPPORT&apos;]</div><div class="line">Landroid/support/design/R$attr; &lt;init&gt; [&apos;ANDROID&apos;, &apos;SUPPORT&apos;]</div><div class="line">Landroid/support/design/R$bool; &lt;init&gt; [&apos;ANDROID&apos;, &apos;SUPPORT&apos;]</div><div class="line">Landroid/support/design/R$bool; &lt;init&gt; [&apos;ANDROID&apos;, &apos;SUPPORT&apos;]</div><div class="line">Landroid/support/design/R$color; &lt;init&gt; [&apos;ANDROID&apos;, &apos;SUPPORT&apos;]</div><div class="line">Landroid/support/design/R$color; &lt;init&gt; [&apos;ANDROID&apos;, &apos;SUPPORT&apos;]</div><div class="line">Landroid/support/design/R$dimen; &lt;init&gt; [&apos;ANDROID&apos;, &apos;SUPPORT&apos;]</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<h1 id="androaxml"><a href="#androaxml" class="headerlink" title="androaxml"></a>androaxml</h1><p>用来解密apk包中的AndroidManifest.xml文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./androaxml.py -i ./apk/app-debug.apk</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"cn.woblog.weatherapp"</span></div><div class="line">          <span class="attr">platformBuildVersionCode</span>=<span class="string">"24"</span></div><div class="line">          <span class="attr">platformBuildVersionName</span>=<span class="string">"7.000000"</span></div><div class="line">          <span class="attr">android:versionCode</span>=<span class="string">"1"</span></div><div class="line">          <span class="attr">android:versionName</span>=<span class="string">"1.0"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span></span></div><div class="line">        <span class="attr">android:minSdkVersion</span>=<span class="string">"10"</span></div><div class="line">        <span class="attr">android:targetSdkVersion</span>=<span class="string">"24"</span>&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">uses-sdk</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">"com.android.tools.fd.runtime.BootstrapApplication"</span></div><div class="line">        <span class="attr">name</span>=<span class="string">"cn.woblog.weatherapp.AppContext"</span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:debuggable</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@7F030000"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@7F060020"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@7F080092"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"cn.woblog.weatherapp.MainActivity"</span></div><div class="line">            <span class="attr">android:label</span>=<span class="string">"@7F060025"</span></div><div class="line">            <span class="attr">android:theme</span>=<span class="string">"@7F080039"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">action</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">category</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"cn.woblog.weatherapp.activity.WeatherDetailActivity"</span></div><div class="line">            <span class="attr">android:label</span>=<span class="string">"@7F060027"</span></div><div class="line">            <span class="attr">android:parentActivityName</span>=<span class="string">"cn.woblog.weatherapp.MainActivity"</span></div><div class="line">            <span class="attr">android:theme</span>=<span class="string">"@7F080039"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">meta-data</span></span></div><div class="line">                <span class="attr">android:name</span>=<span class="string">"android.support.PARENT_ACTIVITY"</span></div><div class="line">                <span class="attr">android:value</span>=<span class="string">".MainActivity"</span>&gt;</div><div class="line">            <span class="tag">&lt;/<span class="name">meta-data</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">"cn.woblog.weatherapp.activity.TestActivity"</span></div><div class="line">            <span class="attr">android:label</span>=<span class="string">"@7F060026"</span></div><div class="line">            <span class="attr">android:theme</span>=<span class="string">"@7F080039"</span>&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"cn.woblog.weatherapp.activity.SettingsActivity"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="androsign"><a href="#androsign" class="headerlink" title="androsign"></a>androsign</h1><h1 id="androdd"><a href="#androdd" class="headerlink" title="androdd"></a>androdd</h1><p>用来生成apk文件中每个类的方法的调用流程图</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./androdd.py -i ./apk/app-debug.apk -o ./apk -d -f PNG</div></pre></td></tr></table></figure>
<h1 id="androdiff"><a href="#androdiff" class="headerlink" title="androdiff"></a>androdiff</h1><p>用来比较两个apk文件的差异</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./androdiff.py -i ./apk/smali-demo.apk ./apk/smali-demo-creacked.apk</div></pre></td></tr></table></figure>
<h1 id="Androdump"><a href="#Androdump" class="headerlink" title="Androdump"></a>Androdump</h1><p>用来dump一个linux进程的信息</p>
<p>用来生成APK的GEXF格式图形文件，可以用Gephi查看</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./androgexf.py -i ./apk/smali-demo.apk -o ./apk/smali-demo.gexf</div></pre></td></tr></table></figure>
<h1 id="androlyze"><a href="#androlyze" class="headerlink" title="androlyze"></a>androlyze</h1><p>它提供一个交互式环境以提供我们分析apk</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./androlyze.py -s</div></pre></td></tr></table></figure>
<p>会进入一个shell交互式环境，我们可以通过他提供的对象来获取一些信息，经常用到的有3个对象：apk文件对象，dex文件对象，分析结果对象</p>
<h2 id="获取一个apk对象"><a href="#获取一个apk对象" class="headerlink" title="获取一个apk对象"></a>获取一个apk对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apk = APK(&quot;./apk/smali-demo-creacked.apk&quot;)</div></pre></td></tr></table></figure>
<p>apk.show(),apk.files:输出结果和androapkinfo结果差不多</p>
<p>get_permissions():所有权限</p>
<p>get_providers()：所有ContentProvider</p>
<p>get_receivers()：所有BroadcastReceiver</p>
<p>get_services():所有service</p>
<h2 id="dex对象"><a href="#dex对象" class="headerlink" title="dex对象"></a>dex对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dex=DalvikVMFormat(apk.get_dex())</div></pre></td></tr></table></figure>
<p>他保存了dex文件中所有的类(class_)</p>
<p>d.CLASS_Landroid_support_annotation_AnimatorRes：表示android.support.annotation.AnimatorRes类</p>
<p>方法(method)</p>
<p>d.CLASS_Lcn_woblog_testsmali_MainActivity.METHOD_isRegister</p>
<p>MainActivity的isRegister方法</p>
<p>字段信息(class<em>field</em>)</p>
<p>d.CLASS_Lcn_woblog_testsmali_MainActivity.FIELD_oblog_testsmali_MainActivity.FIELD_TAG</p>
<h3 id="查看方法详情"><a href="#查看方法详情" class="headerlink" title="查看方法详情"></a>查看方法详情</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">d.CLASS_Lcn_woblog_testsmali_MainActivity.METHOD_isRegister.pretty_show()</div></pre></td></tr></table></figure>
<p>输出如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">########## Method Information</div><div class="line">Lcn/woblog/testsmali/MainActivity;-&gt;isRegister()Z [access_flags=private]</div><div class="line">########## Params</div><div class="line">local registers: v0...v2</div><div class="line">- return: boolean</div><div class="line">####################</div><div class="line">***************************************************************************</div><div class="line">isRegister-BB@0x0 : </div><div class="line">	0  (00000000) iget-object         v0, v2, Lcn/woblog/testsmali/MainActivity;-&gt;et_code Landroid/widget/EditText;</div><div class="line">	1  (00000004) invoke-virtual      v0, Landroid/widget/EditText;-&gt;getText()Landroid/text/Editable;</div><div class="line">	2  (0000000a) move-result-object  v0</div><div class="line">	3  (0000000c) invoke-virtual      v0, Ljava/lang/Object;-&gt;toString()Ljava/lang/String;</div><div class="line">	4  (00000012) move-result-object  v0</div><div class="line">	5  (00000014) invoke-virtual      v0, Ljava/lang/String;-&gt;trim()Ljava/lang/String;</div><div class="line">	6  (0000001a) move-result-object  v0</div><div class="line">	7  (0000001c) const-string        v1, &apos;321&apos;</div><div class="line">	8  (00000020) invoke-virtual      v0, v1, Ljava/lang/String;-&gt;equals(Ljava/lang/Object;)Z</div><div class="line">	9  (00000026) move-result         v0</div><div class="line">	10 (00000028) return              v0</div><div class="line"></div><div class="line">***************************************************************************</div><div class="line">########## XREF</div><div class="line">F: Lcn/woblog/testsmali/MainActivity; access$100 (Lcn/woblog/testsmali/MainActivity;)Z 0</div><div class="line">####################</div></pre></td></tr></table></figure>
<p>下面有个XREF表示对象方法引用关系</p>
<p>F:改方法被其他方法调用</p>
<p>T:指定的方法被本方法调用</p>
<h3 id="显示java代码"><a href="#显示java代码" class="headerlink" title="显示java代码"></a>显示java代码</h3><p>d.CLASS_Lcn_woblog_testsmali_MainActivity.METHOD_isRegister.source()</p>
<p>我这里没测试通过一直报错</p>
<h2 id="结果对象"><a href="#结果对象" class="headerlink" title="结果对象"></a>结果对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">result=VMAnalysis(dex)</div></pre></td></tr></table></figure>
<p>也可以使用这个命令一次获得者三个对象</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a,d,dr=AnalyzeAPK(&quot;./apk/smali-demo.apk&quot;)</div></pre></td></tr></table></figure>
<h1 id="andromercury"><a href="#andromercury" class="headerlink" title="andromercury"></a>andromercury</h1><h1 id="androrisk"><a href="#androrisk" class="headerlink" title="androrisk"></a>androrisk</h1><p>用于评估apk文件中的风险</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./androrisk.py -m -i ./apk/smali-demo.apk</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">RedFlags</div><div class="line">DEX &#123;&apos;NATIVE&apos;: 0, &apos;DYNAMIC&apos;: 0, &apos;CRYPTO&apos;: 0, &apos;REFLECTION&apos;: 1&#125;</div><div class="line">APK &#123;&apos;DEX&apos;: 0, &apos;EXECUTABLE&apos;: 0, &apos;ZIP&apos;: 0, &apos;SHELL_SCRIPT&apos;: 0, &apos;APK&apos;: 0, &apos;SHARED LIBRARIES&apos;: 0&#125;</div><div class="line">PERM &#123;&apos;PRIVACY&apos;: 0, &apos;NORMAL&apos;: 0, &apos;MONEY&apos;: 0, &apos;INTERNET&apos;: 0, &apos;SMS&apos;: 0, &apos;DANGEROUS&apos;: 0, &apos;SIGNATUREORSYSTEM&apos;: 0, &apos;CALL&apos;: 0, &apos;SIGNATURE&apos;: 0, &apos;GPS&apos;: 0&#125;</div><div class="line">FuzzyRisk</div><div class="line">VALUE 0.0</div></pre></td></tr></table></figure>
<p>可以看到REFLECTION为1，表示代码中使用反射</p>
<h1 id="androsign-1"><a href="#androsign-1" class="headerlink" title="androsign"></a>androsign</h1><p>用于检测apk的信息是否存在于特定数据库中，他的作用于androcsign相反，我们可以将恶意信息的apk放到数据库，如果比对时发现相似信息，可以怀疑他也是恶意</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./androsim.py -i ./apk/smali-demo.apk ./apk/smali-demo-creacked.apk</div></pre></td></tr></table></figure>
<p>用来生成apk/jar/class/dex文件的控制流程以及功能调用图，输出格式为xgmml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/androxgmml.py -i ./apk/smali-demo.apk -o ./apk/smali-demo.xgmml</div></pre></td></tr></table></figure>
<h1 id="apkviewer"><a href="#apkviewer" class="headerlink" title="apkviewer"></a>apkviewer</h1><p>用来为apk文件中每一个类生成一个独立的graphml图形文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./apkviewer.py -i ./apk/smali-demo.apk -o ./apk/out</div></pre></td></tr></table></figure>
<p>可以使用gephi打开上面的文件</p>
<h1 id="gephi"><a href="#gephi" class="headerlink" title="gephi"></a>gephi</h1><p>这是一个开源软件，我们安装完成后，打开上面生成的gexf文件后，我们选择左边-布局-yifan hu，然后就会生成下图：</p>
<p><img src="http://7qnc6h.com1.z0.glb.clouddn.com/gephi-home.png" alt=""></p>
<p>当分析图生成后，我们可以点击下方的滑块可以调整线的粗细和字体大小颜色等</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;androguard (Android guard) 是 Android 应用程序的逆向工程，提供恶意软件分析等等功能。&lt;/p&gt;
&lt;p&gt;an
    
    </summary>
    
      <category term="androguard" scheme="http://i.woblog.cn/categories/androguard/"/>
    
    
      <category term="androguard" scheme="http://i.woblog.cn/tags/androguard/"/>
    
  </entry>
  
  <entry>
    <title>使用Ida pro来解除软件的注册码限制</title>
    <link href="http://i.woblog.cn/2016/08/07/simple-use-ida-to-creake-apk/"/>
    <id>http://i.woblog.cn/2016/08/07/simple-use-ida-to-creake-apk/</id>
    <published>2016-08-07T00:30:55.000Z</published>
    <updated>2016-11-21T15:12:36.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是ida-pro"><a href="#什么是ida-pro" class="headerlink" title="什么是ida pro"></a>什么是ida pro</h1><p>交互式反汇编器专业版（Interactive Disassembler Professional）,人们常称其为IDA Pro，说白了就是一个反编译器，能将各种二进制文件反编译较容易理解的语言格式(一般是汇编)具体的大家可以Google</p>
<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>我们本篇文章的目的是使用ida来解除一个软件的注册码显示，意思就是输入任何注册码就是正确的</p>
<h1 id="使用ida打开classes-dex"><a href="#使用ida打开classes-dex" class="headerlink" title="使用ida打开classes.dex"></a>使用ida打开classes.dex</h1><p>首先我们将待分析apk解压出classes.dex，并用ida打开</p>
<h1 id="找破解关键点"><a href="#找破解关键点" class="headerlink" title="找破解关键点"></a>找破解关键点</h1><p>我们将待破解的软件安装到手机上，发现有一个输入框，下面有个按钮，我们随便输入一个注册码，点击注册提示register fail，说明注册码是错误的，这个字符串就是我们的破解的关键点</p>
<h1 id="多种方法来定位关键代码"><a href="#多种方法来定位关键代码" class="headerlink" title="多种方法来定位关键代码"></a>多种方法来定位关键代码</h1><h2 id="特征字符串定位"><a href="#特征字符串定位" class="headerlink" title="特征字符串定位"></a>特征字符串定位</h2><p>这种方法使用我们出发一些事件后，他会做出一些响应，比如：密码错误，注册码错误等，所以我们只需要搜索这些字符串，然后就可以快速的定位到关键代码点</p>
<p>首先我们按ctrl+s打开段选择对话框，然后双击STRINGS就跳到了字符串段区，然后按alt+t出现搜索字符串对话框，输入register success，过一会儿就会跳转到关键代码点了，然后选择graph view，可以看到如下图：</p>
<p><img src="http://7qnc6h.com1.z0.glb.clouddn.com/po-dex.png" alt=""></p>
<p>可以从上图发现register success字符串，并且可以看见两条线，红线表示条件不成立执行，绿线表示满足执行，可以发现关键点就是if-eqz代码了，接下来我们来的当前代码的为止，用16进制编辑器将38改为39，然后保存，使用dex签名修复完成后，然后和原来的代码打包成ask，然后签名，在安装，发现成功了</p>
<h2 id="关键api"><a href="#关键api" class="headerlink" title="关键api"></a>关键api</h2><p>关键api的意思是，我们不管输入正确或错误他都会弹出toast提示，这就是我们的关键api，我们打开code段，还是搜索text,输入toast.make，如果有个调用的地方我们需要搜索下一个(ctrl+t)，直到搜索到我们需要的代码，然后就可以根据上面说的方法来修改关键代码了</p>
<h1 id="签名并测试"><a href="#签名并测试" class="headerlink" title="签名并测试"></a>签名并测试</h1><p>签名后并安装到手机查看是否破解成功</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是ida-pro&quot;&gt;&lt;a href=&quot;#什么是ida-pro&quot; class=&quot;headerlink&quot; title=&quot;什么是ida pro&quot;&gt;&lt;/a&gt;什么是ida pro&lt;/h1&gt;&lt;p&gt;交互式反汇编器专业版（Interactive Disassembler Pr
    
    </summary>
    
      <category term="Dalvik" scheme="http://i.woblog.cn/categories/Dalvik/"/>
    
    
      <category term="ida pro" scheme="http://i.woblog.cn/tags/ida-pro/"/>
    
      <category term="注册码" scheme="http://i.woblog.cn/tags/%E6%B3%A8%E5%86%8C%E7%A0%81/"/>
    
      <category term="破解" scheme="http://i.woblog.cn/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Smali语法与Java语法的对比</title>
    <link href="http://i.woblog.cn/2016/08/05/smali-compare-java-sytax/"/>
    <id>http://i.woblog.cn/2016/08/05/smali-compare-java-sytax/</id>
    <published>2016-08-05T11:41:27.000Z</published>
    <updated>2016-11-21T15:12:36.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="smali文件格式"><a href="#smali文件格式" class="headerlink" title="smali文件格式"></a>smali文件格式</h1><p>反编译过来的smali文件会依次根据包名放在相应的目录里，普通类，抽象类，接口和内部类都是单独的smali文件</p>
<h2 id="文件头"><a href="#文件头" class="headerlink" title="文件头"></a>文件头</h2><p>每个文件头前3行描述了当前类的一些信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.class &lt;权限修饰符&gt; [修饰关键字] &lt;类名&gt; #classIdx</div><div class="line">.super &lt;父类名&gt; #superclassIdx</div><div class="line">.source &lt;源文件名(没有路径)&gt; #sourceFileIdx</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.class public Lcom/example/testsmali/MainActivity;</div><div class="line">.super Landroid/app/Activity;</div><div class="line">.source &quot;MainActivity.java&quot;</div></pre></td></tr></table></figure>
<p>如果没有父类，就没有.super这行，混淆后的apk .source有可能就没有值，其实这里面的信息就是Dex中DexClassDef结构中的</p>
<p>加有final修饰符的结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.class public final Lcom/woblog/testsmali/smali/StaticFinalClass;</div><div class="line">.super Ljava/lang/Object;</div><div class="line">.source &quot;StaticFinalClass.java&quot;</div></pre></td></tr></table></figure>
<h1 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h1><p>使用.field 声明</p>
<h2 id="实例字段"><a href="#实例字段" class="headerlink" title="实例字段"></a>实例字段</h2><p>.field &lt;权限修饰符&gt; [修饰关键字] &lt;字段名&gt;:&lt;字段类型&gt;</p>
<h2 id="静态字段"><a href="#静态字段" class="headerlink" title="静态字段"></a>静态字段</h2><p>.field &lt;权限修饰符&gt; static [修饰关键字] &lt;字段名&gt;:&lt;字段类型&gt;</p>
<p>可以看到静态的只是多了static修饰关键字</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># static fields</div><div class="line">.field private static name:Ljava/lang/String; = null</div><div class="line"></div><div class="line">.field private static final password:Ljava/lang/String; = &quot;123456&quot;</div><div class="line"></div><div class="line"></div><div class="line"># instance fields</div><div class="line">.field private final age:I</div><div class="line"></div><div class="line">.field private price:Ljava/lang/Integer;</div></pre></td></tr></table></figure>
<p><code># instance fields</code>这是baksmali添加的注释</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">private static String name;</div><div class="line">private static final String password = &quot;123456&quot;;</div><div class="line">private final int age = 25;</div><div class="line">private Integer price = 888888;</div></pre></td></tr></table></figure>
<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>使用.method指令声明</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># direct method</div><div class="line">.method &lt;权限修饰符&gt; [修饰关键字] &lt;方法原型&gt;</div><div class="line">	&lt;.locals&gt;</div><div class="line">	[.param]</div><div class="line">	[.prologue]</div><div class="line">	[.line]</div><div class="line"></div><div class="line">	&lt;代码块&gt;</div><div class="line"></div><div class="line">.end method</div></pre></td></tr></table></figure>
<p><code># direct methods</code>是baksmali添加的注释</p>
<p>locals:局部变量数</p>
<p>param：参数</p>
<p>prologue：代码开始</p>
<p>line：源代码行数，混淆了可能没有</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">.method public static append([III)[I</div><div class="line">    .locals 4</div><div class="line">    .param p0, &quot;array&quot;    # [I</div><div class="line">    .param p1, &quot;currentSize&quot;    # I</div><div class="line">    .param p2, &quot;element&quot;    # I</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    const/4 v3, 0x0</div><div class="line"></div><div class="line">    .line 57</div><div class="line">    sget-boolean v1, Landroid/support/v7/content/res/GrowingArrayUtils;-&gt;$assertionsDisabled:Z</div><div class="line"></div><div class="line">    if-nez v1, :cond_0</div><div class="line"></div><div class="line">    array-length v1, p0</div><div class="line"></div><div class="line">    if-le p1, v1, :cond_0</div><div class="line"></div><div class="line">    new-instance v1, Ljava/lang/AssertionError;</div><div class="line"></div><div class="line">    invoke-direct &#123;v1&#125;, Ljava/lang/AssertionError;-&gt;&lt;init&gt;()V</div><div class="line"></div><div class="line">    throw v1</div><div class="line"></div><div class="line">    .line 59</div><div class="line">    :cond_0</div><div class="line">    add-int/lit8 v1, p1, 0x1</div><div class="line"></div><div class="line">    array-length v2, p0</div><div class="line"></div><div class="line">    if-le v1, v2, :cond_1</div><div class="line"></div><div class="line">    .line 60</div><div class="line">    invoke-static &#123;p1&#125;, Landroid/support/v7/content/res/GrowingArrayUtils;-&gt;growSize(I)I</div><div class="line"></div><div class="line">    move-result v1</div><div class="line"></div><div class="line">    new-array v0, v1, [I</div><div class="line"></div><div class="line">    .line 61</div><div class="line">    .local v0, &quot;newArray&quot;:[I</div><div class="line">    invoke-static &#123;p0, v3, v0, v3, p1&#125;, Ljava/lang/System;-&gt;arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V</div><div class="line"></div><div class="line">    .line 62</div><div class="line">    move-object p0, v0</div><div class="line"></div><div class="line">    .line 64</div><div class="line">    .end local v0    # &quot;newArray&quot;:[I</div><div class="line">    :cond_1</div><div class="line">    aput p2, p0, p1</div><div class="line"></div><div class="line">    .line 65</div><div class="line">    return-object p0</div><div class="line">.end method</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] append(<span class="keyword">int</span>[] array, <span class="keyword">int</span> currentSize, <span class="keyword">int</span> element) &#123;</div><div class="line">    <span class="keyword">assert</span> currentSize &lt;= array.length;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (currentSize + <span class="number">1</span> &gt; array.length) &#123;</div><div class="line">        <span class="keyword">int</span>[] newArray = <span class="keyword">new</span> <span class="keyword">int</span>[growSize(currentSize)];</div><div class="line">        System.arraycopy(array, <span class="number">0</span>, newArray, <span class="number">0</span>, currentSize);</div><div class="line">        array = newArray;</div><div class="line">    &#125;</div><div class="line">    array[currentSize] = element;</div><div class="line">    <span class="keyword">return</span> array;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>direct methods：直接方法</p>
<p>virtual methods:虚方法</p>
<p>他们的区别是直接方法一般是private，虚方法一般是覆盖，重载，或者实现的接口，抽象类的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"># direct methods</div><div class="line">.method public constructor &lt;init&gt;()V</div><div class="line">    .locals 1</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 3</div><div class="line">    invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</div><div class="line"></div><div class="line">    .line 6</div><div class="line">    const/16 v0, 0x19</div><div class="line"></div><div class="line">    iput v0, p0, Lcn/woblog/testsmali/smali/StaticFinalClass;-&gt;age:I</div><div class="line"></div><div class="line">    .line 7</div><div class="line">    const v0, 0xd9038</div><div class="line"></div><div class="line">    invoke-static &#123;v0&#125;, Ljava/lang/Integer;-&gt;valueOf(I)Ljava/lang/Integer;</div><div class="line"></div><div class="line">    move-result-object v0</div><div class="line"></div><div class="line">    iput-object v0, p0, Lcn/woblog/testsmali/smali/StaticFinalClass;-&gt;price:Ljava/lang/Integer;</div><div class="line"></div><div class="line">    return-void</div><div class="line">.end method</div></pre></td></tr></table></figure>
<h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><p>如果方法的声明中使用throws关键字抛出异常，就会生成Throws注解</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"># virtual methods</div><div class="line">.method public throw1()V</div><div class="line">    .locals 1</div><div class="line">    .annotation system Ldalvik/annotation/Throws;</div><div class="line">        value = &#123;</div><div class="line">            Ljava/lang/Exception;</div><div class="line">        &#125;</div><div class="line">    .end annotation</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 5</div><div class="line">    new-instance v0, Ljava/lang/Exception;</div><div class="line"></div><div class="line">    invoke-direct &#123;v0&#125;, Ljava/lang/Exception;-&gt;&lt;init&gt;()V</div><div class="line"></div><div class="line">    throw v0</div><div class="line">.end method</div><div class="line"></div><div class="line">.method public throw2()V</div><div class="line">    .locals 1</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 9</div><div class="line">    new-instance v0, Ljava/lang/RuntimeException;</div><div class="line"></div><div class="line">    invoke-direct &#123;v0&#125;, Ljava/lang/RuntimeException;-&gt;&lt;init&gt;()V</div><div class="line"></div><div class="line">    throw v0</div><div class="line">.end method</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class ThrowClass &#123;</div><div class="line">    public void throw1() throws Exception &#123;</div><div class="line">        throw new Exception();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void throw2() &#123;</div><div class="line">        throw new RuntimeException();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="类实现了接口"><a href="#类实现了接口" class="headerlink" title="类实现了接口"></a>类实现了接口</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># interfcase</div><div class="line">.implements &lt;接口名&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># interfaces</div><div class="line">.implements Lcn/woblog/testsmali/ICallback; #来着interfacesOff指定的结构体中的值</div><div class="line">.implements Lcn/woblog/testsmali/ICallbackTwo;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Callback</span> <span class="keyword">implements</span> <span class="title">ICallback</span>,<span class="title">ICallbackTwo</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">success</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>注解可以作用到类，方法和字段，但他们的表现形式是不一样的</p>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>类的注解是直接添加到smali文件上面的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># annotations &lt;注解属性&gt; &lt;注解类名&gt;</div><div class="line">	[注解字段=值]</div><div class="line">.end annotation</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># annotations</div><div class="line">.annotation runtime Lcn/woblog/testsmali/smali/MyClassAnnotation;</div><div class="line">    otherName = &quot;otherName&quot;</div><div class="line">.end annotation</div><div class="line"></div><div class="line">.annotation runtime Lcn/woblog/testsmali/smali/MyClassAnnotationTwo;</div><div class="line">    value = &quot;value&quot;</div><div class="line">.end annotation</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@MyClassAnnotation</span>(otherName = <span class="string">"otherName"</span>)</div><div class="line"><span class="meta">@MyClassAnnotationTwo</span>(<span class="string">"value"</span>)</div><div class="line"><span class="comment">//@MyClassAnnotationTwo(value = "value")</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Callback</span></span>&#123;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="字段-1"><a href="#字段-1" class="headerlink" title="字段"></a>字段</h2><p>如果注解在字段上，他会被包含在field里面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.field &lt;权限修饰符&gt; static [修饰关键字] &lt;字段名&gt;:&lt;字段类型&gt;</div><div class="line">	# annotations &lt;注解属性&gt; &lt;注解类名&gt;</div><div class="line">		[注解字段=值]</div><div class="line">	.end annotation</div><div class="line">..end field</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># instance fields</div><div class="line">.field private name:Ljava/lang/String;</div><div class="line">    .annotation runtime Lcn/woblog/testsmali/smali/MyFiledAnnotation;</div><div class="line">        report = false</div><div class="line">        tag = &quot;tag1&quot;</div><div class="line">    .end annotation</div><div class="line">.end field</div><div class="line"></div><div class="line">.field private password:Ljava/lang/String;</div><div class="line">    .annotation runtime Lcn/woblog/testsmali/smali/MyFiledAnnotation;</div><div class="line">        report = true</div><div class="line">    .end annotation</div><div class="line">.end field</div><div class="line"></div><div class="line">.field private vip:Z</div><div class="line">    .annotation runtime Lcn/woblog/testsmali/smali/MyFiledAnnotation;</div><div class="line">        report = false</div><div class="line">    .end annotation</div><div class="line">.end field</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//字段注解</span></div><div class="line"><span class="meta">@MyFiledAnnotation</span>(tag = <span class="string">"tag1"</span>,report = <span class="keyword">false</span>)</div><div class="line"><span class="keyword">private</span> String name;</div><div class="line"></div><div class="line"><span class="meta">@MyFiledAnnotation</span>(report = <span class="keyword">true</span>)</div><div class="line"><span class="keyword">private</span> String password;</div><div class="line"></div><div class="line"><span class="meta">@MyFiledAnnotation</span>(report = <span class="keyword">false</span>)</div><div class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> vip;</div></pre></td></tr></table></figure>
<h1 id="类-1"><a href="#类-1" class="headerlink" title="类"></a>类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.class public Lcn/woblog/testsmali/Callback;</div><div class="line">.super Ljava/lang/Object;</div><div class="line">.source &quot;Callback.java&quot;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">package cn.woblog.testsmali.smali;</div><div class="line"></div><div class="line">public final class StaticFinalClass &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><p>内部类可分为，内部类，静态嵌套类，方法内部类，匿名内部类，他为每个内部类生成一个独立的文件，格式为：[外部类]$[内部类].smali</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">package cn.woblog.testsmali.smali;</div><div class="line"></div><div class="line">import android.util.Log;</div><div class="line"></div><div class="line">public class OuterClass &#123;</div><div class="line">    //内部类</div><div class="line">    class Inner &#123;</div><div class="line">        class Inner1 &#123;</div><div class="line">            public void main() &#123;</div><div class="line">                Inner inner = new Inner();</div><div class="line">                inner.run();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void run() &#123;</div><div class="line">            Log.d(&quot;TAG&quot;, &quot;run&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //静态内部类</div><div class="line">    public static class InnerStatic &#123;</div><div class="line">        public void main() &#123;</div><div class="line">            new Thread() &#123;</div><div class="line">                @Override</div><div class="line">                public void run() &#123;</div><div class="line">                    super.run();</div><div class="line">                    Log.d(&quot;TAG&quot;, &quot;static run&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;.start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述代码会生成下面这些smali文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">OuterClass$Inner$Inner1.smali</div><div class="line">OuterClass$Inner.smali</div><div class="line">OuterClass$InnerStatic$1.smali</div><div class="line">OuterClass$InnerStatic.smali</div><div class="line">OuterClass.smali</div></pre></td></tr></table></figure>
<p>可以看见内部类是以$符号分隔每个类的，匿名内部类会依次生成$1~这样的格式</p>
<p>OuterClass.smali</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">.class public Lcn/woblog/testsmali/smali/OuterClass;</div><div class="line">.super Ljava/lang/Object;</div><div class="line">.source &quot;OuterClass.java&quot;</div><div class="line"></div><div class="line"></div><div class="line"># annotations</div><div class="line">.annotation system Ldalvik/annotation/MemberClasses;</div><div class="line">    value = &#123;</div><div class="line">        Lcn/woblog/testsmali/smali/OuterClass$InnerStatic;,</div><div class="line">        Lcn/woblog/testsmali/smali/OuterClass$Inner;</div><div class="line">    &#125;</div><div class="line">.end annotation</div><div class="line"></div><div class="line"></div><div class="line"># direct methods</div><div class="line">.method public constructor &lt;init&gt;()V</div><div class="line">    .locals 0</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 5</div><div class="line">    invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</div><div class="line"></div><div class="line">    return-void</div><div class="line">.end method</div></pre></td></tr></table></figure>
<p>可以看见如果一个类中有定义内部类，那么会有MemberClasses的注解，他的value是一个列表，里面是每一个类名</p>
<p>OuterClass$Inner.smali</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">.class Lcn/woblog/testsmali/smali/OuterClass$Inner;</div><div class="line">.super Ljava/lang/Object;</div><div class="line">.source &quot;OuterClass.java&quot;</div><div class="line"></div><div class="line"></div><div class="line"># annotations</div><div class="line">.annotation system Ldalvik/annotation/EnclosingClass;</div><div class="line">    value = Lcn/woblog/testsmali/smali/OuterClass;</div><div class="line">.end annotation</div><div class="line"></div><div class="line">.annotation system Ldalvik/annotation/InnerClass;</div><div class="line">    accessFlags = 0x0</div><div class="line">    name = &quot;Inner&quot;</div><div class="line">.end annotation</div><div class="line"></div><div class="line">.annotation system Ldalvik/annotation/MemberClasses;</div><div class="line">    value = &#123;</div><div class="line">        Lcn/woblog/testsmali/smali/OuterClass$Inner$Inner1;</div><div class="line">    &#125;</div><div class="line">.end annotation</div><div class="line"></div><div class="line"></div><div class="line"># instance fields</div><div class="line">.field final synthetic this$0:Lcn/woblog/testsmali/smali/OuterClass;</div><div class="line"></div><div class="line"></div><div class="line"># direct methods</div><div class="line">.method constructor &lt;init&gt;(Lcn/woblog/testsmali/smali/OuterClass;)V</div><div class="line">    .locals 0</div><div class="line">    .param p1, &quot;this$0&quot;    # Lcn/woblog/testsmali/smali/OuterClass;</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 7</div><div class="line">    iput-object p1, p0, Lcn/woblog/testsmali/smali/OuterClass$Inner;-&gt;this$0:Lcn/woblog/testsmali/smali/OuterClass;</div><div class="line"></div><div class="line">    invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</div><div class="line"></div><div class="line">    return-void</div><div class="line">.end method</div><div class="line"></div><div class="line"></div><div class="line"># virtual methods</div><div class="line">.method public run()V</div><div class="line">    .locals 2</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 16</div><div class="line">    const-string v0, &quot;TAG&quot;</div><div class="line"></div><div class="line">    const-string v1, &quot;run&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    .line 17</div><div class="line">    return-void</div><div class="line">.end method</div></pre></td></tr></table></figure>
<p>如果是一个内部类，他有两个注解EnclosingClass，InnerClass</p>
<p>EnclosingClass：里面的值为父类类名</p>
<p>InnerClass：定义了内部类一些信息</p>
<p>​    accessFlags = 0x0：访问修饰符<br>      name = “Inner”：内部类类名，如果是匿名内部类他为name = null</p>
<p>还有一个synthetic修饰的this$0实例字段，是外部类的引用，0表示引用层数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class OuterClass &#123; //this$0</div><div class="line">    class Inner &#123; //this$1</div><div class="line">        class Inner1 &#123;</div><div class="line">            public void main() &#123;</div><div class="line">                Inner inner = new Inner();</div><div class="line">                inner.run();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>synthetic表示合成的，表示不是我们自己写的，而是编译器生成的，下面我们来看看内部类的初始化过程</p>
<p>首先他的init方法有两个参数，第一个p0是this,p1是外部类的应用，传递进来赋值给this$0，然后在调用父类的初始化方法</p>
<p>OuterClass$Inner$Inner1.smali</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">.class Lcn/woblog/testsmali/smali/OuterClass$Inner$Inner1;</div><div class="line">.super Ljava/lang/Object;</div><div class="line">.source &quot;OuterClass.java&quot;</div><div class="line"></div><div class="line"></div><div class="line"># annotations</div><div class="line">.annotation system Ldalvik/annotation/EnclosingClass;</div><div class="line">    value = Lcn/woblog/testsmali/smali/OuterClass$Inner;</div><div class="line">.end annotation</div><div class="line"></div><div class="line">.annotation system Ldalvik/annotation/InnerClass;</div><div class="line">    accessFlags = 0x0</div><div class="line">    name = &quot;Inner1&quot;</div><div class="line">.end annotation</div><div class="line"></div><div class="line"></div><div class="line"># instance fields</div><div class="line">.field final synthetic this$1:Lcn/woblog/testsmali/smali/OuterClass$Inner;</div><div class="line"></div><div class="line"></div><div class="line"># direct methods</div><div class="line">.method constructor &lt;init&gt;(Lcn/woblog/testsmali/smali/OuterClass$Inner;)V</div><div class="line">    .locals 0</div><div class="line">    .param p1, &quot;this$1&quot;    # Lcn/woblog/testsmali/smali/OuterClass$Inner;</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 8</div><div class="line">    iput-object p1, p0, Lcn/woblog/testsmali/smali/OuterClass$Inner$Inner1;-&gt;this$1:Lcn/woblog/testsmali/smali/OuterClass$Inner;</div><div class="line"></div><div class="line">    invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</div><div class="line"></div><div class="line">    return-void</div><div class="line">.end method</div><div class="line"></div><div class="line"></div><div class="line"># virtual methods</div><div class="line">.method public main()V</div><div class="line">    .locals 2</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 10</div><div class="line">    new-instance v0, Lcn/woblog/testsmali/smali/OuterClass$Inner;</div><div class="line"></div><div class="line">    iget-object v1, p0, Lcn/woblog/testsmali/smali/OuterClass$Inner$Inner1;-&gt;this$1:Lcn/woblog/testsmali/smali/OuterClass$Inner;</div><div class="line"></div><div class="line">    iget-object v1, v1, Lcn/woblog/testsmali/smali/OuterClass$Inner;-&gt;this$0:Lcn/woblog/testsmali/smali/OuterClass;</div><div class="line"></div><div class="line">    invoke-direct &#123;v0, v1&#125;, Lcn/woblog/testsmali/smali/OuterClass$Inner;-&gt;&lt;init&gt;(Lcn/woblog/testsmali/smali/OuterClass;)V</div><div class="line"></div><div class="line">    .line 11</div><div class="line">    .local v0, &quot;inner&quot;:Lcn/woblog/testsmali/smali/OuterClass$Inner;</div><div class="line">    invoke-virtual &#123;v0&#125;, Lcn/woblog/testsmali/smali/OuterClass$Inner;-&gt;run()V</div><div class="line"></div><div class="line">    .line 12</div><div class="line">    return-void</div><div class="line">.end method</div></pre></td></tr></table></figure>
<p>OuterClass$InnerStatic$1.smali</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">.class Lcn/woblog/testsmali/smali/OuterClass$InnerStatic$1;</div><div class="line">.super Ljava/lang/Thread;</div><div class="line">.source &quot;OuterClass.java&quot;</div><div class="line"></div><div class="line"></div><div class="line"># annotations</div><div class="line">.annotation system Ldalvik/annotation/EnclosingMethod;</div><div class="line">    value = Lcn/woblog/testsmali/smali/OuterClass$InnerStatic;-&gt;main()V</div><div class="line">.end annotation</div><div class="line"></div><div class="line">.annotation system Ldalvik/annotation/InnerClass;</div><div class="line">    accessFlags = 0x0</div><div class="line">    name = null</div><div class="line">.end annotation</div><div class="line"></div><div class="line"></div><div class="line"># instance fields</div><div class="line">.field final synthetic this$0:Lcn/woblog/testsmali/smali/OuterClass$InnerStatic;</div><div class="line"></div><div class="line"></div><div class="line"># direct methods</div><div class="line">.method constructor &lt;init&gt;(Lcn/woblog/testsmali/smali/OuterClass$InnerStatic;)V</div><div class="line">    .locals 0</div><div class="line">    .param p1, &quot;this$0&quot;    # Lcn/woblog/testsmali/smali/OuterClass$InnerStatic;</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 23</div><div class="line">    iput-object p1, p0, Lcn/woblog/testsmali/smali/OuterClass$InnerStatic$1;-&gt;this$0:Lcn/woblog/testsmali/smali/OuterClass$InnerStatic;</div><div class="line"></div><div class="line">    invoke-direct &#123;p0&#125;, Ljava/lang/Thread;-&gt;&lt;init&gt;()V</div><div class="line"></div><div class="line">    return-void</div><div class="line">.end method</div><div class="line"></div><div class="line"></div><div class="line"># virtual methods</div><div class="line">.method public run()V</div><div class="line">    .locals 2</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 26</div><div class="line">    invoke-super &#123;p0&#125;, Ljava/lang/Thread;-&gt;run()V</div><div class="line"></div><div class="line">    .line 27</div><div class="line">    const-string v0, &quot;TAG&quot;</div><div class="line"></div><div class="line">    const-string v1, &quot;static run&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    .line 28</div><div class="line">    return-void</div><div class="line">.end method</div></pre></td></tr></table></figure>
<h1 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">const v2, 0x7f0b0054</div><div class="line"></div><div class="line">invoke-virtual &#123;p0, v2&#125;, Lcn/woblog/testsmali/MainActivity;-&gt;findViewById(I)Landroid/view/View;</div><div class="line"></div><div class="line">move-result-object v0</div><div class="line"></div><div class="line">check-cast v0, Landroid/widget/Button;</div><div class="line"></div><div class="line">.line 37</div><div class="line">.local v0, &quot;bt1&quot;:Landroid/widget/Button;</div><div class="line">new-instance v2, Lcn/woblog/testsmali/MainActivity$1; //创建匿名监听器对象</div><div class="line"></div><div class="line">invoke-direct &#123;v2, p0&#125;, Lcn/woblog/testsmali/MainActivity$1;-&gt;&lt;init&gt;(Lcn/woblog/testsmali/MainActivity;)V</div><div class="line"></div><div class="line">invoke-virtual &#123;v0, v2&#125;, Landroid/widget/Button;-&gt;setOnClickListener(Landroid/view/View$OnClickListener;)V //设置匿名监听器</div><div class="line"></div><div class="line">.line 44</div><div class="line">const v2, 0x7f0b0055</div><div class="line"></div><div class="line">invoke-virtual &#123;p0, v2&#125;, Lcn/woblog/testsmali/MainActivity;-&gt;findViewById(I)Landroid/view/View;</div><div class="line"></div><div class="line">move-result-object v1</div><div class="line"></div><div class="line">check-cast v1, Landroid/widget/Button;</div><div class="line"></div><div class="line">.line 45</div><div class="line">.local v1, &quot;bt2&quot;:Landroid/widget/Button;</div><div class="line">invoke-virtual &#123;v1, p0&#125;, Landroid/widget/Button;-&gt;setOnClickListener(Landroid/view/View$OnClickListener;)V //设置类监听器</div></pre></td></tr></table></figure>
<p>MainActivity$1.smali</p>
<p>匿名监听器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">.class Lcn/woblog/testsmali/MainActivity$1;</div><div class="line">.super Ljava/lang/Object;</div><div class="line">.source &quot;MainActivity.java&quot;</div><div class="line"></div><div class="line"># interfaces</div><div class="line">.implements Landroid/view/View$OnClickListener;</div><div class="line"></div><div class="line"></div><div class="line"># annotations</div><div class="line">.annotation system Ldalvik/annotation/EnclosingMethod;</div><div class="line">    value = Lcn/woblog/testsmali/MainActivity;-&gt;testListener()V</div><div class="line">.end annotation</div><div class="line"></div><div class="line">.annotation system Ldalvik/annotation/InnerClass;</div><div class="line">    accessFlags = 0x0</div><div class="line">    name = null</div><div class="line">.end annotation</div><div class="line"></div><div class="line"></div><div class="line"># instance fields</div><div class="line">.field final synthetic this$0:Lcn/woblog/testsmali/MainActivity;</div><div class="line"></div><div class="line"></div><div class="line"># direct methods</div><div class="line">.method constructor &lt;init&gt;(Lcn/woblog/testsmali/MainActivity;)V</div><div class="line">    .locals 0</div><div class="line">    .param p1, &quot;this$0&quot;    # Lcn/woblog/testsmali/MainActivity;</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 37</div><div class="line">    iput-object p1, p0, Lcn/woblog/testsmali/MainActivity$1;-&gt;this$0:Lcn/woblog/testsmali/MainActivity;</div><div class="line"></div><div class="line">    invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</div><div class="line"></div><div class="line">    return-void</div><div class="line">.end method</div><div class="line"></div><div class="line"></div><div class="line"># virtual methods</div><div class="line">.method public onClick(Landroid/view/View;)V</div><div class="line">    .locals 2</div><div class="line">    .param p1, &quot;view&quot;    # Landroid/view/View;</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 40</div><div class="line">    const-string v0, &quot;TAG&quot;</div><div class="line"></div><div class="line">    const-string v1, &quot;onClick&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    .line 41</div><div class="line">    return-void</div><div class="line">.end method</div></pre></td></tr></table></figure>
<p>类监听器</p>
<p>首先类要实现接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># interfaces</div><div class="line">.implements Landroid/view/View$OnClickListener;</div></pre></td></tr></table></figure>
<p>并实现OnClickListener的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">.method public onClick(Landroid/view/View;)V</div><div class="line">    .locals 2</div><div class="line">    .param p1, &quot;view&quot;    # Landroid/view/View;</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 383</div><div class="line">    const-string v0, &quot;TAG&quot;</div><div class="line"></div><div class="line">    const-string v1, &quot;onClick1&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    .line 384</div><div class="line">    return-void</div><div class="line">.end method</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Button bt1 = (Button) findViewById(R.id.bt1);</div><div class="line">bt1.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">    @Override</div><div class="line">    public void onClick(View view) &#123;</div><div class="line">        Log.d(&quot;TAG&quot;, &quot;onClick&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">Button bt2 = (Button) findViewById(R.id.bt2);</div><div class="line">bt2.setOnClickListener(this);</div></pre></td></tr></table></figure>
<h1 id="for"><a href="#for" class="headerlink" title="for"></a>for</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Iterator&lt;对象&gt; &lt;对象名&gt; = &lt;方法返回一个对象列表&gt;;</div><div class="line">for (&lt;对象&gt; &lt;对象名&gt;:&lt;对象列表&gt;) &#123;</div><div class="line">	[code]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Iterator&lt;对象&gt; &lt;对象名&gt; = &lt;方法返回一个对象列表&gt;;</div><div class="line">while(&lt;对象名&gt;.hasNext()) &#123;</div><div class="line">	&lt;对象&gt; &lt;对象名&gt; = &lt;对象名&gt;.next();</div><div class="line">	[code]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">public class Loop &#123;</div><div class="line"></div><div class="line">    public void for1()&#123;</div><div class="line">        ArrayList&lt;String&gt; strings = new ArrayList&lt;&gt;();</div><div class="line">        strings.add(&quot;a&quot;);</div><div class="line">        strings.add(&quot;b&quot;);</div><div class="line">        strings.add(&quot;c&quot;);</div><div class="line">        strings.add(&quot;d&quot;);</div><div class="line"></div><div class="line">        for (String s:strings) &#123;</div><div class="line">            Log.d(&quot;TAG&quot;,s);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void for2()&#123;</div><div class="line">        ArrayList&lt;String&gt; strings = new ArrayList&lt;&gt;();</div><div class="line">        strings.add(&quot;a&quot;);</div><div class="line">        strings.add(&quot;b&quot;);</div><div class="line">        strings.add(&quot;c&quot;);</div><div class="line">        strings.add(&quot;d&quot;);</div><div class="line"></div><div class="line">        for (int i = 0; i &lt; strings.size(); i++) &#123;</div><div class="line">            Log.d(&quot;TAG&quot;,strings.get(i));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void while1()&#123;</div><div class="line">        ArrayList&lt;String&gt; strings = new ArrayList&lt;&gt;();</div><div class="line">        strings.add(&quot;a&quot;);</div><div class="line">        strings.add(&quot;b&quot;);</div><div class="line">        strings.add(&quot;c&quot;);</div><div class="line">        strings.add(&quot;d&quot;);</div><div class="line"></div><div class="line"></div><div class="line">        Iterator&lt;String&gt; iterator = strings.iterator();</div><div class="line">        while (iterator.hasNext()) &#123;</div><div class="line">            Log.d(&quot;TAG&quot;,iterator.next());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div></pre></td><td class="code"><pre><div class="line">.class public Lcn/woblog/testsmali/smali/Loop;</div><div class="line">.super Ljava/lang/Object;</div><div class="line">.source &quot;Loop.java&quot;</div><div class="line"></div><div class="line"></div><div class="line"># direct methods</div><div class="line">.method public constructor &lt;init&gt;()V</div><div class="line">    .locals 0</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 8</div><div class="line">    invoke-direct &#123;p0&#125;, Ljava/lang/Object;-&gt;&lt;init&gt;()V</div><div class="line"></div><div class="line">    return-void</div><div class="line">.end method</div><div class="line"></div><div class="line"></div><div class="line"># virtual methods</div><div class="line">.method public for1()V</div><div class="line">    .locals 4</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 11</div><div class="line">    new-instance v1, Ljava/util/ArrayList;</div><div class="line"></div><div class="line">    invoke-direct &#123;v1&#125;, Ljava/util/ArrayList;-&gt;&lt;init&gt;()V</div><div class="line"></div><div class="line">    .line 12</div><div class="line">    .local v1, &quot;strings&quot;:Ljava/util/ArrayList;, &quot;Ljava/util/ArrayList&lt;Ljava/lang/String;&gt;;&quot;</div><div class="line">    const-string v2, &quot;a&quot;</div><div class="line"></div><div class="line">    invoke-virtual &#123;v1, v2&#125;, Ljava/util/ArrayList;-&gt;add(Ljava/lang/Object;)Z</div><div class="line"></div><div class="line">    .line 13</div><div class="line">    const-string v2, &quot;b&quot;</div><div class="line"></div><div class="line">    invoke-virtual &#123;v1, v2&#125;, Ljava/util/ArrayList;-&gt;add(Ljava/lang/Object;)Z</div><div class="line"></div><div class="line">    .line 14</div><div class="line">    const-string v2, &quot;c&quot;</div><div class="line"></div><div class="line">    invoke-virtual &#123;v1, v2&#125;, Ljava/util/ArrayList;-&gt;add(Ljava/lang/Object;)Z</div><div class="line"></div><div class="line">    .line 15</div><div class="line">    const-string v2, &quot;d&quot;</div><div class="line"></div><div class="line">    invoke-virtual &#123;v1, v2&#125;, Ljava/util/ArrayList;-&gt;add(Ljava/lang/Object;)Z</div><div class="line"></div><div class="line">    .line 17</div><div class="line">    invoke-virtual &#123;v1&#125;, Ljava/util/ArrayList;-&gt;iterator()Ljava/util/Iterator;</div><div class="line"></div><div class="line">    move-result-object v2</div><div class="line"></div><div class="line">    :goto_0</div><div class="line">    invoke-interface &#123;v2&#125;, Ljava/util/Iterator;-&gt;hasNext()Z</div><div class="line"></div><div class="line">    move-result v3</div><div class="line"></div><div class="line">    if-eqz v3, :cond_0</div><div class="line"></div><div class="line">    invoke-interface &#123;v2&#125;, Ljava/util/Iterator;-&gt;next()Ljava/lang/Object;</div><div class="line"></div><div class="line">    move-result-object v0</div><div class="line"></div><div class="line">    check-cast v0, Ljava/lang/String;</div><div class="line"></div><div class="line">    .line 18</div><div class="line">    .local v0, &quot;s&quot;:Ljava/lang/String;</div><div class="line">    const-string v3, &quot;TAG&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;v3, v0&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    goto :goto_0</div><div class="line"></div><div class="line">    .line 20</div><div class="line">    .end local v0    # &quot;s&quot;:Ljava/lang/String;</div><div class="line">    :cond_0</div><div class="line">    return-void</div><div class="line">.end method</div><div class="line"></div><div class="line">.method public for2()V</div><div class="line">    .locals 4</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 23</div><div class="line">    new-instance v1, Ljava/util/ArrayList;</div><div class="line"></div><div class="line">    invoke-direct &#123;v1&#125;, Ljava/util/ArrayList;-&gt;&lt;init&gt;()V</div><div class="line"></div><div class="line">    .line 24</div><div class="line">    .local v1, &quot;strings&quot;:Ljava/util/ArrayList;, &quot;Ljava/util/ArrayList&lt;Ljava/lang/String;&gt;;&quot;</div><div class="line">    const-string v2, &quot;a&quot;</div><div class="line"></div><div class="line">    invoke-virtual &#123;v1, v2&#125;, Ljava/util/ArrayList;-&gt;add(Ljava/lang/Object;)Z</div><div class="line"></div><div class="line">    .line 25</div><div class="line">    const-string v2, &quot;b&quot;</div><div class="line"></div><div class="line">    invoke-virtual &#123;v1, v2&#125;, Ljava/util/ArrayList;-&gt;add(Ljava/lang/Object;)Z</div><div class="line"></div><div class="line">    .line 26</div><div class="line">    const-string v2, &quot;c&quot;</div><div class="line"></div><div class="line">    invoke-virtual &#123;v1, v2&#125;, Ljava/util/ArrayList;-&gt;add(Ljava/lang/Object;)Z</div><div class="line"></div><div class="line">    .line 27</div><div class="line">    const-string v2, &quot;d&quot;</div><div class="line"></div><div class="line">    invoke-virtual &#123;v1, v2&#125;, Ljava/util/ArrayList;-&gt;add(Ljava/lang/Object;)Z</div><div class="line"></div><div class="line">    .line 29</div><div class="line">    const/4 v0, 0x0</div><div class="line"></div><div class="line">    .local v0, &quot;i&quot;:I</div><div class="line">    :goto_0</div><div class="line">    invoke-virtual &#123;v1&#125;, Ljava/util/ArrayList;-&gt;size()I</div><div class="line"></div><div class="line">    move-result v2</div><div class="line"></div><div class="line">    if-ge v0, v2, :cond_0</div><div class="line"></div><div class="line">    .line 30</div><div class="line">    const-string v3, &quot;TAG&quot;</div><div class="line"></div><div class="line">    invoke-virtual &#123;v1, v0&#125;, Ljava/util/ArrayList;-&gt;get(I)Ljava/lang/Object;</div><div class="line"></div><div class="line">    move-result-object v2</div><div class="line"></div><div class="line">    check-cast v2, Ljava/lang/String;</div><div class="line"></div><div class="line">    invoke-static &#123;v3, v2&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    .line 29</div><div class="line">    add-int/lit8 v0, v0, 0x1</div><div class="line"></div><div class="line">    goto :goto_0</div><div class="line"></div><div class="line">    .line 32</div><div class="line">    :cond_0</div><div class="line">    return-void</div><div class="line">.end method</div><div class="line"></div><div class="line">.method public while1()V</div><div class="line">    .locals 4</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 35</div><div class="line">    new-instance v1, Ljava/util/ArrayList;</div><div class="line"></div><div class="line">    invoke-direct &#123;v1&#125;, Ljava/util/ArrayList;-&gt;&lt;init&gt;()V</div><div class="line"></div><div class="line">    .line 36</div><div class="line">    .local v1, &quot;strings&quot;:Ljava/util/ArrayList;, &quot;Ljava/util/ArrayList&lt;Ljava/lang/String;&gt;;&quot;</div><div class="line">    const-string v2, &quot;a&quot;</div><div class="line"></div><div class="line">    invoke-virtual &#123;v1, v2&#125;, Ljava/util/ArrayList;-&gt;add(Ljava/lang/Object;)Z</div><div class="line"></div><div class="line">    .line 37</div><div class="line">    const-string v2, &quot;b&quot;</div><div class="line"></div><div class="line">    invoke-virtual &#123;v1, v2&#125;, Ljava/util/ArrayList;-&gt;add(Ljava/lang/Object;)Z</div><div class="line"></div><div class="line">    .line 38</div><div class="line">    const-string v2, &quot;c&quot;</div><div class="line"></div><div class="line">    invoke-virtual &#123;v1, v2&#125;, Ljava/util/ArrayList;-&gt;add(Ljava/lang/Object;)Z</div><div class="line"></div><div class="line">    .line 39</div><div class="line">    const-string v2, &quot;d&quot;</div><div class="line"></div><div class="line">    invoke-virtual &#123;v1, v2&#125;, Ljava/util/ArrayList;-&gt;add(Ljava/lang/Object;)Z</div><div class="line"></div><div class="line">    .line 42</div><div class="line">    invoke-virtual &#123;v1&#125;, Ljava/util/ArrayList;-&gt;iterator()Ljava/util/Iterator;</div><div class="line"></div><div class="line">    move-result-object v0</div><div class="line"></div><div class="line">    .line 43</div><div class="line">    .local v0, &quot;iterator&quot;:Ljava/util/Iterator;, &quot;Ljava/util/Iterator&lt;Ljava/lang/String;&gt;;&quot;</div><div class="line">    :goto_0</div><div class="line">    invoke-interface &#123;v0&#125;, Ljava/util/Iterator;-&gt;hasNext()Z</div><div class="line"></div><div class="line">    move-result v2</div><div class="line"></div><div class="line">    if-eqz v2, :cond_0</div><div class="line"></div><div class="line">    .line 44</div><div class="line">    const-string v3, &quot;TAG&quot;</div><div class="line"></div><div class="line">    invoke-interface &#123;v0&#125;, Ljava/util/Iterator;-&gt;next()Ljava/lang/Object;</div><div class="line"></div><div class="line">    move-result-object v2</div><div class="line"></div><div class="line">    check-cast v2, Ljava/lang/String;</div><div class="line"></div><div class="line">    invoke-static &#123;v3, v2&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    goto :goto_0</div><div class="line"></div><div class="line">    .line 46</div><div class="line">    :cond_0</div><div class="line">    return-void</div><div class="line">.end method</div></pre></td></tr></table></figure>
<h1 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h1><p>反编译过来的switch代码分有序和无序</p>
<h2 id="有序"><a href="#有序" class="headerlink" title="有序"></a>有序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">switch1</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (type) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">5</span>:</div><div class="line">            Log.d(<span class="string">"TAG"</span>, String.valueOf(type));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="number">6</span>:</div><div class="line">            Log.d(<span class="string">"TAG"</span>, String.valueOf(type));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="number">7</span>:</div><div class="line">            Log.d(<span class="string">"TAG"</span>, String.valueOf(type));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="number">8</span>:</div><div class="line">            Log.d(<span class="string">"TAG"</span>, String.valueOf(type));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">9</span>:</div><div class="line">            Log.d(<span class="string">"TAG"</span>, String.valueOf(type));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            Log.d(<span class="string">"TAG"</span>, <span class="string">"default"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"># virtual methods</div><div class="line">.method public switch1(I)V</div><div class="line">    .locals 2</div><div class="line">    .param p1, &quot;type&quot;    # I</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 10</div><div class="line">    packed-switch p1, :pswitch_data_0</div><div class="line"></div><div class="line">    .line 30</div><div class="line">    const-string v0, &quot;TAG&quot;</div><div class="line"></div><div class="line">    const-string v1, &quot;default&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    .line 33</div><div class="line">    :goto_0</div><div class="line">    return-void</div><div class="line"></div><div class="line">    .line 12</div><div class="line">    :pswitch_0</div><div class="line">    const-string v0, &quot;TAG&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;p1&#125;, Ljava/lang/String;-&gt;valueOf(I)Ljava/lang/String;</div><div class="line"></div><div class="line">    move-result-object v1</div><div class="line"></div><div class="line">    invoke-static &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    goto :goto_0</div><div class="line"></div><div class="line">    .line 16</div><div class="line">    :pswitch_1</div><div class="line">    const-string v0, &quot;TAG&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;p1&#125;, Ljava/lang/String;-&gt;valueOf(I)Ljava/lang/String;</div><div class="line"></div><div class="line">    move-result-object v1</div><div class="line"></div><div class="line">    invoke-static &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    goto :goto_0</div><div class="line"></div><div class="line">    .line 20</div><div class="line">    :pswitch_2</div><div class="line">    const-string v0, &quot;TAG&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;p1&#125;, Ljava/lang/String;-&gt;valueOf(I)Ljava/lang/String;</div><div class="line"></div><div class="line">    move-result-object v1</div><div class="line"></div><div class="line">    invoke-static &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    goto :goto_0</div><div class="line"></div><div class="line">    .line 24</div><div class="line">    :pswitch_3</div><div class="line">    const-string v0, &quot;TAG&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;p1&#125;, Ljava/lang/String;-&gt;valueOf(I)Ljava/lang/String;</div><div class="line"></div><div class="line">    move-result-object v1</div><div class="line"></div><div class="line">    invoke-static &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    goto :goto_0</div><div class="line"></div><div class="line">    .line 27</div><div class="line">    :pswitch_4</div><div class="line">    const-string v0, &quot;TAG&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;p1&#125;, Ljava/lang/String;-&gt;valueOf(I)Ljava/lang/String;</div><div class="line"></div><div class="line">    move-result-object v1</div><div class="line"></div><div class="line">    invoke-static &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    goto :goto_0</div><div class="line"></div><div class="line">    .line 10</div><div class="line">    nop</div><div class="line"></div><div class="line">    :pswitch_data_0</div><div class="line">    .packed-switch 0x5</div><div class="line">        :pswitch_0</div><div class="line">        :pswitch_1</div><div class="line">        :pswitch_2</div><div class="line">        :pswitch_3</div><div class="line">        :pswitch_4</div><div class="line">    .end packed-switch</div><div class="line">.end method</div></pre></td></tr></table></figure>
<p>有序使用的是packed-switch指令，使用有序switch他会生成packed-switch p1, :pswitch_data_0指令，我们可以从上面看到p1是传递进来的type参数，其中<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<p>:pswitch_data_0<br>.packed-switch 0x5<br>    :pswitch_0<br>    :pswitch_1<br>    :pswitch_2<br>    :pswitch_3<br>    :pswitch_4<br>.end packed-switch<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">其中packed-switch后面的0x5表示从0x5开始递增，里面的pswitch_0就是真实的分支名，后面的0，1是case的值，真是的代码就是分支名地方的代码</div></pre></td></tr></table></figure></p>
<p>:pswitch_0<br>const-string v0, “TAG”</p>
<p>invoke-static {p1}, Ljava/lang/String;-&gt;valueOf(I)Ljava/lang/String;</p>
<p>move-result-object v1</p>
<p>invoke-static {v0, v1}, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</p>
<p>goto :goto_0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">我们手动分析有序switch指令,他的指令格式为packed-switch vAA, +BBBBBBBB，我们用ida定位到这条指令，方法偏移为f59cc，他的格式为：</div><div class="line"></div><div class="line">/art/runtime/dex_instruction.h</div><div class="line"></div><div class="line">```c++</div><div class="line">struct PACKED(4) PackedSwitchPayload &#123;</div><div class="line">	const uint16_t ident;</div><div class="line">	const uint16_t case_count;</div><div class="line">	const int32_t first_key;</div><div class="line">	const int32_t targets[];</div><div class="line"></div><div class="line">	private:</div><div class="line">	DISALLOW_COPY_AND_ASSIGN(PackedSwitchPayload);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>ident:这是固定值，有序为0x100</p>
<p>case_count:case的个数</p>
<p>first_key：初始case值</p>
<p>targets：这是一个数组，对应每个case相对switch指令偏移的偏移</p>
<p>我们发现switch指令格式为31t，op vAA, +BBBBBBBB，查看表前面的Format(AA|op BBBBlo BBBBhi)表示需要3个字节，所以我们读取3个字节2b 03 3e 00 00 00，根据小端序交换位置后03 2b 00 3e 00 00</p>
<p>其中2b为opcode</p>
<p>03为寄存器p1</p>
<p>3e为case的相对偏移</p>
<p>虚拟机计算偏移是以2个字节单位的，所以case得结构的偏移为：00f59cc+3e*2=f5a48，我们用ida查看该位置值为</p>
<p>第一个字段00 01真实值为0x100,表示是packed-switch的case区域，也就是上面的ident</p>
<p>第二个字节05 00真实值为0x5，表示有个case块</p>
<p>第三个字节05 00 00 00 真实值为0x5,表示初始case值</p>
<p>第四个字节0b 00 00 00真实值为0xb表示caes的相对偏移位置，所以我们可以计算出这个5个case位置</p>
<p>0:00f59cc+2*0b=f59e2</p>
<p>1:00f59cc+2*15=f59f6</p>
<p>2:00f59cc+2*1f=f5a0a</p>
<p>3:00f59cc+2*29=f5a1e</p>
<p>4:00f59cc+2*33=f5a32</p>
<p>接下来我们就可以按照另一篇文章来分析下面的指令了</p>
<h2 id="无序"><a href="#无序" class="headerlink" title="无序"></a>无序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">switch2</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (type) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">100</span>:</div><div class="line">            Log.d(<span class="string">"TAG"</span>, String.valueOf(type));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="number">20</span>:</div><div class="line">            Log.d(<span class="string">"TAG"</span>, String.valueOf(type));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">            Log.d(<span class="string">"TAG"</span>, String.valueOf(type));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">case</span> <span class="number">6</span>:</div><div class="line">            Log.d(<span class="string">"TAG"</span>, String.valueOf(type));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">9</span>:</div><div class="line">            Log.d(<span class="string">"TAG"</span>, String.valueOf(type));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            Log.d(<span class="string">"TAG"</span>, <span class="string">"default"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">.method public switch2(I)V</div><div class="line">    .locals 2</div><div class="line">    .param p1, &quot;type&quot;    # I</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 36</div><div class="line">    sparse-switch p1, :sswitch_data_0</div><div class="line"></div><div class="line">    .line 57</div><div class="line">    const-string v0, &quot;TAG&quot;</div><div class="line"></div><div class="line">    const-string v1, &quot;default&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    .line 60</div><div class="line">    :goto_0</div><div class="line">    return-void</div><div class="line"></div><div class="line">    .line 38</div><div class="line">    :sswitch_0</div><div class="line">    const-string v0, &quot;TAG&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;p1&#125;, Ljava/lang/String;-&gt;valueOf(I)Ljava/lang/String;</div><div class="line"></div><div class="line">    move-result-object v1</div><div class="line"></div><div class="line">    invoke-static &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    goto :goto_0</div><div class="line"></div><div class="line">    .line 42</div><div class="line">    :sswitch_1</div><div class="line">    const-string v0, &quot;TAG&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;p1&#125;, Ljava/lang/String;-&gt;valueOf(I)Ljava/lang/String;</div><div class="line"></div><div class="line">    move-result-object v1</div><div class="line"></div><div class="line">    invoke-static &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    goto :goto_0</div><div class="line"></div><div class="line">    .line 46</div><div class="line">    :sswitch_2</div><div class="line">    const-string v0, &quot;TAG&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;p1&#125;, Ljava/lang/String;-&gt;valueOf(I)Ljava/lang/String;</div><div class="line"></div><div class="line">    move-result-object v1</div><div class="line"></div><div class="line">    invoke-static &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    goto :goto_0</div><div class="line"></div><div class="line">    .line 50</div><div class="line">    :sswitch_3</div><div class="line">    const-string v0, &quot;TAG&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;p1&#125;, Ljava/lang/String;-&gt;valueOf(I)Ljava/lang/String;</div><div class="line"></div><div class="line">    move-result-object v1</div><div class="line"></div><div class="line">    invoke-static &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    goto :goto_0</div><div class="line"></div><div class="line">    .line 53</div><div class="line">    :sswitch_4</div><div class="line">    const-string v0, &quot;TAG&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;p1&#125;, Ljava/lang/String;-&gt;valueOf(I)Ljava/lang/String;</div><div class="line"></div><div class="line">    move-result-object v1</div><div class="line"></div><div class="line">    invoke-static &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    goto :goto_0</div><div class="line"></div><div class="line">    .line 36</div><div class="line">    nop</div><div class="line"></div><div class="line">    :sswitch_data_0</div><div class="line">    .sparse-switch</div><div class="line">        0x3 -&gt; :sswitch_2</div><div class="line">        0x6 -&gt; :sswitch_3</div><div class="line">        0x9 -&gt; :sswitch_4</div><div class="line">        0x14 -&gt; :sswitch_1</div><div class="line">        0x64 -&gt; :sswitch_0</div><div class="line">    .end sparse-switch</div><div class="line">.end method</div></pre></td></tr></table></figure>
<p>如果代码中使用了无序switch，它会使用sparse-switch指令，如：sparse-switch p1, :sswitch_data_0，其中p1还是传递进来的type，后面是case的标号，我们查看case部分</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">:sswitch_data_0</div><div class="line">.sparse-switch</div><div class="line">    0x3 -&gt; :sswitch_2</div><div class="line">    0x6 -&gt; :sswitch_3</div><div class="line">    0x9 -&gt; :sswitch_4</div><div class="line">    0x14 -&gt; :sswitch_1</div><div class="line">    0x64 -&gt; :sswitch_0</div><div class="line">.end sparse-switch</div></pre></td></tr></table></figure>
<p>可以看见他讲值排序了，前面是值，后面是当前值所对应的代码。在switch中default分支直接附在switch指令后面，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">sparse-switch p1, :sswitch_data_0</div><div class="line"></div><div class="line">.line 57</div><div class="line">const-string v0, &quot;TAG&quot;</div><div class="line"></div><div class="line">const-string v1, &quot;default&quot;</div><div class="line"></div><div class="line">invoke-static &#123;v0, v1&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">.line 60</div><div class="line">:goto_0</div><div class="line">return-void</div></pre></td></tr></table></figure>
<p>我们手动分析无序switch指令,他的指令格式为sparse-switch vAA, +BBBBBBBB，我们用ida定位到这条指令，方法偏移为f5a74，他的格式为：</p>
<p>/art/runtime/dex_instruction.h</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">struct</span> <span class="title">PACKED</span><span class="params">(<span class="number">4</span>)</span> SparseSwitchPayload </span>&#123;</div><div class="line">	<span class="keyword">const</span> <span class="keyword">uint16_t</span> ident;</div><div class="line">	<span class="keyword">const</span> <span class="keyword">uint16_t</span> case_count;</div><div class="line">	<span class="keyword">const</span> <span class="keyword">int32_t</span> keys_and_targets[];</div><div class="line">	<span class="keyword">public</span>:</div><div class="line">	<span class="function"><span class="keyword">const</span> int32_t* <span class="title">GetKeys</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</div><div class="line">	 <span class="keyword">return</span> keys_and_targets;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">const</span> int32_t* <span class="title">GetTargets</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</div><div class="line">	 <span class="keyword">return</span> keys_and_targets + case_count;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">private</span>:</div><div class="line">	DISALLOW_COPY_AND_ASSIGN(SparseSwitchPayload);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>ident:这是固定值，无序为0x200</p>
<p>case_count:case的个数</p>
<p>first_key：初始case值</p>
<p>keys_and_targets：这是一个数组，先存储的是key,后面接着是每个case相对switch指令偏移的偏移</p>
<p>我们发现switch指令格式为31t，op vAA, +BBBBBBBB，查看表前面的Format(AA|op BBBBlo BBBBhi)表示需要3个字节，所以我们读取3个字节2c 03 3e 00 00 00，根据小端序交换位置后03 2c 00 3e 00 00</p>
<p>其中2c为opcode</p>
<p>03为寄存器p1</p>
<p>3e为case的相对偏移</p>
<p>虚拟机计算偏移是以2个字节单位的，所以case得结构的偏移为：f5a74+3e*2=f5af0，我们用ida查看该位置值为</p>
<p>第一个字段00 02真实值为0x200,表示是packed-switch的case区域，也就是上面的ident</p>
<p>第二个字节05 00真实值为0x5，表示有个case块</p>
<p>第三个字节05 00 00 00 真实值为0x5,表示初始case值</p>
<p>第四个字节03 00 00 00真实值为0x3表示第一个case的值为0x3，偏移为key的偏移量+case_count(f5a74+5)所以我们可以计算出这个5个case位置</p>
<p>0:3:f5a74+2*1f=f5ab2</p>
<p>1:6:f5a74+2*29=f5ac6</p>
<p>2:9:f5a74+2*33=f5ada</p>
<p>3:14:f5a74+2*15=f5a9e</p>
<p>4:64:f5a74+2*0b=f5a8a</p>
<p>序列:值:代码偏移地址</p>
<p>接下来我们就可以按照另一篇文章来分析下面的指令了</p>
<h1 id="try-catch"><a href="#try-catch" class="headerlink" title="try/catch"></a>try/catch</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">try1</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</div><div class="line">    <span class="keyword">int</span> b = <span class="number">10</span>;</div><div class="line"></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line"></div><div class="line">        b = Integer.valueOf(<span class="string">"20"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">int</span> i = b / a;</div><div class="line">            Log.d(TAG, <span class="string">"yes"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            Log.d(TAG, <span class="string">"除数不能为0"</span>);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            Log.d(TAG, <span class="string">"finally1"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">        Log.d(TAG, <span class="string">"数字格式化失败"</span>);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">        Log.d(TAG, <span class="string">"其他异常"</span>);</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        Log.d(TAG, <span class="string">"finally2"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div></pre></td><td class="code"><pre><div class="line">.method public try1()V</div><div class="line">    .locals 7</div><div class="line"></div><div class="line">    .prologue</div><div class="line">    .line 12</div><div class="line">    const/4 v0, 0x0</div><div class="line"></div><div class="line">    .line 13</div><div class="line">    .local v0, &quot;a&quot;:I</div><div class="line">    const/16 v1, 0xa</div><div class="line"></div><div class="line">    .line 17</div><div class="line">    .local v1, &quot;b&quot;:I</div><div class="line">    :try_start_0</div><div class="line">    const-string v4, &quot;20&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;v4&#125;, Ljava/lang/Integer;-&gt;valueOf(Ljava/lang/String;)Ljava/lang/Integer;</div><div class="line"></div><div class="line">    move-result-object v4</div><div class="line"></div><div class="line">    invoke-virtual &#123;v4&#125;, Ljava/lang/Integer;-&gt;intValue()I</div><div class="line">    :try_end_0</div><div class="line">    .catch Ljava/lang/NumberFormatException; &#123;:try_start_0 .. :try_end_0&#125; :catch_1</div><div class="line">    .catch Ljava/lang/Exception; &#123;:try_start_0 .. :try_end_0&#125; :catch_2</div><div class="line">    .catchall &#123;:try_start_0 .. :try_end_0&#125; :catchall_1</div><div class="line"></div><div class="line">    move-result v1</div><div class="line"></div><div class="line">    .line 20</div><div class="line">    :try_start_1</div><div class="line">    div-int v3, v1, v0</div><div class="line"></div><div class="line">    .line 21</div><div class="line">    .local v3, &quot;i&quot;:I</div><div class="line">    const-string v4, &quot;TAG&quot;</div><div class="line"></div><div class="line">    const-string v5, &quot;yes&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;v4, v5&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line">    :try_end_1</div><div class="line">    .catch Ljava/lang/ArithmeticException; &#123;:try_start_1 .. :try_end_1&#125; :catch_0</div><div class="line">    .catchall &#123;:try_start_1 .. :try_end_1&#125; :catchall_0</div><div class="line"></div><div class="line">    .line 26</div><div class="line">    :try_start_2</div><div class="line">    const-string v4, &quot;TAG&quot;</div><div class="line"></div><div class="line">    const-string v5, &quot;finally1&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;v4, v5&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line">    :try_end_2</div><div class="line">    .catch Ljava/lang/NumberFormatException; &#123;:try_start_2 .. :try_end_2&#125; :catch_1</div><div class="line">    .catch Ljava/lang/Exception; &#123;:try_start_2 .. :try_end_2&#125; :catch_2</div><div class="line">    .catchall &#123;:try_start_2 .. :try_end_2&#125; :catchall_1</div><div class="line"></div><div class="line">    .line 35</div><div class="line">    .end local v3    # &quot;i&quot;:I</div><div class="line">    :goto_0</div><div class="line">    const-string v4, &quot;TAG&quot;</div><div class="line"></div><div class="line">    const-string v5, &quot;finally2&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;v4, v5&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    .line 37</div><div class="line">    :goto_1</div><div class="line">    return-void</div><div class="line"></div><div class="line">    .line 22</div><div class="line">    :catch_0</div><div class="line">    move-exception v2</div><div class="line"></div><div class="line">    .line 23</div><div class="line">    .local v2, &quot;e&quot;:Ljava/lang/ArithmeticException;</div><div class="line">    :try_start_3</div><div class="line">    invoke-virtual &#123;v2&#125;, Ljava/lang/ArithmeticException;-&gt;printStackTrace()V</div><div class="line"></div><div class="line">    .line 24</div><div class="line">    const-string v4, &quot;TAG&quot;</div><div class="line"></div><div class="line">    const-string v5, &quot;\u9664\u6570\u4e0d\u80fd\u4e3a0&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;v4, v5&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line">    :try_end_3</div><div class="line">    .catchall &#123;:try_start_3 .. :try_end_3&#125; :catchall_0</div><div class="line"></div><div class="line">    .line 26</div><div class="line">    :try_start_4</div><div class="line">    const-string v4, &quot;TAG&quot;</div><div class="line"></div><div class="line">    const-string v5, &quot;finally1&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;v4, v5&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line">    :try_end_4</div><div class="line">    .catch Ljava/lang/NumberFormatException; &#123;:try_start_4 .. :try_end_4&#125; :catch_1</div><div class="line">    .catch Ljava/lang/Exception; &#123;:try_start_4 .. :try_end_4&#125; :catch_2</div><div class="line">    .catchall &#123;:try_start_4 .. :try_end_4&#125; :catchall_1</div><div class="line"></div><div class="line">    goto :goto_0</div><div class="line"></div><div class="line">    .line 28</div><div class="line">    .end local v2    # &quot;e&quot;:Ljava/lang/ArithmeticException;</div><div class="line">    :catch_1</div><div class="line">    move-exception v2</div><div class="line"></div><div class="line">    .line 29</div><div class="line">    .local v2, &quot;e&quot;:Ljava/lang/NumberFormatException;</div><div class="line">    :try_start_5</div><div class="line">    invoke-virtual &#123;v2&#125;, Ljava/lang/NumberFormatException;-&gt;printStackTrace()V</div><div class="line"></div><div class="line">    .line 30</div><div class="line">    const-string v4, &quot;TAG&quot;</div><div class="line"></div><div class="line">    const-string v5, &quot;\u6570\u5b57\u683c\u5f0f\u5316\u5931\u8d25&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;v4, v5&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line">    :try_end_5</div><div class="line">    .catchall &#123;:try_start_5 .. :try_end_5&#125; :catchall_1</div><div class="line"></div><div class="line">    .line 35</div><div class="line">    const-string v4, &quot;TAG&quot;</div><div class="line"></div><div class="line">    const-string v5, &quot;finally2&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;v4, v5&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    goto :goto_1</div><div class="line"></div><div class="line">    .line 26</div><div class="line">    .end local v2    # &quot;e&quot;:Ljava/lang/NumberFormatException;</div><div class="line">    :catchall_0</div><div class="line">    move-exception v4</div><div class="line"></div><div class="line">    :try_start_6</div><div class="line">    const-string v5, &quot;TAG&quot;</div><div class="line"></div><div class="line">    const-string v6, &quot;finally1&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;v5, v6&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    throw v4</div><div class="line">    :try_end_6</div><div class="line">    .catch Ljava/lang/NumberFormatException; &#123;:try_start_6 .. :try_end_6&#125; :catch_1</div><div class="line">    .catch Ljava/lang/Exception; &#123;:try_start_6 .. :try_end_6&#125; :catch_2</div><div class="line">    .catchall &#123;:try_start_6 .. :try_end_6&#125; :catchall_1</div><div class="line"></div><div class="line">    .line 31</div><div class="line">    :catch_2</div><div class="line">    move-exception v2</div><div class="line"></div><div class="line">    .line 32</div><div class="line">    .local v2, &quot;e&quot;:Ljava/lang/Exception;</div><div class="line">    :try_start_7</div><div class="line">    invoke-virtual &#123;v2&#125;, Ljava/lang/Exception;-&gt;printStackTrace()V</div><div class="line"></div><div class="line">    .line 33</div><div class="line">    const-string v4, &quot;TAG&quot;</div><div class="line"></div><div class="line">    const-string v5, &quot;\u5176\u4ed6\u5f02\u5e38&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;v4, v5&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line">    :try_end_7</div><div class="line">    .catchall &#123;:try_start_7 .. :try_end_7&#125; :catchall_1</div><div class="line"></div><div class="line">    .line 35</div><div class="line">    const-string v4, &quot;TAG&quot;</div><div class="line"></div><div class="line">    const-string v5, &quot;finally2&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;v4, v5&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    goto :goto_1</div><div class="line"></div><div class="line">    .end local v2    # &quot;e&quot;:Ljava/lang/Exception;</div><div class="line">    :catchall_1</div><div class="line">    move-exception v4</div><div class="line"></div><div class="line">    const-string v5, &quot;TAG&quot;</div><div class="line"></div><div class="line">    const-string v6, &quot;finally2&quot;</div><div class="line"></div><div class="line">    invoke-static &#123;v5, v6&#125;, Landroid/util/Log;-&gt;d(Ljava/lang/String;Ljava/lang/String;)I</div><div class="line"></div><div class="line">    throw v4</div><div class="line">.end method</div></pre></td></tr></table></figure>
<p>通过上面的代码发现try/catch的代码基本格式为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">:try_start_&lt;数字&gt;</div><div class="line">[有可能发生异常的代码]</div><div class="line">:try_end_&lt;数字&gt;</div><div class="line">.catch &lt;异常类型&gt; &#123;&lt;try语句起始标号&gt; .. &lt;try语句结束标号&gt;&#125; &lt;catch标号(真正处理这个异常的代码)&gt;</div><div class="line">.catch(可能有多个catch)</div><div class="line">.catchall &#123;&lt;try语句起始标号&gt; .. &lt;try语句结束标号&gt;&#125; &lt;catch标号&gt;(finally代码块)</div></pre></td></tr></table></figure>
<p>也可以发现如果是try/catch嵌套，他会这样排列指令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">异常1开始</div><div class="line"></div><div class="line">异常1结束</div><div class="line">异常1处理指令 处理指令标号</div><div class="line"></div><div class="line">异常2开始</div><div class="line"></div><div class="line">异常2结束</div><div class="line">异常2处理指令 处理指令标号</div></pre></td></tr></table></figure>
<p>从上面的伪指令可以看出如果异常1里面发生了异常，就会跳转到异常1处理指令，所以异常2的部分也就不会执行，也就实现了上面的try嵌套语句</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;smali文件格式&quot;&gt;&lt;a href=&quot;#smali文件格式&quot; class=&quot;headerlink&quot; title=&quot;smali文件格式&quot;&gt;&lt;/a&gt;smali文件格式&lt;/h1&gt;&lt;p&gt;反编译过来的smali文件会依次根据包名放在相应的目录里，普通类，抽象类，接口和内部
    
    </summary>
    
      <category term="Dalvik" scheme="http://i.woblog.cn/categories/Dalvik/"/>
    
    
      <category term="smali" scheme="http://i.woblog.cn/tags/smali/"/>
    
  </entry>
  
  <entry>
    <title>一张图带你搞明白Dex文件格式</title>
    <link href="http://i.woblog.cn/2016/08/05/dex-format-image/"/>
    <id>http://i.woblog.cn/2016/08/05/dex-format-image/</id>
    <published>2016-08-05T00:49:46.000Z</published>
    <updated>2016-11-21T15:12:36.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="dex文件格式图解"><a href="#dex文件格式图解" class="headerlink" title="dex文件格式图解"></a>dex文件格式图解</h1><p><img src="http://7qnc6h.com1.z0.glb.clouddn.com/dex.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;dex文件格式图解&quot;&gt;&lt;a href=&quot;#dex文件格式图解&quot; class=&quot;headerlink&quot; title=&quot;dex文件格式图解&quot;&gt;&lt;/a&gt;dex文件格式图解&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://7qnc6h.com1.z0.glb.cloudd
    
    </summary>
    
      <category term="Dalvik" scheme="http://i.woblog.cn/categories/Dalvik/"/>
    
    
      <category term="dex" scheme="http://i.woblog.cn/tags/dex/"/>
    
  </entry>
  
  <entry>
    <title>odex文件详解</title>
    <link href="http://i.woblog.cn/2016/08/04/odex-format/"/>
    <id>http://i.woblog.cn/2016/08/04/odex-format/</id>
    <published>2016-08-04T22:19:25.000Z</published>
    <updated>2016-11-21T15:12:36.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么有odex"><a href="#为什么有odex" class="headerlink" title="为什么有odex"></a>为什么有odex</h1><p>因为apk实际为zip压缩包，虚拟机每次加载都需要从apk中读取classes.dex文件，这样会耗费很多的时间，而如果采用了odex方式优化的dex文件，他包含了加载dex必须的依赖库文件列表，只需要直接加载而不需要再去解析。</p>
<h1 id="如何生成odex文件"><a href="#如何生成odex文件" class="headerlink" title="如何生成odex文件"></a>如何生成odex文件</h1><p>他有两种存在方式：</p>
<p>一种是从apk程序提取出来了的与apk放在同一目录且后缀为odex,这类odex多事Android ROM的程序</p>
<p>另一种是保存在/data/dalvik-cache/目录下的缓存文件，这类odex文件仍然以dex作为后缀，文件名为apk路径@apk名称@classes.dex,如：</p>
<p>system@app@Email.apk@classes.dex：安装在system/app目录下面的Email.apk</p>
<blockquote>
<p>上面说的都是由系统自动生成的，我们下面说说怎么手动生成</p>
</blockquote>
<p>首先在Android的源码里面提供了一个dexopt-wrapper，在build/tools/dexpreopt/dexopt-wrapper/目录下，查看了DexOptWrapper.cpp文件发现他最终调用的是/system/bin/dexopt命令。所以说我们可以自己编译或者下载一个dexopt-wrapper到手机，就可以手动将dex转为odex了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">adb push dexopt-wrapper /data/local/</div><div class="line">adb shell chmod 777 /data/local/dexopt-wrapper</div></pre></td></tr></table></figure>
<p>接下来把我们前面写的HelloWorld.smali编译成dex为classes.dex在打包为HelloWorld.zip，并push到手机</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb push HelloWorld.zip /data/local/</div></pre></td></tr></table></figure>
<p>下面我们进入到/data/local/目录下面执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./dexopt-wrapper HelloWorld.zip HelloWorld.odex</div></pre></td></tr></table></figure>
<p>不出意外的话会输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">--- BEGIN &apos;HelloWorld.zip&apos; (bootstrap=0) ---</div><div class="line">--- waiting for verify+opt, pid=2535</div><div class="line">--- would reduce privs here</div><div class="line">--- END &apos;HelloWorld.zip&apos; (success) ---</div></pre></td></tr></table></figure>
<p>说明转换成功了，我们将HelloWorld.odex下载到本地，以便后面的分析</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb pull /data/local/HelloWorld.odex .</div></pre></td></tr></table></figure>
<h1 id="odex文件整体结构"><a href="#odex文件整体结构" class="headerlink" title="odex文件整体结构"></a>odex文件整体结构</h1><p>odex可以理解为一个dex文件的超集，因为他包含完整的dex数据，不过他文件的写入和读取并没有像dex文件哪有定义全部的数据结构，只能通过查看源码分析，dalvik虚拟机最终将dex文件映射到内存中后是DexFile格式，我们查看他的定义：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> DexFile &#123;</div><div class="line">    <span class="comment">/* directly-mapped "opt" header */</span></div><div class="line">    <span class="keyword">const</span> DexOptHeader* pOptHeader;</div><div class="line"></div><div class="line">    <span class="comment">/* pointers to directly-mapped structs and arrays in base DEX */</span></div><div class="line">    <span class="keyword">const</span> DexHeader*    pHeader;</div><div class="line">    <span class="keyword">const</span> DexStringId*  pStringIds;</div><div class="line">    <span class="keyword">const</span> DexTypeId*    pTypeIds;</div><div class="line">    <span class="keyword">const</span> DexFieldId*   pFieldIds;</div><div class="line">    <span class="keyword">const</span> DexMethodId*  pMethodIds;</div><div class="line">    <span class="keyword">const</span> DexProtoId*   pProtoIds;</div><div class="line">    <span class="keyword">const</span> DexClassDef*  pClassDefs;</div><div class="line">    <span class="keyword">const</span> DexLink*      pLinkData;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * These are mapped out of the "auxillary" section, and may not be</div><div class="line">     * included in the file.</div><div class="line">     */</div><div class="line">    <span class="keyword">const</span> DexClassLookup* pClassLookup;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">void</span>*         pRegisterMapPool;       <span class="comment">// RegisterMapClassPool</span></div><div class="line"></div><div class="line">    <span class="comment">/* points to start of DEX file data */</span></div><div class="line">    <span class="keyword">const</span> u1*           baseAddr;</div><div class="line"></div><div class="line">    <span class="comment">/* track memory overhead for auxillary structures */</span></div><div class="line">    <span class="keyword">int</span>                 overhead;</div><div class="line"></div><div class="line">    <span class="comment">/* additional app-specific data structures associated with the DEX */</span></div><div class="line">    <span class="comment">//void*               auxData;</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>他存入的多位其他结构的指针。DexOptHeader就是odex的头，DexLink以下的是辅助数据段，也就是dex优化后的添加的数据，dexFile中有些是不会加载进内存的，所以下面就是odex定义个结构：</p>
<h2 id="ODEXFile"><a href="#ODEXFile" class="headerlink" title="ODEXFile"></a>ODEXFile</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> ODEXFile &#123;</div><div class="line">    DexOptHeader header; <span class="comment">//文件头</span></div><div class="line">    DEXFile dexfile; <span class="comment">//dex文件</span></div><div class="line">    Dependences deps; <span class="comment">//依赖库列表</span></div><div class="line">    ChunkDexClassLookup lookup; <span class="comment">//类索引结构</span></div><div class="line">    ChunkRegisterMapPool mappool; <span class="comment">//映射池</span></div><div class="line">    ChunkEnd end; <span class="comment">//结束标志位</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="DexOptHeader"><a href="#DexOptHeader" class="headerlink" title="DexOptHeader"></a>DexOptHeader</h2><p>他的定义在DexFile.h中</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> DexOptHeader &#123;</div><div class="line">    u1  magic[<span class="number">8</span>]; <span class="comment">/* 标识是一个odex文件，包含版本号 */</span></div><div class="line"></div><div class="line">    u4  dexOffset; <span class="comment">/* dex文件的偏移 */</span></div><div class="line">    u4  dexLength; <span class="comment">/* dex文件长度 */</span></div><div class="line">    u4  depsOffset; <span class="comment">/* odex依赖库的偏移 */</span></div><div class="line">    u4  depsLength; <span class="comment">/* 依赖库长度 */</span></div><div class="line">    u4  optOffset; <span class="comment">/* 辅助数据偏移 */</span></div><div class="line">    u4  optLength; <span class="comment">/* 辅助数据长度 */</span></div><div class="line"></div><div class="line">    u4  flags; <span class="comment">/* 标志位 */</span></div><div class="line">    u4  checksum; <span class="comment">/* 依赖库和辅助数据的校验值 */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>mgic：和DexHeader结构中的magic字段类似，标识一个特定类型的文件，当前(Android 4.4,api19)的固定值为64 65 79 0a 30 33 36 00，转为字符串为d   e   y  \n   0   3   6  \0</p>
<p>dexOffset：为dex文件头的偏移，当前的值为DexOptHeader结构大小0x28</p>
<p>flag:取值为DexoptFlags中的常量值，标识了虚拟机加载odex时的优化与验证选项</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>偏移值</th>
<th>长度</th>
</tr>
</thead>
<tbody>
<tr>
<td>magic</td>
<td>0x0</td>
<td>8</td>
</tr>
<tr>
<td>dexOffset</td>
<td>8</td>
<td>4</td>
</tr>
<tr>
<td>dexLength</td>
<td>c</td>
<td>4</td>
</tr>
<tr>
<td>depsOffset</td>
<td>10</td>
<td>4</td>
</tr>
<tr>
<td>depsLength</td>
<td>14</td>
<td>4</td>
</tr>
<tr>
<td>optOffset</td>
<td>18</td>
<td>4</td>
</tr>
<tr>
<td>optLength</td>
<td>20</td>
<td>4</td>
</tr>
<tr>
<td>flags</td>
<td>24</td>
<td>4</td>
</tr>
<tr>
<td>checksum</td>
<td>28</td>
<td>4</td>
</tr>
</tbody>
</table>
<h2 id="DexFile"><a href="#DexFile" class="headerlink" title="DexFile"></a>DexFile</h2><p>这一部分和上一篇文章将的格式是一样的</p>
<h2 id="Dependences"><a href="#Dependences" class="headerlink" title="Dependences"></a>Dependences</h2><p>这一部分没有在源码中明确的定义，他不会被加载进内存，只能通过源码分析他的结构</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> Dependences&#123;</div><div class="line">	u4 modWhen; <span class="comment">//时间戳</span></div><div class="line">	u4 crc; <span class="comment">//校验值</span></div><div class="line">	u4 DALVIK_VM_BUILD; <span class="comment">//Dalvik虚拟机版本号</span></div><div class="line">	U4 numDeps; <span class="comment">//依赖库个数</span></div><div class="line">	<span class="keyword">struct</span>&#123;</div><div class="line">		u4 len; <span class="comment">//name字符串长度</span></div><div class="line">		u1 name[len]; <span class="comment">//依赖库名称</span></div><div class="line">		kSHA1DigestLen signature; <span class="comment">//sha-1值,20，在DexFile.h中定义</span></div><div class="line">	&#125; table[numDeps];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们从源码分析生成Dependences结构的代码，是由/dalvik/vm/analysis/DexPrepare.cpp#writeDependencies中完成的</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">writeDependencies</span><span class="params">(<span class="keyword">int</span> fd, u4 modWhen, u4 crc)</span></span></div><div class="line">&#123;</div><div class="line">    u1* buf = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">int</span> result = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">ssize_t</span> bufLen;</div><div class="line">    ClassPathEntry* cpe;</div><div class="line">    <span class="keyword">int</span> numDeps;</div><div class="line"></div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Count up the number of completed entries in the bootclasspath.</div><div class="line">     */</div><div class="line">    numDeps = <span class="number">0</span>;</div><div class="line">    bufLen = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (cpe = gDvm.bootClassPath; cpe-&gt;ptr != <span class="literal">NULL</span>; cpe++) &#123; <span class="comment">//计算依赖库个数</span></div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* cacheFileName =</div><div class="line">            dvmPathToAbsolutePortion(getCacheFileName(cpe));</div><div class="line">        assert(cacheFileName != <span class="literal">NULL</span>); <span class="comment">/* guaranteed by Class.c */</span></div><div class="line"></div><div class="line">        ALOGV(<span class="string">"+++ DexOpt: found dep '%s'"</span>, cacheFileName);</div><div class="line"></div><div class="line">        numDeps++; <span class="comment">//依赖库格式</span></div><div class="line">        bufLen += <span class="built_in">strlen</span>(cacheFileName) +<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    bufLen += <span class="number">4</span>*<span class="number">4</span> + numDeps * (<span class="number">4</span>+kSHA1DigestLen);</div><div class="line"></div><div class="line">    buf = (u1*)<span class="built_in">malloc</span>(bufLen); <span class="comment">//动态开辟Dependencies结构的长度</span></div><div class="line"></div><div class="line">    set4LE(buf+<span class="number">0</span>, modWhen); <span class="comment">//写入时间戳</span></div><div class="line">    set4LE(buf+<span class="number">4</span>, crc); <span class="comment">//写入crc</span></div><div class="line">    set4LE(buf+<span class="number">8</span>, DALVIK_VM_BUILD); <span class="comment">//写入虚拟机版本</span></div><div class="line">    set4LE(buf+<span class="number">12</span>, numDeps); <span class="comment">//写入依赖库的个数</span></div><div class="line"></div><div class="line">    <span class="comment">// <span class="doctag">TODO:</span> do we want to add dvmGetInlineOpsTableLength() here?  Won't</span></div><div class="line">    <span class="comment">// help us if somebody replaces an existing entry, but it'd catch</span></div><div class="line">    <span class="comment">// additions/removals.</span></div><div class="line"></div><div class="line">    u1* ptr = buf + <span class="number">4</span>*<span class="number">4</span>;</div><div class="line">    <span class="keyword">for</span> (cpe = gDvm.bootClassPath; cpe-&gt;ptr != <span class="literal">NULL</span>; cpe++) &#123; <span class="comment">//循环写入所有依赖库</span></div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* cacheFileName =</div><div class="line">            dvmPathToAbsolutePortion(getCacheFileName(cpe));</div><div class="line">        assert(cacheFileName != <span class="literal">NULL</span>); <span class="comment">/* guaranteed by Class.c */</span></div><div class="line"></div><div class="line">        <span class="keyword">const</span> u1* signature = getSignature(cpe);<span class="comment">//计算sha1值</span></div><div class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(cacheFileName) +<span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (ptr + <span class="number">4</span> + len + kSHA1DigestLen &gt; buf + bufLen) &#123;</div><div class="line">            ALOGE(<span class="string">"DexOpt: overran buffer"</span>);</div><div class="line">            dvmAbort();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        set4LE(ptr, len);</div><div class="line">        ptr += <span class="number">4</span>;</div><div class="line">        <span class="built_in">memcpy</span>(ptr, cacheFileName, len); <span class="comment">//写入依赖库的名词</span></div><div class="line">        ptr += len;</div><div class="line">        <span class="built_in">memcpy</span>(ptr, signature, kSHA1DigestLen); <span class="comment">//写入依赖库的sha1值</span></div><div class="line">        ptr += kSHA1DigestLen;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    assert(ptr == buf + bufLen);</div><div class="line"></div><div class="line">    result = sysWriteFully(fd, buf, bufLen, <span class="string">"DexOpt dep info"</span>);</div><div class="line"></div><div class="line">    <span class="built_in">free</span>(buf);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>modWhen:记录优化前classes.dex的时间戳</p>
<p>crc:优化前classes.dex的校验值</p>
<p>他们是通过/dalvik/libdex/ZipArchive.cpp#dexZipGetEntryInfo函数来获取的</p>
<p>DALVIK_VM_BUILD：是虚拟机版本号，定义在/dalvik/vm/DalvikVersion.h</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> DALVIK_VM_BUILD         27</span></div></pre></td></tr></table></figure>
<p>2.2.3 = 19</p>
<p>2.3~2.3.7 = 23</p>
<p>4.0~5.1.1 = 27</p>
<p>6.0.0~后面没有这个常量了</p>
<p>numDeps:依赖库个数</p>
<p>table：为连续numDeps个真实依赖信息结构组成</p>
<p>​    len:指定第2个字段name暂用的字节数</p>
<p>​    name:依赖库的完整路径名</p>
<p>​    signature:依赖库的sha1值</p>
<p>下面我们就用上次的HelloWorld.odex来分析Dependences结构并验证上述是否正确：</p>
<p>首先我们读取depsOffset字段值：0x3d0，depsLength值为：0x373，所以我们计算可知，依赖结构暂用的偏移为0x3d0~0x743</p>
<p>继续从0x3d0分析：</p>
<p>读取4个字节：</p>
<p>modWhen=55 67 f9 48</p>
<p>crc=ec 48 c7 05</p>
<p>DALVIK_VM_BUILD=1b 00 00 00=27</p>
<p>numDeps=0f 00 00 00=15</p>
<p>根据上面的信息我们分析所以得依赖如下：</p>
<p>我们手动分析一个依赖</p>
<p>读取0x3e0 ，值为：1c 00 00 00，表示文件吗长度为0x1c,我们读取28个字符值为/system/framework/core.odex，这就是完整文件名，从0x400读取20位，值为d6 bb 96 dc 78 1a 55 38  f2 6d b5 d5 84 5a 6e 64 87 a6 35 72，这就是依赖库的sha-1值，根据上面的步骤，我们分析出所有的依赖信息</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>文件吗长度</th>
<th>依赖库名称</th>
<th>sha1</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>0x1c</td>
<td>/system/framework/core.odex</td>
<td>d6bb96dc781a5538f26db5d5845a6e6487a63572</td>
</tr>
<tr>
<td>1</td>
<td>0x21</td>
<td>/system/framework/conscrypt.odex</td>
<td>1f33546e3ca68e8c3ba1c111a47e1b08ee4854cd</td>
</tr>
<tr>
<td>2</td>
<td>1e</td>
<td>/system/framework/okhttp.odex</td>
<td>30372c6bfffddac82b262ccd85bbbe00fe119a35</td>
</tr>
<tr>
<td>3</td>
<td>22</td>
<td>/system/framework/core-junit.odex</td>
<td>468e68afd635b716c77a1ade97e6ac906f995057</td>
</tr>
<tr>
<td>4</td>
<td>24</td>
<td>/system/framework/bouncycastle.odex</td>
<td>7b93bde38862bf719b9f4054b91522d8d3647d91</td>
</tr>
<tr>
<td>5</td>
<td>1b</td>
<td>/system/framework/ext.odex</td>
<td>65d2a8066071edff6d5c67eef0fac632cfef23b0</td>
</tr>
<tr>
<td>6</td>
<td>21</td>
<td>/system/framework/framework.odex</td>
<td>4b43246e783414fa0537c9a3560874dad17467b6</td>
</tr>
<tr>
<td>7</td>
<td>22</td>
<td>/system/framework/framework2.odex</td>
<td>4d752b219a4b4309ca154ed7135cc76857fde3aa</td>
</tr>
<tr>
<td>8</td>
<td>28</td>
<td>/system/framework/telephony-common.odex</td>
<td>3011022a0fd5bd01b45f47927410f116d3fb7eac</td>
</tr>
<tr>
<td>9</td>
<td>23</td>
<td>/system/framework/voip-common.odex</td>
<td>c4e5082b04e40b8a63f4fcb03c5e65c5b0ac632a</td>
</tr>
<tr>
<td>10</td>
<td>22</td>
<td>/system/framework/mms-common.odex</td>
<td>4c2d0a0b65dd9a8cc7d68474076588356b16fbab</td>
</tr>
<tr>
<td>11</td>
<td>26</td>
<td>/system/framework/android.policy.odex</td>
<td>659f32295f35fbbdd88db6019fec7313000c3ece</td>
</tr>
<tr>
<td>12</td>
<td>20</td>
<td>/system/framework/services.odex</td>
<td>7534cc6d79d1d9464bd45dfe0a976ceb94b3ceae</td>
</tr>
<tr>
<td>13</td>
<td>22</td>
<td>/system/framework/apache-xml.odex</td>
<td>289e934d21ca9a5c99d6e52dd6024274cbebfdce</td>
</tr>
<tr>
<td>14</td>
<td>27</td>
<td>/system/framework/webviewchromium.odex</td>
<td>1305e97aaf378db3d94acdc88beddec0aa9feed8</td>
</tr>
</tbody>
</table>
<h2 id="辅助数据"><a href="#辅助数据" class="headerlink" title="辅助数据"></a>辅助数据</h2><p>ChunkDexClassLookup，ChunkRegisterMapPool,ChunkEnd这个三个Chunk快，他们被Dalvik虚拟机加载到一个称为auxiliary的端中，他们都是由DexPrepare.cpp#writeOptData</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">writeOptData</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> DexClassLookup* pClassLookup,</span></span></div><div class="line">    <span class="keyword">const</span> RegisterMapBuilder* pRegMapBuilder)</div><div class="line">&#123;</div><div class="line">    <span class="comment">/* 写入DexChunkClassLookup数据库 */</span></div><div class="line">    <span class="keyword">if</span> (!writeChunk(fd, (u4) kDexChunkClassLookup,</div><div class="line">            pClassLookup, pClassLookup-&gt;size))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* 写入DexChunkRegisterMaps(可选) */</span></div><div class="line">    <span class="keyword">if</span> (pRegMapBuilder != <span class="literal">NULL</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (!writeChunk(fd, (u4) kDexChunkRegisterMaps,</div><div class="line">                pRegMapBuilder-&gt;data, pRegMapBuilder-&gt;size))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* 写入DexChunkEnd */</span></div><div class="line">    <span class="keyword">if</span> (!writeChunk(fd, (u4) kDexChunkEnd, <span class="literal">NULL</span>, <span class="number">0</span>)) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到数据其实是通过writeChunk函数写入的</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">writeChunk</span><span class="params">(<span class="keyword">int</span> fd, u4 type, <span class="keyword">const</span> <span class="keyword">void</span>* data, <span class="keyword">size_t</span> size)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">union</span> &#123;             <span class="comment">/* save a syscall by grouping these together */</span></div><div class="line">        <span class="keyword">char</span> raw[<span class="number">8</span>];</div><div class="line">        <span class="keyword">struct</span> &#123;</div><div class="line">            u4 type;</div><div class="line">            u4 size;</div><div class="line">        &#125; ts;</div><div class="line">    &#125; header;</div><div class="line"></div><div class="line">    assert(<span class="keyword">sizeof</span>(header) == <span class="number">8</span>);</div><div class="line"></div><div class="line">    ALOGV(<span class="string">"Writing chunk, type=%.4s size=%d"</span>, (<span class="keyword">char</span>*) &amp;type, size);</div><div class="line"></div><div class="line">    header.ts.type = type;</div><div class="line">    header.ts.size = (u4) size;</div><div class="line">    <span class="keyword">if</span> (sysWriteFully(fd, &amp;header, <span class="keyword">sizeof</span>(header),</div><div class="line">            <span class="string">"DexOpt opt chunk header write"</span>) != <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (sysWriteFully(fd, data, size, <span class="string">"DexOpt opt chunk write"</span>) != <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* if necessary, pad to 64-bit alignment */</span></div><div class="line">    <span class="keyword">if</span> ((size &amp; <span class="number">7</span>) != <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">int</span> padSize = <span class="number">8</span> - (size &amp; <span class="number">7</span>);</div><div class="line">        ALOGV(<span class="string">"size was %d, inserting %d pad bytes"</span>, size, padSize);</div><div class="line">        lseek(fd, padSize, SEEK_CUR);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    assert( ((<span class="keyword">int</span>)lseek(fd, <span class="number">0</span>, SEEK_CUR) &amp; <span class="number">7</span>) == <span class="number">0</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到函数中定义了一个共同体Header，共暂用8字节，写入时会根据具体的结构填充这个结构，type字段为1一个以KDexChunk开头的枚举，在DexFile.h中定义如下</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> &#123;</div><div class="line">    kDexChunkClassLookup            = <span class="number">0x434c4b50</span>,   <span class="comment">/* CLKP */</span></div><div class="line">    kDexChunkRegisterMaps           = <span class="number">0x524d4150</span>,   <span class="comment">/* RMAP */</span></div><div class="line"></div><div class="line">    kDexChunkEnd                    = <span class="number">0x41454e44</span>,   <span class="comment">/* AEND */</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>size是要填充的数据的字节数。</p>
<h3 id="ChunkClassLookup"><a href="#ChunkClassLookup" class="headerlink" title="ChunkClassLookup"></a>ChunkClassLookup</h3><p>写入DexChunkClassLookup时向writeChunk函数传递了一个DexClassLookup结构指针，在DexFile.h定义如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> DexClassLookup &#123;</div><div class="line">    <span class="keyword">int</span>     size;                       <span class="comment">// total size, including "size"</span></div><div class="line">    <span class="keyword">int</span>     numEntries;                 <span class="comment">// size of table[]; always power of 2</span></div><div class="line">    <span class="keyword">struct</span> &#123;</div><div class="line">        u4      classDescriptorHash;    <span class="comment">// class descriptor hash code</span></div><div class="line">        <span class="keyword">int</span>     classDescriptorOffset;  <span class="comment">// in bytes, from start of DEX</span></div><div class="line">        <span class="keyword">int</span>     classDefOffset;         <span class="comment">// in bytes, from start of DEX</span></div><div class="line">    &#125; table[<span class="number">1</span>];</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>虚拟机通过DexClassLookup结构来检索所有类</p>
<p>size:为本结构体的字节数</p>
<p>numEntries：接下来table结构的项数，值为2</p>
<p>table:是用来描述类的信息</p>
<p>​    classDescriptorHash：为类的hash值</p>
<p>​    classDescriptorOffset：类的描述</p>
<p>​    classDefOffset：为指向DexClassDef结构体的指针的偏移</p>
<p>根据上面我们可以分析出ChunkDexClassLookup的结构为</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> ChunkDexClassLookup &#123;</div><div class="line">	Header header; <span class="comment">//这个就是writeChunk函数中定义的header</span></div><div class="line">	DexClassLoopup lookup;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="ChunkRegisterMapPool"><a href="#ChunkRegisterMapPool" class="headerlink" title="ChunkRegisterMapPool"></a>ChunkRegisterMapPool</h3><p>写入他时像writeChunk函数传递了一个RegisterMapBuilder结构，定义在/dalvik/vm/analysis/RegisterMap.h中</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> RegisterMapBuilder &#123;</div><div class="line">    <span class="comment">/* public */</span></div><div class="line">    <span class="keyword">void</span>*       data;</div><div class="line">    <span class="keyword">size_t</span>      size;</div><div class="line"></div><div class="line">    <span class="comment">/* private */</span></div><div class="line">    MemMapping  memMap;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>//TODO</p>
<h3 id="ChunkEnd"><a href="#ChunkEnd" class="headerlink" title="ChunkEnd"></a>ChunkEnd</h3><p>写入他时向writeChunk函数传递了一个NULL指针，并且传递了kDexChunkEnd类型，所以他只有一个header，最后得出结构如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> ChunkEnd &#123;</div><div class="line">   	Header header;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么有odex&quot;&gt;&lt;a href=&quot;#为什么有odex&quot; class=&quot;headerlink&quot; title=&quot;为什么有odex&quot;&gt;&lt;/a&gt;为什么有odex&lt;/h1&gt;&lt;p&gt;因为apk实际为zip压缩包，虚拟机每次加载都需要从apk中读取classes.dex文件，
    
    </summary>
    
      <category term="Dalvik" scheme="http://i.woblog.cn/categories/Dalvik/"/>
    
    
      <category term="odex" scheme="http://i.woblog.cn/tags/odex/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView的使用解析</title>
    <link href="http://i.woblog.cn/2016/07/28/use-recycler-view/"/>
    <id>http://i.woblog.cn/2016/07/28/use-recycler-view/</id>
    <published>2016-07-28T14:10:19.000Z</published>
    <updated>2016-11-21T15:12:36.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么要使用它"><a href="#为什么要使用它" class="headerlink" title="为什么要使用它"></a>为什么要使用它</h1><p>RecyclerView比ListView更灵活，比如我现在是显示一个List，过一会儿需要换成Grid格式，在这种情况下如果使用的是ListView，那我们需要换成GridView等，下面就来看看他的基本使用</p>
<h1 id="添加控件到布局文件"><a href="#添加控件到布局文件" class="headerlink" title="添加控件到布局文件"></a>添加控件到布局文件</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/my_recycler_view"</span></div><div class="line">    <span class="attr">android:scrollbars</span>=<span class="string">"vertical"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</div></pre></td></tr></table></figure>
<h1 id="设置布局管理器"><a href="#设置布局管理器" class="headerlink" title="设置布局管理器"></a>设置布局管理器</h1><p>所谓布局管理器就是你要告诉RecyclerView怎样去显示一个Item，因为他不像ListView那样一开始就定义死了怎么布局，比如ListView定义死了垂直布局，而GridView用于显示格式样式的布局。他提供了几个默认的实现</p>
<ul>
<li>LinearLayoutManager：垂直或水平滚动列表方式显示项目。</li>
<li>GridLayoutManager：网格中显示项目。</li>
<li>StaggeredGridLayoutManager：在分散对齐网格中显示项目。</li>
</ul>
<p>我们这里用垂直布局管理器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置布局管理器</span></div><div class="line">LinearLayoutManager linearLayoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</div><div class="line">rv.setLayoutManager(linearLayoutManager);</div></pre></td></tr></table></figure>
<h1 id="设置adapter"><a href="#设置adapter" class="headerlink" title="设置adapter"></a>设置adapter</h1><p>这一步和ListView这类的控件使用的方式差不多，也要设置一个适配器，告诉他数据源，他是继承RecyclerView.Adapter，我们需要实现三个方法</p>
<p>onCreateViewHolder：创建一个ViewHolder</p>
<p>onBindViewHolder：为ViewHolder绑定数据</p>
<p>getItemCount：整个列表的长度</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAdapter</span> <span class="keyword">extends</span> <span class="title">BaseRecyclerViewAdapter</span>&lt;<span class="title">String</span>, <span class="title">SimpleAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleAdapter</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//下面两个方法想当与BaseAdapter的getView，只是他将创建view和设置view数据分开了</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewHolder(LayoutInflater.from(context).inflate(android.R.layout.simple_list_item_1, parent, <span class="keyword">false</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        holder.bindView(getItem(position), position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> TextView tv;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">            tv = (TextView) itemView.findViewById(android.R.id.text1);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindView</span><span class="params">(<span class="keyword">final</span> String item, <span class="keyword">final</span> <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            tv.setText(item);</div><div class="line">            tv.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                    onItemClickListener.onItemClick(position);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里我写了一个通用的Adapter</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.woblog.recyclerviewsimple;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseRecyclerViewAdapter</span>&lt;<span class="title">D</span>, <span class="title">VH</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span>&gt; <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">VH</span>&gt; </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 条目点击事件</div><div class="line">     */</div><div class="line">    <span class="keyword">protected</span> OnItemClickListener onItemClickListener;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Context context;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnItemClickListener</span><span class="params">(OnItemClickListener onItemClickListener)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.onItemClickListener = onItemClickListener;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseRecyclerViewAdapter</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;D&gt; data = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;D&gt; <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> D <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data.get(position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//整个列表的长度，类似BaseAdapter的getCount</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(List&lt;D&gt; data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.data.clear();</div><div class="line">        <span class="keyword">this</span>.data.addAll(data);</div><div class="line">        notifyDataSetChanged();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addData</span><span class="params">(List&lt;D&gt; data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.data.addAll(data);</div><div class="line">        notifyDataSetChanged();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnItemClickListener</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(<span class="keyword">int</span> position)</span></span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>他定义了data列表对应最终的数据集合，定义了一个条目点击事件接口。接下来我们将整个适配器设置到RecyclerView</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置adapter</span></div><div class="line">simpleAdapter = <span class="keyword">new</span> SimpleAdapter(<span class="keyword">this</span>);</div><div class="line">rv.setAdapter(simpleAdapter);</div><div class="line"></div><div class="line">simpleAdapter.setOnItemClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">simpleAdapter.setData(getTestData());</div></pre></td></tr></table></figure>
<p>到这一步我们这个相当于ListView的列表已经显示出来了</p>
<p>//无分割线图</p>
<p>但是还发现少点什么，对，就是分割线，RecyclerView的分割线实现起来要比ListView要难一点，我们需要通过addItemDecoration添加一个实现，居然没人默认的实现，真是醉了，这里我们先实现一个垂直列表的水平分割线，实现分割线需要继承ItemDecoration类，一般要复写如下方法：</p>
<ul>
<li>onDraw：改方法调用在drawChildren之前</li>
<li>onDrawOver：该方法调用位于drawChildren之后</li>
<li>getItemOffsets：通过outRect.set方法为每一个Item设置一个偏移量，用来绘制分割线</li>
</ul>
<p>onDraw和onDrawOver一般只需要重写其中一个</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.woblog.recyclerviewsimple;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.graphics.Canvas;</div><div class="line"><span class="keyword">import</span> android.graphics.Rect;</div><div class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</div><div class="line"><span class="keyword">import</span> android.support.v7.widget.RecyclerView;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.LinearLayout;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItemDecoration</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[] ATTRS = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;</div><div class="line">            android.R.attr.listDivider</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Drawable mDivider;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mOrientation;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListItemDecoration</span><span class="params">(Context context, <span class="keyword">int</span> orientation)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> TypedArray a = context.obtainStyledAttributes(ATTRS);</div><div class="line">        mDivider = a.getDrawable(<span class="number">0</span>);</div><div class="line">        a.recycle();</div><div class="line">        setOrientation(orientation);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrientation</span><span class="params">(<span class="keyword">int</span> orientation)</span> </span>&#123;</div><div class="line">        mOrientation = orientation;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mOrientation == LinearLayout.VERTICAL) &#123;</div><div class="line">            drawVertical(c, parent);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            drawHorizontal(c, parent);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawVertical</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> left = parent.getPaddingLeft();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> right = parent.getWidth() - parent.getPaddingRight();</div><div class="line"></div><div class="line">        <span class="comment">//获取每个child个数</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = parent.getChildCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</div><div class="line">            <span class="comment">//获取到每一个child</span></div><div class="line">            <span class="keyword">final</span> View child = parent.getChildAt(i);</div><div class="line"></div><div class="line">            <span class="comment">//获取到每个child的params</span></div><div class="line">            <span class="keyword">final</span> RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child</div><div class="line">                    .getLayoutParams();</div><div class="line"></div><div class="line">            <span class="comment">//计算分割线的顶部位置=当前Item的高度+当前item到顶部分割线的距离</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> top = child.getBottom() + params.topMargin;</div><div class="line"></div><div class="line">            <span class="comment">//计算分割线的底部位置=top+分割线的真实高度+当前Item到底部分割线的距离</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> bottom = top + mDivider.getIntrinsicHeight() + params.bottomMargin;</div><div class="line"></div><div class="line">            <span class="comment">//设置分割线线的边距</span></div><div class="line">            mDivider.setBounds(left, top, right, bottom);</div><div class="line">            mDivider.draw(c);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawHorizontal</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> top = parent.getPaddingTop();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> bottom = parent.getHeight() - parent.getPaddingBottom();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = parent.getChildCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</div><div class="line">            <span class="keyword">final</span> View child = parent.getChildAt(i);</div><div class="line">            <span class="keyword">final</span> RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child</div><div class="line">                    .getLayoutParams();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> left = child.getRight() + params.leftMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> right = left + mDivider.getIntrinsicHeight() + params.rightMargin;</div><div class="line">            mDivider.setBounds(left, top, right, bottom);</div><div class="line">            mDivider.draw(c);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, <span class="keyword">int</span> itemPosition, RecyclerView parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mOrientation == LinearLayout.VERTICAL) &#123;</div><div class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicHeight()); <span class="comment">//dp单位</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicWidth(), <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置分割线</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置分割线</span></div><div class="line">rv.addItemDecoration(<span class="keyword">new</span> ListItemDecoration(<span class="keyword">this</span>, LinearLayoutManager.VERTICAL));</div></pre></td></tr></table></figure>
<p>到这里一个效果基本ListView差不多了</p>
<h1 id="定制分割线样式"><a href="#定制分割线样式" class="headerlink" title="定制分割线样式"></a>定制分割线样式</h1><p>到这一步虽然分割线已经显示出来了，但是还是系统默认的，我们肯定有需要换颜色的需要对吧。我们从上面可以得知是使用了系统的listDivider属性，那要更改分割线肯定也是更改他了</p>
<p>item_divider.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">shape</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">       <span class="attr">android:shape</span>=<span class="string">"rectangle"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">solid</span> <span class="attr">android:color</span>=<span class="string">"#f00"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">size</span> <span class="attr">android:height</span>=<span class="string">"1dp"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">shape</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我这里定义的高度为1dp，形状为矩形，大家可以根据自己的需求随便改。重要的步骤来了，就是要设置listDivider属性了，可以直接在application对应的theme里面设置，也可以对单个activity的theme设置</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:listDivider"</span>&gt;</span>@drawable/item_divider<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>//有分割线图</p>
<p>//TODO listview更换方向</p>
<p>//GridView</p>
<h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><h2 id="item宽度一直是wrap-content"><a href="#item宽度一直是wrap-content" class="headerlink" title="item宽度一直是wrap_content"></a>item宽度一直是wrap_content</h2><p>布局里面我们一直是写的match_parent，但是运行后却不是，最后发现是inflate时没有穿parent</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//return ViewHolder(ViewGroup.inflate(parent.ctx, R.layout.item_weather, null),itemClick);</span></div><div class="line"><span class="comment">//return ViewHolder(View.inflate(parent.ctx, R.layout.item_weather, null),itemClick);</span></div><div class="line"><span class="keyword">return</span> ViewHolder(LayoutInflater.from(parent.context).inflate(R.layout.item_weather, parent,<span class="literal">false</span>),itemClick);</div></pre></td></tr></table></figure>
<h2 id="ScrollView嵌套"><a href="#ScrollView嵌套" class="headerlink" title="ScrollView嵌套"></a>ScrollView嵌套</h2><p>对于这个问题，网上的解决办法五花八门，但都是重写layoutManager的onMeasure方法，这样会有各种问题，要么兼容性不好，要么有性能问题，好消息是在23.2.0后，google提供了官方解决方法，我们只需要</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">layoutManager.isAutoMeasureEnabled = <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>这样就不会有问题了</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;为什么要使用它&quot;&gt;&lt;a href=&quot;#为什么要使用它&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用它&quot;&gt;&lt;/a&gt;为什么要使用它&lt;/h1&gt;&lt;p&gt;RecyclerView比ListView更灵活，比如我现在是显示一个List，过一会儿需要换成Gr
    
    </summary>
    
      <category term="Android" scheme="http://i.woblog.cn/categories/Android/"/>
    
    
      <category term="RecyclerView" scheme="http://i.woblog.cn/tags/RecyclerView/"/>
    
  </entry>
  
  <entry>
    <title>搭建使用Kotlin语言开发Android的环境</title>
    <link href="http://i.woblog.cn/2016/07/26/configuration-kotlin-for-android/"/>
    <id>http://i.woblog.cn/2016/07/26/configuration-kotlin-for-android/</id>
    <published>2016-07-26T18:38:18.000Z</published>
    <updated>2016-11-21T15:12:36.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>大家都知道Kotlin语言在Android界还是很火的，到底有多好呢，这篇文章暂不介绍，而这里主要讲解是搭建一个开发环境</p>
<h1 id="首先创建一个Android项目"><a href="#首先创建一个Android项目" class="headerlink" title="首先创建一个Android项目"></a>首先创建一个Android项目</h1><p>这一步不细讲</p>
<blockquote>
<p>注意：是使用Android Studio创建不是eclipse</p>
</blockquote>
<h1 id="安装Kotlin插件"><a href="#安装Kotlin插件" class="headerlink" title="安装Kotlin插件"></a>安装Kotlin插件</h1><p>在plugins的仓库里搜索kotlin,安装完成并重启</p>
<h1 id="配置build-gradle"><a href="#配置build-gradle" class="headerlink" title="配置build.gradle"></a>配置build.gradle</h1><p>这一步值让我们的项目支持kotlin语言</p>
<p>选择Android Studio菜单的Help-Find Action，输入：configure kotlin in project</p>
<p>安装回车，瞬间就配置完了</p>
<h1 id="将现有代码转为Kotlin文件"><a href="#将现有代码转为Kotlin文件" class="headerlink" title="将现有代码转为Kotlin文件"></a>将现有代码转为Kotlin文件</h1><p>选择Android Studio菜单的Code-conver java file to kotlin file,转换完后，可以看见我们的MainActivity变成这样了：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> cn.woblog.weatherapp</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.os.Bundle</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</div><div class="line">        setContentView(R.layout.activity_main)</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后运行，如果不出意外，就可以看见主界面了</p>
<h1 id="使用kotlin-android-extensions插件"><a href="#使用kotlin-android-extensions插件" class="headerlink" title="使用kotlin-android-extensions插件"></a>使用kotlin-android-extensions插件</h1><p>使用了这个插件我们可以直接在代码中使用布局中写的id访问这个空间，不需要findViewById，直接在app的build.gradle中添加</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply <span class="string">plugin:</span> <span class="string">'kotlin-android-extensions'</span></div></pre></td></tr></table></figure>
<h1 id="databinding"><a href="#databinding" class="headerlink" title="databinding"></a>databinding</h1><p>在app的build.gradle中android中添加</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dataBinding &#123;</div><div class="line">    enabled = <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还需要做如下处理，如果在xml里面使用了事件绑定，如：onClick</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">        <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"item"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"cn.woblog.testkotlindatabinding.ItemInput"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">            <span class="attr">name</span>=<span class="string">"actionHandler"</span></div><div class="line">            <span class="attr">type</span>=<span class="string">"cn.woblog.testkotlindatabinding.ActionHandler"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></div><div class="line">        <span class="attr">android:paddingBottom</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">        <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">        <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">        <span class="attr">android:paddingTop</span>=<span class="string">"@dimen/activity_vertical_margin"</span></div><div class="line">        <span class="attr">tools:context</span>=<span class="string">"cn.woblog.testkotlindatabinding.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"Hello World!"</span>/&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:onClick</span>=<span class="string">"@&#123;()-&gt;actionHandler.onClick(item)&#125;"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"click me"</span>/&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>需要在app的build.gradle的dependencies</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kapt <span class="string">'com.android.databinding:compiler:+'</span></div></pre></td></tr></table></figure>
<p>并且还要在在最外层添加</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">kapt &#123;</div><div class="line">    generateStubs = <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;大家都知道Kotlin语言在Android界还是很火的，到底有多好呢，这篇文章暂不介绍，而这里主要讲解是搭建一个开发环境&lt;/p&gt;
&lt;h1 i
    
    </summary>
    
      <category term="Android" scheme="http://i.woblog.cn/categories/Android/"/>
    
    
      <category term="Kotlin" scheme="http://i.woblog.cn/tags/Kotlin/"/>
    
  </entry>
  
</feed>
